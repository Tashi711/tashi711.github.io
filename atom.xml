<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tashi711的博客</title>
  
  <subtitle>過去（きのう）に傷付きながらも、信じ続ける理想（ゆめ）を求める。いつか無限（なないろ）に輝き放って、青空（そら）に橋を描く。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tashi711.top/"/>
  <updated>2019-05-18T18:02:18.810Z</updated>
  <id>http://tashi711.top/</id>
  
  <author>
    <name>Tashi711</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「矩阵快速幂」模板</title>
    <link href="http://tashi711.top/programming/dsaa/matrix-quick-power/"/>
    <id>http://tashi711.top/programming/dsaa/matrix-quick-power/</id>
    <published>2019-05-27T03:15:34.000Z</published>
    <updated>2019-05-18T18:02:18.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>之前分别写过矩阵乘法与快速幂的模板，现在将两者结合起来。<br>在原矩阵模板中增加：<br>1、初始化为单位矩阵（一定要是在初始化，因为没有做清零操作）。<br>2、*=模板。<br>3、快速幂模板。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> tashi711 &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> neg = <span class="number">0</span>, k = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    neg |= k == <span class="string">'-'</span>;</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (k ^ <span class="number">0x30</span>);</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (neg) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  read(x);</span><br><span class="line">  read(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">9</span>) &#123;</span><br><span class="line">    write(x / <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">putchar</span>(x % <span class="number">10</span> | <span class="number">0x30</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writes</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  write(x);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeln</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeln</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  write(x);</span><br><span class="line">  writeln();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeln</span><span class="params">(T x, Args... args)</span> </span>&#123;</span><br><span class="line">  writes(x);</span><br><span class="line">  writeln(args...);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> T kModulus = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;T&gt;&gt; a;</span><br><span class="line">  <span class="keyword">bool</span> calc_mod;</span><br><span class="line"></span><br><span class="line">  matrix(<span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> w = <span class="number">0</span>, <span class="keyword">bool</span> cm = <span class="literal">true</span>)</span><br><span class="line">    : n(l), m(w), a(n, <span class="built_in">vector</span>&lt;T&gt;(m, <span class="number">0</span>)), calc_mod(cm) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  matrix(<span class="keyword">int</span> l, <span class="keyword">int</span> w, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;T&gt;&gt;&amp;&amp; vec, <span class="keyword">bool</span> cm = <span class="literal">true</span>)</span><br><span class="line">    : n(l), m(w), calc_mod(cm) &#123;</span><br><span class="line">    <span class="keyword">int</span> u = vec.size();</span><br><span class="line">    <span class="keyword">if</span> (u == n) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; row : vec) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = row.size();</span><br><span class="line">        <span class="keyword">if</span> (v != m) &#123;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; <span class="string">"matrix(): assign (? * "</span> &lt;&lt; v &lt;&lt; <span class="string">") to (? * "</span> &lt;&lt; m &lt;&lt; <span class="string">")."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">          n = <span class="number">0</span>;</span><br><span class="line">          m = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"matrix(): assign ("</span> &lt;&lt; u &lt;&lt; <span class="string">" * ?) to ("</span> &lt;&lt; n &lt;&lt; <span class="string">" * ?)."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      n = <span class="number">0</span>;</span><br><span class="line">      m = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a = vec;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> matrix&amp; r) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (m != r.n) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; n &lt;&lt; <span class="string">", "</span> &lt;&lt; m &lt;&lt; <span class="string">") * ("</span> &lt;&lt; r.n &lt;&lt; <span class="string">", "</span> &lt;&lt; r.m &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> matrix();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">matrix <span class="title">res</span><span class="params">(n, r.m)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; r.m; ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; ++k) &#123;</span><br><span class="line">          res.a[i][j] += a[i][k] * r.a[k][j];</span><br><span class="line">          <span class="keyword">if</span> (calc_mod) &#123;</span><br><span class="line">            res.a[i][j] %= kModulus;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  matrix&amp; <span class="keyword">operator</span>*=(<span class="keyword">const</span> matrix&amp; r) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> * r;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init_make_identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = min(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">      a[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> P&gt;</span><br><span class="line">  <span class="function">matrix <span class="title">power</span><span class="params">(P k)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n != m) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; n &lt;&lt; <span class="string">" * "</span> &lt;&lt; m &lt;&lt; <span class="string">") ^ "</span> &lt;&lt; k &lt;&lt; <span class="string">"."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> matrix();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">matrix <span class="title">res</span><span class="params">(n, n)</span></span>;</span><br><span class="line">    res.init_make_identity();</span><br><span class="line">    matrix t = *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">while</span> (k) &#123;</span><br><span class="line">      <span class="keyword">if</span> (k &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        res *= t;</span><br><span class="line">      &#125;</span><br><span class="line">      t *= t;</span><br><span class="line">      k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">to_str</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">        ss &lt;&lt; a[i][j] &lt;&lt; (j == m - <span class="number">1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ss.str();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> matrix&lt;T&gt;&amp; r) &#123;</span><br><span class="line">  out &lt;&lt; r.to_str();</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line">  tashi711::read(n, k);</span><br><span class="line">  matrix&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; mat(n, n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">      tashi711::read(mat.a[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; mat.power(k).to_str();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;之前分别写过矩阵乘法与快速幂的模板，现在将两者结合起来。&lt;br&gt;在原矩阵模板中增加：&lt;br&gt;1、初始化为单位矩阵（一定要是在初始化，因为没有做清零操作）。&lt;br&gt;2、*=模板。&lt;br&gt;3、快速幂模板。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="快速幂" scheme="http://tashi711.top/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>「树状数组」扩展</title>
    <link href="http://tashi711.top/programming/others/bit-%20extend/"/>
    <id>http://tashi711.top/programming/others/bit- extend/</id>
    <published>2019-05-26T03:15:34.000Z</published>
    <updated>2019-05-18T15:13:16.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>已知一个数列，你需要进行下面两种操作：1、将某区间每一个数数加上k，2、求出某一个数的值。<br>看起来是要用线段树了，其实只需要树状数组即可，bit只需要表示其差分即可。<br>设数组a[]，其差分数组b[i]=a[i]-a[i-1]，其中a[0]=0，易得a[i]=b[1]+….+b[i]。<br>对区间[x,y]加k，只用修改b[x]与b[y+1]：b[x]=b[x]+k，b[y+1]=b[y+1]-k。</p><h3 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h3><p><a href="https://www.luogu.org/problemnew/show/P3368" target="_blank" rel="noopener">洛谷 3368 - 树状数组 2</a></p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> tashi711 &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> neg = <span class="number">0</span>, k = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    neg |= k == <span class="string">'-'</span>;</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (k ^ <span class="number">0x30</span>);</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (neg) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  read(x);</span><br><span class="line">  read(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">9</span>) &#123;</span><br><span class="line">    write(x / <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">putchar</span>(x % <span class="number">10</span> | <span class="number">0x30</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeln</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  write(x);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binary_indexed_tree</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">vector</span>&lt;T&gt; a;</span><br><span class="line"></span><br><span class="line">  binary_indexed_tree(<span class="keyword">int</span> n) : n(n), a(n + <span class="number">1</span>, <span class="number">0</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p, T k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= <span class="number">0</span> || p &gt; n) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"update("</span> &lt;&lt; p &lt;&lt; <span class="string">", "</span> &lt;&lt; k &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = p; i &lt;= n; i += lowbit(i)) &#123;</span><br><span class="line">      a[i] += k;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> p)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; <span class="number">0</span> || p &gt; n) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"get_sum("</span> &lt;&lt; p &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    T sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = p; i; i ^= lowbit(i)) &#123;</span><br><span class="line">      sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> get_sum(v) - get_sum(u - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  read(n, m);</span><br><span class="line">  binary_indexed_tree&lt;<span class="keyword">int</span>&gt; bit(n);</span><br><span class="line">  <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> u, i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    read(u);</span><br><span class="line">    bit.update(i, u - last);</span><br><span class="line">    last = u;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> q, u, v, w, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    read(q);</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="number">1</span>) &#123;</span><br><span class="line">      read(u, v, w);</span><br><span class="line">      bit.update(u, w);</span><br><span class="line">      <span class="keyword">if</span> (v &lt; n) &#123;</span><br><span class="line">        bit.update(v + <span class="number">1</span>, -w);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      read(u);</span><br><span class="line">      writeln(bit.get_sum(u));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;已知一个数列，你需要进行下面两种操作：1、将某区间每一个数数加上k，2、求出某一个数的值。&lt;br&gt;看起来是要用线段树了，其实只需要树状数组即可，bit只需要表示其差分即可。&lt;br&gt;设数组a[]，其差分数组b[i]=a[i]-a[i-1]，其中a[0]=0，易得a[i]=b[1]+….+b[i]。&lt;br&gt;对区间[x,y]加k，只用修改b[x]与b[y+1]：b[x]=b[x]+k，b[y+1]=b[y+1]-k。&lt;/p&gt;
&lt;h3 id=&quot;模板题&quot;&gt;&lt;a href=&quot;#模板题&quot; class=&quot;headerlink&quot; title=&quot;模板题&quot;&gt;&lt;/a&gt;模板题&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3368&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷 3368 - 树状数组 2&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="其他" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="树状数组" scheme="http://tashi711.top/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>「三分法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/trichotomy/"/>
    <id>http://tashi711.top/programming/dsaa/trichotomy/</id>
    <published>2019-05-25T03:15:34.000Z</published>
    <updated>2019-05-18T14:44:46.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>其实不是严格的三分法，复杂度像是二分，却又不是单纯的（梯度）二分，但其实思想差不多。<br>单纯的三分是三等分，每次只缩三分之一，而这个算法将中间两个点缩到足够近，可以认为是每次对半分了。<br>求多项式可以用如下秦九韶算法。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">polynomial</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> T kEps = <span class="number">1e-7</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">vector</span>&lt;T&gt; a;</span><br><span class="line"></span><br><span class="line">  polynomial(<span class="keyword">int</span> num) : n(num), a(n + <span class="number">1</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">f</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">      res = res * x + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">trichotomy</span><span class="params">(T u, T v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (v - u &gt;= kEps) &#123;</span><br><span class="line">      T mid = (u + v) / <span class="number">2.0</span>;</span><br><span class="line">      <span class="keyword">if</span> (f(mid - kEps) &lt; f(mid + kEps)) &#123;</span><br><span class="line">        u = mid;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        v = mid;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">double</span> u, v;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; u &gt;&gt; v;</span><br><span class="line">  polynomial&lt;<span class="keyword">double</span>&gt; p(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; p.a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">5</span>) &lt;&lt; p.trichotomy(u, v) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;其实不是严格的三分法，复杂度像是二分，却又不是单纯的（梯度）二分，但其实思想差不多。&lt;br&gt;单纯的三分是三等分，每次只缩三分之一，而这个算法将中间两个点缩到足够近，可以认为是每次对半分了。&lt;br&gt;求多项式可以用如下秦九韶算法。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="三分法" scheme="http://tashi711.top/tags/%E4%B8%89%E5%88%86%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>「单源点最短路径」模板</title>
    <link href="http://tashi711.top/programming/dsaa/shortest_path/"/>
    <id>http://tashi711.top/programming/dsaa/shortest_path/</id>
    <published>2019-05-24T03:15:34.000Z</published>
    <updated>2019-05-17T17:51:44.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>单源点最短路径：1、dijkstra（堆优化），2、SPFA。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> tashi711 &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> neg = <span class="number">0</span>, k = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    neg |= k == <span class="string">'-'</span>;</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (k ^ <span class="number">0x30</span>);</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (neg) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  read(x);</span><br><span class="line">  read(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">9</span>) &#123;</span><br><span class="line">    write(x / <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">putchar</span>(x % <span class="number">10</span> | <span class="number">0x30</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeln</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  write(x);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">shortest_path</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, T&gt;&gt;&gt; adj;</span><br><span class="line">  <span class="built_in">vector</span>&lt;T&gt; d;</span><br><span class="line">  <span class="built_in">vector</span>&lt;T&gt; vst;</span><br><span class="line"></span><br><span class="line">  shortest_path(<span class="keyword">int</span> num)</span><br><span class="line">    : n(num), adj(n + <span class="number">1</span>), d(n + <span class="number">1</span>, numeric_limits&lt;T&gt;::max()),</span><br><span class="line">    vst(n + <span class="number">1</span>, <span class="literal">false</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T w)</span> </span>&#123;</span><br><span class="line">    adj[u].emplace_back(v, w);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;pair&lt;T, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;T, <span class="keyword">int</span>&gt;&gt;, greater&lt;pair&lt;T, <span class="keyword">int</span>&gt;&gt;&gt; q;</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    q.emplace(<span class="number">0</span>, s);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">      <span class="keyword">int</span> u = q.top().second;</span><br><span class="line">      q.pop();</span><br><span class="line">      <span class="keyword">if</span> (vst[u]) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      vst[u] = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : adj[u]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = p.first;</span><br><span class="line">        T w = p.second;</span><br><span class="line">        <span class="keyword">if</span> (d[v] &gt; d[u] + w) &#123;</span><br><span class="line">          d[v] = d[u] + w;</span><br><span class="line">          q.emplace(d[v], v);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    d[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    vst[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">      <span class="keyword">int</span> u = q.front();</span><br><span class="line">      q.pop();</span><br><span class="line">      vst[u] = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : adj[u]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = p.first;</span><br><span class="line">        T w = p.second;</span><br><span class="line">        <span class="keyword">if</span> (d[v] &gt; d[u] + w) &#123;</span><br><span class="line">          d[v] = d[u] + w;</span><br><span class="line">          <span class="keyword">if</span> (!vst[v]) &#123;</span><br><span class="line">            q.push(v);</span><br><span class="line">            vst[v] = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, m, s;</span><br><span class="line">  read(n, m, s);</span><br><span class="line">  shortest_path&lt;<span class="keyword">int</span>&gt; sp(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> u, v, w, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    read(u, v, w);</span><br><span class="line">    sp.add_edge(u, v, w);</span><br><span class="line">  &#125;</span><br><span class="line">  sp.spfa(s);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    write(sp.d[i]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;单源点最短路径：1、dijkstra（堆优化），2、SPFA。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="最短路" scheme="http://tashi711.top/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>「洛谷 4549 - 裴蜀定理」解题报告</title>
    <link href="http://tashi711.top/programming/reports/others/luogu-4549/"/>
    <id>http://tashi711.top/programming/reports/others/luogu-4549/</id>
    <published>2019-05-22T16:11:04.000Z</published>
    <updated>2019-05-17T16:44:00.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://www.luogu.org/problemnew/show/P4549" target="_blank" rel="noopener">洛谷 4549 - 裴蜀定理</a></li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目本身很简单，根据裴蜀定理就是裸的求n的数的最大公约数。<br>这里主要实现下快速输入输出的模板以及快速求gcd。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> tashi711 &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> neg = <span class="number">0</span>, k = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    neg |= k == <span class="string">'-'</span>;</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (k ^ <span class="number">0x30</span>);</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (neg) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  read(x);</span><br><span class="line">  read(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">9</span>) &#123;</span><br><span class="line">    write(x / <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">putchar</span>(x % <span class="number">10</span> | <span class="number">0x30</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeln</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  write(x);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (b) &#123;</span><br><span class="line">    <span class="keyword">while</span> (b ^= a ^= b ^= a %= b);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  read(n);</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> u, i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    read(u);</span><br><span class="line">    ans = gcd(ans, <span class="built_in">abs</span>(u));</span><br><span class="line">  &#125;</span><br><span class="line">  writeln(ans);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://www.luogu.org/problemnew/show/P4549&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;洛谷 4549 - 裴蜀定理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;题目本身很简单，根据裴蜀定理就是裸的求n的数的最大公约数。&lt;br&gt;这里主要实现下快速输入输出的模板以及快速求gcd。&lt;/p&gt;
&lt;h2 id=&quot;AC代码（C-）&quot;&gt;&lt;a href=&quot;#AC代码（C-）&quot; class=&quot;headerlink&quot; title=&quot;AC代码（C++）&quot;&gt;&lt;/a&gt;AC代码（C++）&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="其他" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="裴蜀定理" scheme="http://tashi711.top/tags/%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>「进制哈希」模板</title>
    <link href="http://tashi711.top/programming/dsaa/base_hash/"/>
    <id>http://tashi711.top/programming/dsaa/base_hash/</id>
    <published>2019-05-22T03:15:34.000Z</published>
    <updated>2019-05-15T17:46:22.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>进制哈希主要用于字符串，在base与modulus选的得当的情况下基本可以认为无冲突。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">base_hash</span> &#123;</span></span><br><span class="line">  <span class="keyword">using</span> bash_type = <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> bash_type kBase = <span class="number">131U</span>LL;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> bash_type kModulus = <span class="number">212370440130137957U</span>LL;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> bash_type <span class="title">string_hash</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.size();</span><br><span class="line">    bash_type res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      res = (res * kBase + <span class="keyword">static_cast</span>&lt;bash_type&gt;(s[i])) % kModulus;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="built_in">vector</span>&lt;base_hash::bash_type&gt; vec(n);</span><br><span class="line">  <span class="built_in">string</span> s;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    vec[i] = base_hash::string_hash(s);</span><br><span class="line">  &#125;</span><br><span class="line">  sort(vec.begin(), vec.end());</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; unique(vec.begin(), vec.end()) - vec.cbegin() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;进制哈希主要用于字符串，在base与modulus选的得当的情况下基本可以认为无冲突。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="进制哈希" scheme="http://tashi711.top/tags/%E8%BF%9B%E5%88%B6%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>「堆」简单实现</title>
    <link href="http://tashi711.top/programming/dsaa/heap/"/>
    <id>http://tashi711.top/programming/dsaa/heap/</id>
    <published>2019-05-21T03:15:34.000Z</published>
    <updated>2019-05-15T17:10:46.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>其实手写堆的意义已经不大了，这里写一写主要是想稍微熟悉下堆的运作方式。为了与一般对堆的认知保持一致，这里数组里面加了一个pivot，让下标从1开始，以此方便计算父亲与儿子的下标。</p><p>下面的代码可以更加完善一点，例如重载比较实现切换大根、小根堆，以及完善线性时间用一段数组初始化堆等功能（但没必要，STL里面有这些heap相关算法了，甚至priority_queue可以完全取代）。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">heap</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">vector</span>&lt;T&gt; h&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T k)</span> </span>&#123;</span><br><span class="line">    h.push_back(k);</span><br><span class="line">    <span class="keyword">int</span> cur = ++n;</span><br><span class="line">    <span class="keyword">while</span> (cur &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> p = cur &gt;&gt; <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (h[cur] &gt;= h[p]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      swap(h[cur], h[p]);</span><br><span class="line">      cur = p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"top() with size "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"pop() with size "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    h[<span class="number">1</span>] = h[n--];</span><br><span class="line">    h.pop_back();</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur &lt;&lt; <span class="number">1</span> &lt;= n) &#123;</span><br><span class="line">      <span class="keyword">int</span> p = cur &lt;&lt; <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (p &lt; n &amp;&amp; h[p | <span class="number">1</span>] &lt; h[p]) &#123;</span><br><span class="line">        ++p;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (h[cur] &lt;= h[p]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      swap(h[cur], h[p]);</span><br><span class="line">      cur = p;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  heap&lt;<span class="keyword">int</span>&gt; hp;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> u, k, i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;u);</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">      hp.push(k);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, hp.top());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      hp.pop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;其实手写堆的意义已经不大了，这里写一写主要是想稍微熟悉下堆的运作方式。为了与一般对堆的认知保持一致，这里数组里面加了一个pivot，让下标从1开始，以此方便计算父亲与儿子的下标。&lt;/p&gt;
&lt;p&gt;下面的代码可以更加完善一点，例如重载比较实现切换大根、小根堆，以及完善线性时间用一段数组初始化堆等功能（但没必要，STL里面有这些heap相关算法了，甚至priority_queue可以完全取代）。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="堆" scheme="http://tashi711.top/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>「质数」相关算法讨论</title>
    <link href="http://tashi711.top/programming/dsaa/prime/"/>
    <id>http://tashi711.top/programming/dsaa/prime/</id>
    <published>2019-05-20T03:15:34.000Z</published>
    <updated>2019-05-14T18:09:30.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速质数判定"><a href="#快速质数判定" class="headerlink" title="快速质数判定"></a>快速质数判定</h2><p>只需考虑6k-1与6k+1，比传统质数判定算法快3倍左右。</p><h3 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">fast_is_prime</span><span class="params">(T n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">2</span> || n == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (n % <span class="number">6</span> != <span class="number">1</span> &amp;&amp; n % <span class="number">6</span> != <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (T i = <span class="number">5</span>; i * i &lt;= n; i += <span class="number">6</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n % i == <span class="number">0</span> || n % (i + <span class="number">2</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="欧拉筛法"><a href="#欧拉筛法" class="headerlink" title="欧拉筛法"></a>欧拉筛法</h2><a id="more"></a><p>O(N)，每个合数保证只在其最小质因数处筛一次，比传统埃拉托斯特尼筛法O(NloglogN)快。</p><p>通过程序中的的<code>if (i % primes[j] == 0) break;</code>保证<code>is_prime[i * primes[j]] = false;</code>时<code>primes[j]</code>是<code>i * primes[j]</code>的最小质因数。</p><p>简单证明：<br>1、假设<code>i * primes[j]</code>的最小质因数为<code>primes[k]</code>，k &lt; j，那么在前面枚举到k时就应该break掉了。<br>2、假设<code>i * primes[j]</code>有质因数<code>primes[p]</code>，p &gt; j，那么在某个<code>i&#39;</code>为<code>i * primes[j] / primes[p]</code>时会被<code>i&#39; % primes[j] == 0</code>给break掉。<br>综1、2所述，<code>i * primes[j]</code>会且只会被其最小的质因数<code>primes[j]</code>筛掉。</p><h3 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h3><p>以下代码可以过洛谷的模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">prime</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; is_prime;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; primes;</span><br><span class="line"></span><br><span class="line">  prime(<span class="keyword">int</span> num) : n(num), is_prime(n + <span class="number">1</span>, <span class="literal">true</span>) &#123;</span><br><span class="line">    euler_sieve();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">euler_sieve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    is_prime[<span class="number">0</span>] = is_prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (is_prime[i]) &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        primes.push_back(i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt &amp;&amp; i * primes[j] &lt;= n; ++j) &#123;</span><br><span class="line">        is_prime[i * primes[j]] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  <span class="function">prime <span class="title">p</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> u, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;u);</span><br><span class="line">    <span class="built_in">printf</span>(p.is_prime[u] ? <span class="string">"Yes\n"</span> : <span class="string">"No\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快速质数判定&quot;&gt;&lt;a href=&quot;#快速质数判定&quot; class=&quot;headerlink&quot; title=&quot;快速质数判定&quot;&gt;&lt;/a&gt;快速质数判定&lt;/h2&gt;&lt;p&gt;只需考虑6k-1与6k+1，比传统质数判定算法快3倍左右。&lt;/p&gt;
&lt;h3 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt; &amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fast_is_prime&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(T n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; || n == &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n % &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; n % &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (T i = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i * i &amp;lt;= n; i += &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n % i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || n % (i + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;欧拉筛法&quot;&gt;&lt;a href=&quot;#欧拉筛法&quot; class=&quot;headerlink&quot; title=&quot;欧拉筛法&quot;&gt;&lt;/a&gt;欧拉筛法&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="质数筛法" scheme="http://tashi711.top/tags/%E8%B4%A8%E6%95%B0%E7%AD%9B%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>「快速排序」正确姿势</title>
    <link href="http://tashi711.top/programming/dsaa/quick-sort/"/>
    <id>http://tashi711.top/programming/dsaa/quick-sort/</id>
    <published>2019-05-19T03:15:34.000Z</published>
    <updated>2019-05-12T05:26:22.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>虽然std::sort在这么强大的存在使得手码快排显得格外多余，不过了解下其运作方式还是很有有些必要的。网上看了许多快速排序模板，发现几乎都有多多少少的不同，尤其是判断等号的条件，最后发现其实这才是解决问题的关键。</p><p>以下代码对洛谷的模板题是轻松过掉，其实根本不需要做很多多余的特判，比如随机化，只需要取首中尾的中间值作为pivot即可有效防止卡数据（数据结构课上学的，某教材结论），于是只需要如下简单的循环即可（哪怕对全是相同数据也一样鲁棒）。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">quick_sorter</span> &#123;</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="built_in">vector</span>&lt;T&gt;&amp; a, <span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    T mid = min(max(a[u], a[v]), a[u + (v - u) / <span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">int</span> l = u, r = v;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">      <span class="keyword">while</span> (a[l] &lt; mid) &#123;</span><br><span class="line">        ++l;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> (a[r] &gt; mid) &#123;</span><br><span class="line">        --r;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (l &lt;= r) &#123;</span><br><span class="line">        swap(a[l++], a[r--]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (u &lt; r) &#123;</span><br><span class="line">      quick_sort(a, u, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; v) &#123;</span><br><span class="line">      quick_sort(a, l, v);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  quick_sorter::quick_sort(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;虽然std::sort在这么强大的存在使得手码快排显得格外多余，不过了解下其运作方式还是很有有些必要的。网上看了许多快速排序模板，发现几乎都有多多少少的不同，尤其是判断等号的条件，最后发现其实这才是解决问题的关键。&lt;/p&gt;
&lt;p&gt;以下代码对洛谷的模板题是轻松过掉，其实根本不需要做很多多余的特判，比如随机化，只需要取首中尾的中间值作为pivot即可有效防止卡数据（数据结构课上学的，某教材结论），于是只需要如下简单的循环即可（哪怕对全是相同数据也一样鲁棒）。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="快速排序" scheme="http://tashi711.top/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>「ST算法解RMQ问题」模板</title>
    <link href="http://tashi711.top/programming/dsaa/rmq/"/>
    <id>http://tashi711.top/programming/dsaa/rmq/</id>
    <published>2019-05-18T03:15:34.000Z</published>
    <updated>2019-05-10T17:34:16.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ST算法解RMQ问题。<br>RMQ：区间最值询问。<br>ST（Sparse Table）算法：O(NlogN)，倍增思想。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="keyword">int</span>&gt;</span><br><span class="line">struct range_query &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">double</span> kEps = <span class="number">1e-3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> offset;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;T&gt;&gt; f, g;</span><br><span class="line"></span><br><span class="line">  range_query(<span class="keyword">int</span> num, <span class="keyword">int</span> os = <span class="number">1</span>) : n(num), offset(os) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sparse_table</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">    f.push_back(vec);</span><br><span class="line">    g.push_back(vec);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; k) &lt;= n; ++k) &#123;</span><br><span class="line">      <span class="keyword">int</span> len = n - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">vector</span>&lt;T&gt; u(len), v(len);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        u[i] = max(f[k - <span class="number">1</span>][i], f[k - <span class="number">1</span>][i + (<span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>))]);</span><br><span class="line">        v[i] = min(g[k - <span class="number">1</span>][i], g[k - <span class="number">1</span>][i + (<span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>))]);</span><br><span class="line">      &#125;</span><br><span class="line">      f.push_back(<span class="built_in">std</span>::move(u));</span><br><span class="line">      g.push_back(<span class="built_in">std</span>::move(v));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">max_query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = u - offset, r = v - offset;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(log2(r - l + <span class="number">1.0</span>) + kEps);</span><br><span class="line">    <span class="keyword">return</span> max(f[k][l], f[k][r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function">T <span class="title">min_query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = u - offset, r = v - offset;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(log2(r - l + <span class="number">1.0</span>) + kEps);</span><br><span class="line">    <span class="keyword">return</span> min(g[k][l], g[k][r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">check_max</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt;= n; ++len) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - len; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = i + offset, v = i + len - <span class="number">1</span> + offset;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; max_query(u, v) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">check_min</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt;= n; ++len) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - len; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = i + offset, v = i + len - <span class="number">1</span> + offset;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; min_query(u, v) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  range_query&lt;<span class="keyword">int</span>&gt; rq1(<span class="number">5</span>);</span><br><span class="line">  rq1.sparse_table(&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>&#125;);</span><br><span class="line">  rq1.check_max();</span><br><span class="line">  rq1.check_min();</span><br><span class="line"></span><br><span class="line">  range_query&lt;<span class="keyword">double</span>&gt; rq2(<span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">  rq2.sparse_table(&#123;<span class="number">7.9</span>, <span class="number">2.4</span>, <span class="number">5.5</span>&#125;);</span><br><span class="line">  rq2.check_max();</span><br><span class="line">  rq2.check_min();</span><br><span class="line"></span><br><span class="line">  range_query&lt;<span class="keyword">int</span>&gt; rq3(<span class="number">8</span>, <span class="number">2</span>);</span><br><span class="line">  rq3.sparse_table(&#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">111</span>&#125;);</span><br><span class="line">  rq3.check_max();</span><br><span class="line">  rq3.check_min();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;ST算法解RMQ问题。&lt;br&gt;RMQ：区间最值询问。&lt;br&gt;ST（Sparse Table）算法：O(NlogN)，倍增思想。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="ST算法" scheme="http://tashi711.top/tags/ST%E7%AE%97%E6%B3%95/"/>
    
      <category term="RMQ" scheme="http://tashi711.top/tags/RMQ/"/>
    
  </entry>
  
  <entry>
    <title>「扩展中国剩余定理」深入思考</title>
    <link href="http://tashi711.top/programming/dsaa/extended-crt/"/>
    <id>http://tashi711.top/programming/dsaa/extended-crt/</id>
    <published>2019-05-17T03:15:34.000Z</published>
    <updated>2019-05-09T17:47:30.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用扩展中国剩余定理解决线性同余方程。</p><h3 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h3><p>扩展中国剩余定理，顾名思义，是中国剩余定理的扩展，中国剩余定理可以解决模数互质的线性同余方程组问题，而扩展中国剩余定理可以进一步解决任意的线性同余方程组问题。因此可以认为扩展中国剩余定理基本可以取代中国剩余定理，当然，扩展中国剩余定理需要求n次扩展欧几里得，复杂度是O(NlogN)，而中国剩余定理只需要O(N)。</p><p>具体细节与思考写在代码之后，下面代码用于解决洛谷的模板题<a href="https://www.luogu.org/problemnew/show/P4777" target="_blank" rel="noopener">P4777</a>。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="keyword">long</span> <span class="keyword">long</span>&gt;</span><br><span class="line">struct extended_crt &#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">vector</span>&lt;T&gt; a;</span><br><span class="line">  <span class="built_in">vector</span>&lt;T&gt; m;</span><br><span class="line"></span><br><span class="line">  extended_crt(<span class="keyword">int</span> num) : n(num), a(n), m(n) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">ex_gcd</span><span class="params">(T a, T b, T* x, T* y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">      *x = <span class="number">1</span>;</span><br><span class="line">      *y = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    T res = ex_gcd(b, a % b, y, x);</span><br><span class="line">    *y -= *x * (a / b);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">quick_mul</span><span class="params">(T a, T b, T mod)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">      <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        res = (res + a) % mod;</span><br><span class="line">      &#125;</span><br><span class="line">      a = (a &lt;&lt; <span class="number">1</span>) % mod;</span><br><span class="line">      b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">ex_crt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T prod_m = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      T x, y;</span><br><span class="line">      T gcd = ex_gcd(prod_m, m[i], &amp;x, &amp;y);</span><br><span class="line">      T c = ((a[i] - res) % m[i] + m[i]) % m[i];</span><br><span class="line">      <span class="keyword">if</span> (c % gcd) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      T times = c / gcd, u = m[i] / gcd;</span><br><span class="line">      x = (x % u + u) % u;</span><br><span class="line">      x = quick_mul(x, times, u);</span><br><span class="line">      res += prod_m * x;</span><br><span class="line">      prod_m *= u;</span><br><span class="line">      res %= prod_m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  extended_crt&lt;&gt; crt(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;crt.m[i], &amp;crt.a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; crt.ex_crt() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>基本思路不难理解，可以参考洛谷上这道题的题解。下面说下一些点。</p><h3 id="long-long乘long-long取模"><a href="#long-long乘long-long取模" class="headerlink" title="long long乘long long取模"></a>long long乘long long取模</h3><p>高精是一种解法，不过不需要，可以联系快速幂的算法来解决（将乘法看作幂，那么加法就是快速幂中的乘法）。这样的好处是加法就基本不会溢出了（只需模数不大于最大值的一半），此时复杂度也只是log(long long) = 64。</p><p>见上面代码的quick_mul。</p><h3 id="二元一次方程求解"><a href="#二元一次方程求解" class="headerlink" title="二元一次方程求解"></a>二元一次方程求解</h3><p>之前写过一篇文章讲扩展欧几里得求逆元。这里遇到了其新的应用：解方程。</p><p>首先，令 gcd = gcd(a, b)，扩展欧几里得得到的是 ax + by = gcd 的解，那么方程 ax + by = c 只有在 c 是 gcd 倍数时才有（整数）解，ax + by = gcd 的解乘上 c / gcd 即为原方程的（一组）解 (x0, y0)，那么方程的所有解是什么呢，如果x = x0 + u * t，y = y0 - v * t，不难推出，u 为 b / gcd，v 为 a / gcd。当 u 为正整数时（充分地，a、b、c均为正整数），x 的最小正整数解为 (x mod u + u) mod u。</p><p>可写出代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="keyword">long</span> <span class="keyword">long</span>&gt;</span><br><span class="line"><span class="keyword">bool</span> solve_equation(T a, T b, T c, T* x, T* y, T* u = <span class="literal">nullptr</span>, T* v = <span class="literal">nullptr</span>) &#123;</span><br><span class="line">  T gcd = ex_gcd(a, b, x, y);</span><br><span class="line">  <span class="keyword">if</span> (c % gcd) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  T times = c / gcd;</span><br><span class="line">  *x *= times;</span><br><span class="line">  *y *= times;</span><br><span class="line">  <span class="keyword">if</span> (u) &#123;</span><br><span class="line">    *u = b / gcd;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (v) &#123;</span><br><span class="line">    *v = a / gcd;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，这段代码没有用在上面的代码中，因为<code>*x *= times;</code>这一步会爆long long，因此手动用上述的quick_mul实现了解方程。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;使用扩展中国剩余定理解决线性同余方程。&lt;/p&gt;
&lt;h3 id=&quot;中国剩余定理&quot;&gt;&lt;a href=&quot;#中国剩余定理&quot; class=&quot;headerlink&quot; title=&quot;中国剩余定理&quot;&gt;&lt;/a&gt;中国剩余定理&lt;/h3&gt;&lt;p&gt;扩展中国剩余定理，顾名思义，是中国剩余定理的扩展，中国剩余定理可以解决模数互质的线性同余方程组问题，而扩展中国剩余定理可以进一步解决任意的线性同余方程组问题。因此可以认为扩展中国剩余定理基本可以取代中国剩余定理，当然，扩展中国剩余定理需要求n次扩展欧几里得，复杂度是O(NlogN)，而中国剩余定理只需要O(N)。&lt;/p&gt;
&lt;p&gt;具体细节与思考写在代码之后，下面代码用于解决洛谷的模板题&lt;a href=&quot;https://www.luogu.org/problemnew/show/P4777&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;P4777&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="扩展中国剩余定理" scheme="http://tashi711.top/tags/%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    
      <category term="线性同余方程" scheme="http://tashi711.top/tags/%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>「拓扑排序算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/topological-sort/"/>
    <id>http://tashi711.top/programming/dsaa/topological-sort/</id>
    <published>2019-05-16T03:15:34.000Z</published>
    <updated>2019-05-08T15:46:38.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>有向图拓扑排序算法。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>本算法仅实现了最基本框架，可扩展以下几个方面：</p><p>1、加入判断无解情况（环还是不连通），目前都返回false。<br>2、控制输出顺序（例如字典序最小用priority_queue代替queue，不过复杂度会从O(M)变为O(M+NlogN)）。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TopologicalSort</span> &#123;</span></span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">res_t</span> = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> offset;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; adj;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; in_d;</span><br><span class="line"></span><br><span class="line">  TopologicalSort(<span class="keyword">int</span> v, <span class="keyword">int</span> os = <span class="number">1</span>) : n(v), offset(os), adj(v), in_d(v) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = e.first - offset, v = e.second - offset;</span><br><span class="line">    adj[u].push_back(v);</span><br><span class="line">    ++in_d[v];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&amp; es)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : es) &#123;</span><br><span class="line">      add_edge(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">topological</span><span class="params">(<span class="keyword">res_t</span>* res)</span> </span>&#123;</span><br><span class="line">    res-&gt;clear();</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (in_d[i] == <span class="number">0</span>) &#123;</span><br><span class="line">        q.push(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">      <span class="keyword">int</span> u = q.front();</span><br><span class="line">      q.pop();</span><br><span class="line">      res-&gt;push_back(u + offset);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (--in_d[v] == <span class="number">0</span>) &#123;</span><br><span class="line">          q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res-&gt;size() != n) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">output_res</span><span class="params">(<span class="keyword">const</span> <span class="keyword">res_t</span>&amp; res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k : res) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; k &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  TopologicalSort::<span class="keyword">res_t</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="function">TopologicalSort <span class="title">ts1</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">  ts1.init(&#123;&#123;<span class="number">2</span>, <span class="number">3</span>&#125;,&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,&#123;<span class="number">4</span>, <span class="number">1</span>&#125;,&#123;<span class="number">4</span>, <span class="number">3</span>&#125;&#125;);</span><br><span class="line">  <span class="keyword">if</span> (!ts1.topological(&amp;res)) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ts1.output_res(res);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">TopologicalSort <span class="title">ts2</span><span class="params">(<span class="number">4</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">  ts2.init(&#123;&#123;<span class="number">2</span>, <span class="number">3</span>&#125;,&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,&#123;<span class="number">4</span>, <span class="number">1</span>&#125;,&#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;);</span><br><span class="line">  <span class="keyword">if</span> (!ts2.topological(&amp;res)) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ts2.output_res(res);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">TopologicalSort <span class="title">ts3</span><span class="params">(<span class="number">4</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">  ts3.init(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,&#123;<span class="number">3</span>, <span class="number">0</span>&#125;,&#123;<span class="number">3</span>, <span class="number">2</span>&#125;&#125;);</span><br><span class="line">  <span class="keyword">if</span> (!ts3.topological(&amp;res)) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ts3.output_res(res);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;有向图拓扑排序算法。&lt;/p&gt;
&lt;h3 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;p&gt;本算法仅实现了最基本框架，可扩展以下几个方面：&lt;/p&gt;
&lt;p&gt;1、加入判断无解情况（环还是不连通），目前都返回false。&lt;br&gt;2、控制输出顺序（例如字典序最小用priority_queue代替queue，不过复杂度会从O(M)变为O(M+NlogN)）。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="图论" scheme="http://tashi711.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="拓扑排序" scheme="http://tashi711.top/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>「Kruskal算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/kruskal/"/>
    <id>http://tashi711.top/programming/dsaa/kruskal/</id>
    <published>2019-05-15T03:15:34.000Z</published>
    <updated>2019-05-07T16:06:36.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Kruskal算法解决最小生成树问题。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>本算法仅实现了最基本框架，可扩展以下几个方面：</p><p>1、返回构成最小生成树的边（或者其序号）。<br>2、加入连通性判断（关系到是否有解）。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Kruskal</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">DisjointSet</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> offset;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line"></span><br><span class="line">    DisjointSet(<span class="keyword">int</span> v, <span class="keyword">int</span> os = <span class="number">1</span>) : n(v), offset(os), p(v) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">path_compression</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> p[k] == k ? k : p[k] = path_compression(p[k]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> idx = k - offset;</span><br><span class="line">      <span class="keyword">int</span> res = path_compression(idx);</span><br><span class="line">      <span class="keyword">return</span> res + offset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">union_root</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> x = u - offset;</span><br><span class="line">      <span class="keyword">int</span> y = v - offset;</span><br><span class="line">      p[y] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">union_any</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> x = find(u);</span><br><span class="line">      <span class="keyword">int</span> y = find(v);</span><br><span class="line">      union_root(x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output_roots</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; find(i + offset) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> offset;</span><br><span class="line">  <span class="built_in">vector</span>&lt;tuple&lt;T, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; edges;</span><br><span class="line">  DisjointSet ds;</span><br><span class="line"></span><br><span class="line">  Kruskal(<span class="keyword">int</span> v, <span class="keyword">int</span> os = <span class="number">1</span>) : n(v), offset(os), ds(v, <span class="number">0</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">const</span> tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, T&gt;&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    T w;</span><br><span class="line">    tie(u, v, w) = e;</span><br><span class="line">    u -= offset;</span><br><span class="line">    v -= offset;</span><br><span class="line">    edges.emplace_back(w, u, v);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, T&gt;&gt;&amp; es)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : es) &#123;</span><br><span class="line">      add_edge(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">minimum_spanning_tree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">0</span>;</span><br><span class="line">    sort(edges.begin(), edges.end());</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : edges) &#123;</span><br><span class="line">      <span class="keyword">int</span> u, v;</span><br><span class="line">      T w;</span><br><span class="line">      tie(w, u, v) = e;</span><br><span class="line">      <span class="keyword">int</span> x = ds.find(u), y = ds.find(v);</span><br><span class="line">      <span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">        res += w;</span><br><span class="line">        ds.union_root(x, y);</span><br><span class="line">        <span class="keyword">if</span> (++cnt == n) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Kruskal&lt;<span class="keyword">double</span>&gt; p1(<span class="number">3</span>);</span><br><span class="line">  p1.init(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1.1</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1.05</span>&#125;,&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">1.15</span>&#125;&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; p1.minimum_spanning_tree() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  Kruskal&lt;<span class="keyword">int</span>&gt; p2(<span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">  p2.init(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>&#125;,&#123;<span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>&#125;,&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>&#125;,&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>&#125;&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; p2.minimum_spanning_tree() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Kruskal算法解决最小生成树问题。&lt;/p&gt;
&lt;h3 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;p&gt;本算法仅实现了最基本框架，可扩展以下几个方面：&lt;/p&gt;
&lt;p&gt;1、返回构成最小生成树的边（或者其序号）。&lt;br&gt;2、加入连通性判断（关系到是否有解）。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="最小生成树" scheme="http://tashi711.top/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="Kruskal" scheme="http://tashi711.top/tags/Kruskal/"/>
    
  </entry>
  
  <entry>
    <title>「并查集」模板</title>
    <link href="http://tashi711.top/programming/dsaa/disjoint-set/"/>
    <id>http://tashi711.top/programming/dsaa/disjoint-set/</id>
    <published>2019-05-14T03:15:34.000Z</published>
    <updated>2019-05-06T15:44:40.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>并查集模板。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>1、实现偏移（0、1开始甚至负数）。<br>2、路径压缩。<br>3、对任意两个点合并和对两个根合并。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DisjointSet</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> offset;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line"></span><br><span class="line">  DisjointSet(<span class="keyword">int</span> v, <span class="keyword">int</span> os = <span class="number">1</span>) : n(v), offset(os), p(v) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      p[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">path_compression</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p[k] == k ? k : p[k] = path_compression(p[k]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> idx = k - offset;</span><br><span class="line">    <span class="keyword">int</span> res = path_compression(idx);</span><br><span class="line">    <span class="keyword">return</span> res + offset;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">union_root</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = u - offset;</span><br><span class="line">    <span class="keyword">int</span> y = v - offset;</span><br><span class="line">    p[y] = x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">union_any</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = find(u);</span><br><span class="line">    <span class="keyword">int</span> y = find(v);</span><br><span class="line">    union_root(x, y);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">output_roots</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; find(i + offset) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"test 1:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="function">DisjointSet <span class="title">ds1</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">  ds1.output_roots();</span><br><span class="line">  ds1.union_any(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  ds1.union_any(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">  ds1.output_roots();</span><br><span class="line">  <span class="keyword">int</span> r1 = ds1.find(<span class="number">1</span>), r2 = ds1.find(<span class="number">4</span>);</span><br><span class="line">  ds1.union_root(r1, r2);</span><br><span class="line">  ds1.output_roots();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"test 2:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="function">DisjointSet <span class="title">ds2</span><span class="params">(<span class="number">5</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">  ds2.output_roots();</span><br><span class="line">  ds2.union_any(<span class="number">-1</span>, <span class="number">3</span>);</span><br><span class="line">  ds2.union_any(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  ds2.output_roots();</span><br><span class="line">  <span class="keyword">int</span> r3 = ds2.find(<span class="number">1</span>), r4 = ds2.find(<span class="number">0</span>);</span><br><span class="line">  ds2.union_root(r4, r3);</span><br><span class="line">  ds2.output_roots();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;并查集模板。&lt;/p&gt;
&lt;h3 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h3&gt;&lt;p&gt;1、实现偏移（0、1开始甚至负数）。&lt;br&gt;2、路径压缩。&lt;br&gt;3、对任意两个点合并和对两个根合并。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="并查集" scheme="http://tashi711.top/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>「Prim算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/prim/"/>
    <id>http://tashi711.top/programming/dsaa/prim/</id>
    <published>2019-05-13T03:15:34.000Z</published>
    <updated>2019-05-06T15:43:37.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Prim算法解决最小生成树问题。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>本算法仅实现了最基本框架，可扩展以下几个方面：</p><p>1、返回构成最小生成树的边（或者其序号）。<br>2、用堆优化（类似于Dijkstra算法的堆优化思想），可将复杂度从O(N)降到O(M+NlogN)。<br>3、加入连通性判断（关系到是否有解）。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Prim</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> offset;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, T&gt;&gt;&gt; adj;</span><br><span class="line"></span><br><span class="line">  Prim(<span class="keyword">int</span> v, <span class="keyword">int</span> os = <span class="number">1</span>) : n(v), offset(os), adj(v) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">const</span> tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, T&gt;&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    T w;</span><br><span class="line">    tie(u, v, w) = e;</span><br><span class="line">    u -= offset;</span><br><span class="line">    v -= offset;</span><br><span class="line">    adj[u].emplace_back(v, w);</span><br><span class="line">    adj[v].emplace_back(u, w);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, T&gt;&gt;&amp; es)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : es) &#123;</span><br><span class="line">      add_edge(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">minimum_spanning_tree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;T&gt; d(n, numeric_limits&lt;T&gt;::max());</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vst(n, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cnt = <span class="number">1</span>; cnt &lt; n; ++cnt) &#123;</span><br><span class="line">      vst[u] = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : adj[u]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = p.first;</span><br><span class="line">        T w = p.second;</span><br><span class="line">        d[v] = min(d[v], w);</span><br><span class="line">      &#125;</span><br><span class="line">      T min_d = numeric_limits&lt;T&gt;::max();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vst[i] &amp;&amp; min_d &gt; d[i]) &#123;</span><br><span class="line">          min_d = d[i];</span><br><span class="line">          u = i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      res += d[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Prim&lt;<span class="keyword">double</span>&gt; p1(<span class="number">3</span>);</span><br><span class="line">  p1.init(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1.1</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1.05</span>&#125;,&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">1.15</span>&#125;&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; p1.minimum_spanning_tree() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  Prim&lt;<span class="keyword">int</span>&gt; p2(<span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">  p2.init(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>&#125;,&#123;<span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>&#125;,&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>&#125;,&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>&#125;&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; p2.minimum_spanning_tree() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Prim算法解决最小生成树问题。&lt;/p&gt;
&lt;h3 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;p&gt;本算法仅实现了最基本框架，可扩展以下几个方面：&lt;/p&gt;
&lt;p&gt;1、返回构成最小生成树的边（或者其序号）。&lt;br&gt;2、用堆优化（类似于Dijkstra算法的堆优化思想），可将复杂度从O(N)降到O(M+NlogN)。&lt;br&gt;3、加入连通性判断（关系到是否有解）。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Prim" scheme="http://tashi711.top/tags/Prim/"/>
    
      <category term="最小生成树" scheme="http://tashi711.top/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>「欧拉路径算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/eulerian-path/"/>
    <id>http://tashi711.top/programming/dsaa/eulerian-path/</id>
    <published>2019-05-12T03:15:34.000Z</published>
    <updated>2019-05-06T14:36:07.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>欧拉路径算法</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1、可处理重边、自环<br>2、若加入顺序合理，可控制输出顺序。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EulerianPath</span> &#123;</span></span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">res_t</span> = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> offset;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; adj;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; degree;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vst;</span><br><span class="line"></span><br><span class="line">  EulerianPath(<span class="keyword">int</span> v, <span class="keyword">int</span> os = <span class="number">1</span>) : n(v), offset(os), adj(v), degree(v) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cur = m++;</span><br><span class="line">    <span class="keyword">int</span> u = e.first - offset;</span><br><span class="line">    <span class="keyword">int</span> v = e.second - offset;</span><br><span class="line">    adj[u].emplace_back(v, cur);</span><br><span class="line">    adj[v].emplace_back(u, cur);</span><br><span class="line">    ++degree[u];</span><br><span class="line">    ++degree[v];</span><br><span class="line">    vst.push_back(<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&amp; es)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : es) &#123;</span><br><span class="line">      add_edge(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">res_t</span>* res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : adj[u]) &#123;</span><br><span class="line">      <span class="keyword">int</span> v = p.first, e = p.second;</span><br><span class="line">      <span class="keyword">if</span> (!vst[e]) &#123;</span><br><span class="line">        vst[e] = <span class="literal">true</span>;</span><br><span class="line">        dfs(v, res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res-&gt;push_back(u + offset);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">eulerian</span><span class="params">(<span class="keyword">res_t</span>* res)</span> </span>&#123;</span><br><span class="line">    res-&gt;clear();</span><br><span class="line">    <span class="keyword">int</span> cnt_odd_degree = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (degree[i] &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        ++cnt_odd_degree;</span><br><span class="line">        <span class="keyword">if</span> (cnt_odd_degree == <span class="number">1</span>) &#123;</span><br><span class="line">          start = i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt_odd_degree &gt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(start, res);</span><br><span class="line">    reverse(res-&gt;begin(), res-&gt;end());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">output_res</span><span class="params">(<span class="keyword">const</span> <span class="keyword">res_t</span>&amp; res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> k : res) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; k &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  EulerianPath::<span class="keyword">res_t</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="function">EulerianPath <span class="title">ep1</span><span class="params">(<span class="number">7</span>)</span></span>;</span><br><span class="line">  ep1.init(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>&#125;,&#123;<span class="number">3</span>, <span class="number">4</span>&#125;,&#123;<span class="number">4</span>, <span class="number">2</span>&#125;,&#123;<span class="number">4</span>, <span class="number">5</span>&#125;,&#123;<span class="number">2</span>, <span class="number">5</span>&#125;,&#123;<span class="number">5</span>, <span class="number">6</span>&#125;,&#123;<span class="number">5</span>, <span class="number">7</span>&#125;,&#123;<span class="number">4</span>, <span class="number">6</span>&#125;&#125;);</span><br><span class="line">  <span class="keyword">if</span> (ep1.eulerian(&amp;res)) &#123;</span><br><span class="line">    ep1.output_res(res);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">EulerianPath <span class="title">ep2</span><span class="params">(<span class="number">4</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">  ep2.init(&#123;&#123;<span class="number">1</span>, <span class="number">3</span>&#125;,&#123;<span class="number">2</span>, <span class="number">1</span>&#125;,&#123;<span class="number">3</span>, <span class="number">0</span>&#125;&#125;);</span><br><span class="line">  <span class="keyword">if</span> (ep2.eulerian(&amp;res)) &#123;</span><br><span class="line">    ep2.output_res(res);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">EulerianPath <span class="title">ep3</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">  ep3.init(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>&#125;,&#123;<span class="number">3</span>, <span class="number">4</span>&#125;,&#123;<span class="number">4</span>, <span class="number">1</span>&#125;,&#123;<span class="number">1</span>, <span class="number">3</span>&#125;,&#123;<span class="number">2</span>, <span class="number">4</span>&#125;&#125;);</span><br><span class="line">  <span class="keyword">if</span> (ep3.eulerian(&amp;res)) &#123;</span><br><span class="line">    ep3.output_res(res);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;欧拉路径算法&lt;/p&gt;
&lt;h3 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;p&gt;1、可处理重边、自环&lt;br&gt;2、若加入顺序合理，可控制输出顺序。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="欧拉路径" scheme="http://tashi711.top/tags/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/"/>
    
      <category term="图论" scheme="http://tashi711.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>「组合数学相关算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/combinatorial_math/"/>
    <id>http://tashi711.top/programming/dsaa/combinatorial_math/</id>
    <published>2019-05-11T03:15:34.000Z</published>
    <updated>2019-05-04T17:49:22.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>组合数学相关算法</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>1、组合<br>2、排列<br>3、集合拆分<br>4、正整数拆分</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CombinatorialMath</span> &#123;</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> T <span class="title">combination</span><span class="params">(T n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    k = min(k, n - k);</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n, j = <span class="number">1</span>; j &lt;= k; --i, ++j) &#123;</span><br><span class="line">      res = res * i / j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> T <span class="title">permutation</span><span class="params">(T n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; n - k; --i) &#123;</span><br><span class="line">      res *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> T <span class="title">divide_set</span><span class="params">(T n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == k || k == <span class="number">1</span> || (n == <span class="number">0</span> &amp;&amp; k == <span class="number">0</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; k || n == <span class="number">0</span> || k == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> divide_set(n - <span class="number">1</span>, k - <span class="number">1</span>) + k * divide_set(n - <span class="number">1</span>, k);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> T <span class="title">divide_integer</span><span class="params">(T n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; k || k == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span> || k == n - <span class="number">1</span> || n == k) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> n / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> divide_integer(n - <span class="number">1</span>, k - <span class="number">1</span>) + divide_integer(n - k, k);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"test combination:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::combination(<span class="number">4</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::combination(<span class="number">4</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::combination(<span class="number">4</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::combination(<span class="number">4</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::combination(<span class="number">4</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"test permutation:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::permutation(<span class="number">4</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::permutation(<span class="number">4</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::permutation(<span class="number">4</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::permutation(<span class="number">4</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::permutation(<span class="number">4</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"test divide_set:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_set(<span class="number">4</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_set(<span class="number">4</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_set(<span class="number">4</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_set(<span class="number">4</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_set(<span class="number">4</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"test divide_integer:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_integer(<span class="number">4</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_integer(<span class="number">4</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_integer(<span class="number">4</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_integer(<span class="number">4</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_integer(<span class="number">4</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;组合数学相关算法&lt;/p&gt;
&lt;h3 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h3&gt;&lt;p&gt;1、组合&lt;br&gt;2、排列&lt;br&gt;3、集合拆分&lt;br&gt;4、正整数拆分&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="组合数学" scheme="http://tashi711.top/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>「快速幂算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/quick-power/"/>
    <id>http://tashi711.top/programming/dsaa/quick-power/</id>
    <published>2019-05-10T03:15:34.000Z</published>
    <updated>2019-05-04T08:52:51.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>简单的快速幂，注意溢出（long long乘long long之类的）可能要用高精。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QuickPower</span> &#123;</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> P&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> T <span class="title">power</span><span class="params">(T a, P n)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    T t = a;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">      <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        res *= t;</span><br><span class="line">      &#125;</span><br><span class="line">      t *= t;</span><br><span class="line">      n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> P&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> T <span class="title">power_mod</span><span class="params">(T a, P n, T m)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    T t = a;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">      <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        res = res * t % m;</span><br><span class="line">      &#125;</span><br><span class="line">      t = t * t % m;</span><br><span class="line">      n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; QuickPower::power(<span class="number">2</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; QuickPower::power(<span class="number">5</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; QuickPower::power_mod(<span class="number">3</span>, <span class="number">3</span>, <span class="number">8</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; QuickPower::power_mod(<span class="number">123456789L</span>L, <span class="number">1234567890123456789L</span>L,</span><br><span class="line">    <span class="number">987654321L</span>L) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; QuickPower::power(<span class="number">2</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; QuickPower::power_mod(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10000</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;简单的快速幂，注意溢出（long long乘long long之类的）可能要用高精。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="快速幂" scheme="http://tashi711.top/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>「矩阵运算相关」模板</title>
    <link href="http://tashi711.top/programming/dsaa/matrix/"/>
    <id>http://tashi711.top/programming/dsaa/matrix/</id>
    <published>2019-05-09T03:15:34.000Z</published>
    <updated>2019-05-04T06:59:12.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>矩阵运算相关模板，持续更新ing…</p><h3 id="目前功能"><a href="#目前功能" class="headerlink" title="目前功能"></a>目前功能</h3><p>局部：<br>1、根据vector的vector构造并判断合理性<br>2、乘法</p><p>全局：<br>1、输出流</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;T&gt;&gt; a;</span><br><span class="line"></span><br><span class="line">  Matrix(<span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> w = <span class="number">0</span>) : n(l), m(w), a(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m, <span class="number">0</span>)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  Matrix(<span class="keyword">int</span> l, <span class="keyword">int</span> w, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;T&gt;&gt;&amp;&amp; vec) : n(l), m(w) &#123;</span><br><span class="line">    <span class="keyword">int</span> u = vec.size();</span><br><span class="line">    <span class="keyword">if</span> (u == n) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; row : vec) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = row.size();</span><br><span class="line">        <span class="keyword">if</span> (v != m) &#123;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; <span class="string">"Matrix(): assign row of "</span> &lt;&lt; v &lt;&lt; <span class="string">" to "</span> &lt;&lt; m &lt;&lt; <span class="string">"."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">          n = <span class="number">0</span>;</span><br><span class="line">          m = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"Matrix(): assign "</span> &lt;&lt; u &lt;&lt; <span class="string">" * ? to "</span> &lt;&lt; n &lt;&lt; <span class="string">" * ?."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      n = <span class="number">0</span>;</span><br><span class="line">      m = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a = vec;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> Matrix&amp; r) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (m != r.n) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; n &lt;&lt; <span class="string">", "</span> &lt;&lt; m &lt;&lt; <span class="string">") * ("</span> &lt;&lt; r.n &lt;&lt; <span class="string">", "</span> &lt;&lt; r.m &lt;&lt; <span class="string">")"</span></span><br><span class="line">        &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> Matrix();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Matrix <span class="title">res</span><span class="params">(n, r.m)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; r.m; ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; ++k) &#123;</span><br><span class="line">          res.a[i][j] += a[i][k] * r.a[k][j];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">to_str</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss &lt;&lt; n &lt;&lt; <span class="string">" * "</span> &lt;&lt; m &lt;&lt; <span class="string">":\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">        ss &lt;&lt; a[i][j] &lt;&lt; (j == m - <span class="number">1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ss.str();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> Matrix&lt;T&gt;&amp; r) &#123;</span><br><span class="line">  out &lt;&lt; r.to_str();</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Matrix&lt;<span class="keyword">int</span>&gt; a(<span class="number">1</span>, <span class="number">2</span>, &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;&#125;), b(<span class="number">2</span>, <span class="number">1</span>, &#123;&#123;<span class="number">3</span>&#125;,&#123;<span class="number">4</span>&#125;&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; a * b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b * a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  Matrix&lt;<span class="keyword">int</span>&gt; w1(<span class="number">2</span>, <span class="number">2</span>, &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; w1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  Matrix&lt;<span class="keyword">int</span>&gt; w2(<span class="number">1</span>, <span class="number">1</span>, &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; w2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  Matrix&lt;<span class="keyword">int</span>&gt; c(<span class="number">1</span>, <span class="number">2</span>, &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;&#125;);</span><br><span class="line">  Matrix&lt;<span class="keyword">int</span>&gt; d(<span class="number">3</span>, <span class="number">1</span>, &#123;&#123;<span class="number">3</span>&#125;,&#123;<span class="number">4</span>&#125;,&#123;<span class="number">5</span>&#125;&#125;);</span><br><span class="line">  Matrix&lt;<span class="keyword">int</span>&gt; w3 = c * d;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; w3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;矩阵运算相关模板，持续更新ing…&lt;/p&gt;
&lt;h3 id=&quot;目前功能&quot;&gt;&lt;a href=&quot;#目前功能&quot; class=&quot;headerlink&quot; title=&quot;目前功能&quot;&gt;&lt;/a&gt;目前功能&lt;/h3&gt;&lt;p&gt;局部：&lt;br&gt;1、根据vector的vector构造并判断合理性&lt;br&gt;2、乘法&lt;/p&gt;
&lt;p&gt;全局：&lt;br&gt;1、输出流&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="矩阵运算" scheme="http://tashi711.top/tags/%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>「ZOJ 3933 - Team Formation」解题报告</title>
    <link href="http://tashi711.top/programming/reports/others/zoj-3933/"/>
    <id>http://tashi711.top/programming/reports/others/zoj-3933/</id>
    <published>2019-05-08T16:11:04.000Z</published>
    <updated>2019-05-03T16:54:13.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=5542" target="_blank" rel="noopener">ZOJ 3933 - Team Formation</a></li><li>来源：The 16th Zhejiang University Programming Contest</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>其实应该算是一道比较裸的费用流问题，当时在线赛的时候用费用流A掉了，这里用带权二分图匹配来做。<br>为了保证最大匹配，每个匹配的分数要高过性别带来的最大影响，这里设为1w。然后每个匹配外加女生数量的分数。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度均为$O(N^3)$。<br>空间复杂度均为$O(N^2)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WeightedBGMatching</span> &#123;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> kUnmatched = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  <span class="keyword">bool</span> reversed;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;T&gt;&gt; adj;</span><br><span class="line">  <span class="keyword">int</span> offset_x, offset_y;</span><br><span class="line">  <span class="built_in">vector</span>&lt;T&gt; lx, ly;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; match_x, match_y;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vst_x, vst_y;</span><br><span class="line">  T slack;</span><br><span class="line"></span><br><span class="line">  WeightedBGMatching(<span class="keyword">int</span> num_x, <span class="keyword">int</span> num_y, <span class="keyword">int</span> osx = <span class="number">1</span>, <span class="keyword">int</span> osy = <span class="number">1</span>)</span><br><span class="line">    : offset_x(osx), offset_y(osy) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num_x &lt;= num_y) &#123;</span><br><span class="line">      reversed = <span class="literal">false</span>;</span><br><span class="line">      n = num_x;</span><br><span class="line">      m = num_y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reversed = <span class="literal">true</span>;</span><br><span class="line">      n = num_y;</span><br><span class="line">      m = num_x;</span><br><span class="line">    &#125;</span><br><span class="line">    adj.assign(n, <span class="built_in">vector</span>&lt;T&gt;(m, <span class="number">0</span>));</span><br><span class="line">    lx.assign(n, numeric_limits&lt;T&gt;::lowest());</span><br><span class="line">    ly.assign(m, <span class="number">0</span>);</span><br><span class="line">    match_x.assign(n, kUnmatched);</span><br><span class="line">    match_y.assign(m, kUnmatched);</span><br><span class="line">    vst_x.resize(n);</span><br><span class="line">    vst_y.resize(m);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">const</span> tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, T&gt;&amp; t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    T w;</span><br><span class="line">    tie(u, v, w) = t;</span><br><span class="line">    u -= offset_x;</span><br><span class="line">    v -= offset_y;</span><br><span class="line">    <span class="keyword">if</span> (reversed) &#123;</span><br><span class="line">      swap(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    adj[u][v] = w;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, T&gt;&gt;&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; t : e) &#123;</span><br><span class="line">      add_edge(t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    vst_x[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; m; ++v) &#123;</span><br><span class="line">      <span class="keyword">if</span> (vst_y[v]) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      T gap = lx[u] + ly[v] - adj[u][v];</span><br><span class="line">      <span class="keyword">if</span> (gap == <span class="number">0</span>) &#123;</span><br><span class="line">        vst_y[v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (match_y[v] == kUnmatched || dfs(match_y[v])) &#123;</span><br><span class="line">          match_x[u] = v;</span><br><span class="line">          match_y[v] = u;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        slack = min(slack, gap);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">km</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;* res)</span> </span>&#123;</span><br><span class="line">    res-&gt;clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      lx[i] = numeric_limits&lt;T&gt;::lowest();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">        lx[i] = max(lx[i], adj[i][j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        vst_x.assign(n, <span class="literal">false</span>);</span><br><span class="line">        vst_y.assign(m, <span class="literal">false</span>);</span><br><span class="line">        slack = numeric_limits&lt;T&gt;::max();</span><br><span class="line">        <span class="keyword">if</span> (dfs(i)) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (slack &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible: "</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; slack &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">          <span class="keyword">if</span> (vst_x[j]) &#123;</span><br><span class="line">            lx[j] -= slack;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; ++j) &#123;</span><br><span class="line">          <span class="keyword">if</span> (vst_y[j]) &#123;</span><br><span class="line">            ly[j] += slack;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    T ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      ans += adj[i][match_x[i]];</span><br><span class="line">      <span class="keyword">int</span> u = i, v = match_x[i];</span><br><span class="line">      <span class="keyword">if</span> (reversed) &#123;</span><br><span class="line">        swap(u, v);</span><br><span class="line">      &#125;</span><br><span class="line">      res-&gt;emplace_back(u + offset_x, v + offset_y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">output_matching</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&amp; res)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Total "</span> &lt;&lt; res.size() &lt;&lt; <span class="string">" matching(s):"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : res) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; p.first &lt;&lt; <span class="string">", "</span> &lt;&lt; p.second &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">string</span> s1, s2;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; nw(n, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g1, g2;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> m, u, i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;u);</span><br><span class="line">      nw[i][u - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s1[i] == <span class="string">'0'</span>) &#123;</span><br><span class="line">      g1.push_back(i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      g2.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s2[i] == <span class="string">'0'</span>) &#123;</span><br><span class="line">      s[i] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      s[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> n1 = g1.size(), n2 = g2.size();</span><br><span class="line">  WeightedBGMatching&lt;<span class="keyword">int</span>&gt; wbgm(n1, n2, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">int</span> score = <span class="number">10000</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1; ++i) &#123;</span><br><span class="line">    <span class="keyword">int</span> u = g1[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n2; ++j) &#123;</span><br><span class="line">      <span class="keyword">int</span> v = g2[j];</span><br><span class="line">      <span class="keyword">if</span> (!nw[u][v]) &#123;</span><br><span class="line">        wbgm.add_edge(make_tuple(i, j, score + s[u] + s[v]));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">  <span class="keyword">int</span> total = wbgm.km(&amp;res);</span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : res) &#123;</span><br><span class="line">    <span class="keyword">int</span> u = g1[p.first], v = g2[p.second];</span><br><span class="line">    <span class="keyword">if</span> (!nw[u][v]) &#123;</span><br><span class="line">      ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="string">' '</span> &lt;&lt; total % score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : res) &#123;</span><br><span class="line">    <span class="keyword">int</span> u = g1[p.first], v = g2[p.second];</span><br><span class="line">    <span class="keyword">if</span> (!nw[u][v]) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, u + <span class="number">1</span>, v + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> t;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">  <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">    solve();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=5542&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ZOJ 3933 - Team Formation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：The 16th Zhejiang University Programming Contest&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;其实应该算是一道比较裸的费用流问题，当时在线赛的时候用费用流A掉了，这里用带权二分图匹配来做。&lt;br&gt;为了保证最大匹配，每个匹配的分数要高过性别带来的最大影响，这里设为1w。然后每个匹配外加女生数量的分数。&lt;/p&gt;
&lt;h3 id=&quot;复杂度分析&quot;&gt;&lt;a href=&quot;#复杂度分析&quot; class=&quot;headerlink&quot; title=&quot;复杂度分析&quot;&gt;&lt;/a&gt;复杂度分析&lt;/h3&gt;&lt;p&gt;时间复杂度均为$O(N^3)$。&lt;br&gt;空间复杂度均为$O(N^2)$。&lt;/p&gt;
&lt;h2 id=&quot;AC代码（C-）&quot;&gt;&lt;a href=&quot;#AC代码（C-）&quot; class=&quot;headerlink&quot; title=&quot;AC代码（C++）&quot;&gt;&lt;/a&gt;AC代码（C++）&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="其他" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="二分图匹配" scheme="http://tashi711.top/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    
      <category term="KM算法" scheme="http://tashi711.top/tags/KM%E7%AE%97%E6%B3%95/"/>
    
      <category term="费用流" scheme="http://tashi711.top/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
</feed>
