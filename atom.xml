<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tashi711的博客</title>
  
  <subtitle>過去（きのう）に傷付きながらも、信じ続ける理想（ゆめ）を求める。いつか無限（なないろ）に輝き放って、青空（そら）に橋を描く。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tashi711.xyz/"/>
  <updated>2018-04-04T17:58:26.638Z</updated>
  <id>http://tashi711.xyz/</id>
  
  <author>
    <name>Tashi711</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「MICHI - Cry for the Truth」鑑賞</title>
    <link href="http://tashi711.xyz/nihongo/uta/cry-for-the-truth/"/>
    <id>http://tashi711.xyz/nihongo/uta/cry-for-the-truth/</id>
    <published>2018-04-04T16:15:55.000Z</published>
    <updated>2018-04-04T17:58:26.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="歌曲信息"><a href="#歌曲信息" class="headerlink" title="歌曲信息"></a>歌曲信息</h2><blockquote><ul><li>歌曲：Cry for the Truth</li><li>歌手：MICHI</li><li>作词：RUCCA</li><li>作曲：藤田淳平（Elements Garden）</li><li>专辑：Cry for the Truth/Secret Sky（2015年7月22日发行）</li><li>其他：六花的勇者（六花の勇者）OP</li></ul></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>当年在音悦Tai看MV时不经意间瞄到这首歌，意外的caught my heart。<br>这首歌算是MICHI这位冷门歌手最知名的歌了，大概因为是「六花的勇者」的OP吧。<br>不过这部冷门的动漫也没有看过，据说是一部根据轻小说改编的推理番。<br>很少有这么一首动漫主题曲不是因为其动漫或者歌手本身而具有这么强大的吸引力。<br>歌里面将「哀歌」唱成「エレジー」，将「理想郷」唱成「ユートピア」也是非常的有feeling。</p><a id="more"></a><h2 id="假名歌词"><a href="#假名歌词" class="headerlink" title="假名歌词"></a>假名歌词</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">衝動（しょうどう）から　幕開（まくあ）ける運命（うんめい）たち</span><br><span class="line">待（ま）つのは　希望（きぼう）か　絶望（ぜつぼう）か</span><br><span class="line">紅（あか）く錆（さ）びた　時世（ときよ）の歯車（はぐるま）が今（いま）</span><br><span class="line">軋（きし）んで　嘲笑（あざわら）う</span><br><span class="line"></span><br><span class="line">静寂（せいじゃく）を掻（か）き消（け）す慟哭（どうこく）</span><br><span class="line">この胸（むね）を引（ひ）き裂（さ）く哀歌（エレジー）</span><br><span class="line">身体中（からだじゅう）　暴（あば）れ出（だ）す</span><br><span class="line">血潮（ちしお）が叫（さけ）ぶ想（おも）いは　「君（きみ）よ、止（と）まるな」</span><br><span class="line"></span><br><span class="line">立（た）ち向（む）かえ　幾千（いくせん）芽吹（めぶ）くその困難（こんなん）に</span><br><span class="line">白（しろ）か　黒（くろ）か　暴（あば）くその宿命（しゅくめい）に</span><br><span class="line">生（い）きとし　生（い）けるものすべて</span><br><span class="line">心臓（しんぞう）を叩（たた）く理由（わけ）がある　そして　Cry for the truth</span><br><span class="line"></span><br><span class="line">「何故（なぜ）こんなに　心（こころ）は傷付（きずつ）いてるの？」</span><br><span class="line">記憶（きおく）に　響（ひび）いた　幼（おさな）い声（こえ）</span><br><span class="line">白（しろ）い闇（やみ）に　ぼんやりと浮（う）かび上（あ）がる</span><br><span class="line">誓（ちか）いと　理想郷（ユートピア）</span><br><span class="line"></span><br><span class="line">水泡（あわ）のように消（き）えてく望郷（ぼうきょう）</span><br><span class="line">揺（ゆ）れ惑（まど）う存在証明（そんざいしょうめい）</span><br><span class="line">憂（うれ）いさえ　引（ひ）き連（つ）れて</span><br><span class="line">戦（たたか）うその眼差（まなざ）しで　明日（あす）を　貫（つらぬ）け</span><br><span class="line"></span><br><span class="line">掴（つか）み取（と）れ　生命（いのち）果（は）てるまで何度（なんど）でも</span><br><span class="line">熱（あつ）き　願（ねが）い　それぞれの空（そら）の下（した）</span><br><span class="line">宵空（よいぞら）を　隠（かく）す銀（ぎん）の雨（あめ）</span><br><span class="line">拭（ぬぐ）い去（さ）ってまた駆（か）け抜（ぬ）けろ　きっと　Life is a fate</span><br><span class="line"></span><br><span class="line">仕組（しく）まれたラビリンスで　三日月（みかづき）胸（むね）を刺（さ）す</span><br><span class="line">「君（きみ）は誰（だれ）？」　「私（わたし）は誰（だれ）？」　リフレインする</span><br><span class="line">信（しん）じあうただその為（ため）に　誰（だれ）も皆（みんな）産（う）まれた</span><br><span class="line">花（はな）も　鳥（とり）も　風（かぜ）も　月（つき）さえ　この夜（よる）</span><br><span class="line"></span><br><span class="line">立（た）ち向（む）かえ　幾千（いくせん）芽吹（めぶ）くその困難（こんなん）に</span><br><span class="line">白（しろ）か　黒（くろ）か　暴（あば）くその宿命（しゅくめい）に</span><br><span class="line">生（い）きとし　生（い）けるものすべて</span><br><span class="line">心臓（しんぞう）を叩（たた）く理由（わけ）がある　そして　Cry for the truth</span><br></pre></td></tr></table></figure><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>希望通过这个系列记录一些曾经听过的非常好听但是比较冷门的日语歌。<br>同时利用Word的拼音指南功能，将歌词用假名注音校对后用于学唱。<br>MICHI还有一首更加冷门却非常好听的歌叫「Journey」，有机会做一篇这首歌的鉴赏。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;歌曲信息&quot;&gt;&lt;a href=&quot;#歌曲信息&quot; class=&quot;headerlink&quot; title=&quot;歌曲信息&quot;&gt;&lt;/a&gt;歌曲信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;歌曲：Cry for the Truth&lt;/li&gt;
&lt;li&gt;歌手：MICHI&lt;/li&gt;
&lt;li&gt;作词：RUCCA&lt;/li&gt;
&lt;li&gt;作曲：藤田淳平（Elements Garden）&lt;/li&gt;
&lt;li&gt;专辑：Cry for the Truth/Secret Sky（2015年7月22日发行）&lt;/li&gt;
&lt;li&gt;其他：六花的勇者（六花の勇者）OP&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;当年在音悦Tai看MV时不经意间瞄到这首歌，意外的caught my heart。&lt;br&gt;这首歌算是MICHI这位冷门歌手最知名的歌了，大概因为是「六花的勇者」的OP吧。&lt;br&gt;不过这部冷门的动漫也没有看过，据说是一部根据轻小说改编的推理番。&lt;br&gt;很少有这么一首动漫主题曲不是因为其动漫或者歌手本身而具有这么强大的吸引力。&lt;br&gt;歌里面将「哀歌」唱成「エレジー」，将「理想郷」唱成「ユートピア」也是非常的有feeling。&lt;/p&gt;
    
    </summary>
    
      <category term="nihongo" scheme="http://tashi711.xyz/categories/nihongo/"/>
    
      <category term="uta" scheme="http://tashi711.xyz/categories/nihongo/uta/"/>
    
    
      <category term="MICHI" scheme="http://tashi711.xyz/tags/MICHI/"/>
    
      <category term="六花の勇者" scheme="http://tashi711.xyz/tags/%E5%85%AD%E8%8A%B1%E3%81%AE%E5%8B%87%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>「Codeforces 955 - C. Sad powers」解题报告</title>
    <link href="http://tashi711.xyz/programming/codeforces/codeforces-955-C/"/>
    <id>http://tashi711.xyz/programming/codeforces/codeforces-955-C/</id>
    <published>2018-04-02T16:11:04.000Z</published>
    <updated>2018-04-04T13:11:11.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="http://codeforces.com/problemset/problem/955/C" target="_blank" rel="noopener">Codeforces 955 - C. Sad powers</a></li><li>来源：Codeforces</li><li>场次：<a href="http://codeforces.com/contest/955" target="_blank" rel="noopener">Round #471 (Div. 2) - C</a></li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定 $Q$ $(1≤Q≤10^5)$ 组询问 $(L,R)$ $(1≤L≤R≤10^{18})$。<br>对每组询问回答有多少个 $x$ $(L≤x≤R)$ 满足存在 $a&gt;0,$ $p&gt;1$ 使得 $x=a^p$。<br>比如样例询问 $(1,4)$，结果为 $2$ $(1=1^2,$ $4=2^2)$。<br>时间限制：2s。<br>空间限制：256M。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先看到是个多组独立的区间询问问题，第一反应是看看能不能做预处理+离线询问。<br>然而看到数据范围已经达到了long long的量级，就还是只能考虑在线算法。<br>于是这就要求用非常高效的做法解决每一次询问，初步的想法是可以枚举a或者p。<br>a可能的范围从1到 $\sqrt{10^{18}}=10^9$，而p可能的范围从2到 $\log_2 10^{18} \approx 60$。<br>当然a为1的时候p理论上可以达到无穷大，但这种情况只可能在判断x为1的时候，也就是L必须为1。<br>因此只需要在L为1的时候特判一下，x为1显然满足，除此之外的情况下p不可能超过60。<br>那么显然枚举p比枚举a更可行，对每个枚举的p来说：<br>最小满足的a为 $a_\min = \lceil \sqrt[p]{L} \rceil$，最大满足的a为 $a_\max = \lfloor \sqrt[p]{R} \rfloor$。<br>$a_\min$ 与 $a_\max$ 中间包含的a一定都满足要求，只需注意一点：<br>L、R靠的太近时可能出现 $a_\min&gt;a_\max$，那么对这个p来说就没有a满足要求。<br>此时考虑重复统计的问题，首先能想到的是只需要枚举质数p就好。<br>因为满足要求的x如果在某个合数p中能统计到，那么在p的质因数上也能统计到。<br>但此时还有一个问题，如果某个满足要求的x是某个a的合数p次方，这个p有大于等于2个质因数。<br>那么这个x还是会在枚举p的这几个质因数时分别统计到，比如 $64=8^2=4^3$。<br>因此还需要对60以内的质数做一下容斥，因为范围比较小，最多算到第三重。<br>稍微笔算一下就能把需要考虑减去的两两相乘与需要再加上的3个质因数相乘的结果预处理好。<br>这个问题理论上也就完美解决啦。</p><h3 id="注意细节"><a href="#注意细节" class="headerlink" title="注意细节"></a>注意细节</h3><p>求 $a_\min$ 与 $a_\max$ 时需要求p次方根，能想到的方法是利用cmath库的pow函数求$1 \over p$次方。<br>但是pow的精度非常有限，在处理long long级别的数值时候会出现精度问题。<br>此时有两个解决方法，一是用二分的方法找到精确的整数解：<br>对每个枚举的p，这种方法的时间复杂度为二分复杂度×求幂复杂度。<br>假设数值范围（L、R的范围）为M（即 $1≤M≤10^{18}$），并且考虑使用快速幂。<br>则每次询问p的时间复杂度为 $O(\log M \cdot \log \log M)$。尝试此方法后发现TLE了。<br>第二种方法是依旧使用pow，但是需要手动矫正因精度误差带来的问题。<br>据<strong>不负责任的</strong>尝试，发现在这道题目的数据范围约束下pow结果的误差在±1以内。<br>于是就有了以下的做法（当然实际中是通过以下的做法发现了其误差范围）：<br>算出pow的结果按指定方向取整得到的a备选值res后，计算res-1与res+1作为返回的a是否满足要求。<br>最终返回调整之后相应的a，计算是否满足要求的时候也考虑使用快速幂。<br>此时每次询问p的时间复杂度为 $O(\log M + \log \log M)$。<br>虽然后者项已经算是前者项的低阶项了，不过这道题目确实很卡时间，还是将所有影响时间的因素都考虑进去。<br>显然这样做会比之前第一种方法快，也在2s的时限内用1s+惊险的AC了。<br>此外，计算快速幂时可能会溢出，因为范围已经是long long级别的了，只能通过符号的变换来判断是否溢出。<br>如果每次倍增的辅助数或者中间结果中的任一个算出来小于等于0就说明已经溢出了。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>假设数值范围为M，上面分析了每次询问p的时间复杂度，p的枚举量是 $\log M$ 的。<br>因此总的时间复杂度为：$O(N(\log M + \log \log M)\log M) \Rightarrow O(N \log^2 M)$。<br>空间复杂度为：$O(\log M)$。<br>其实理论上空间复杂度只需 $O(1)$，这里考虑了存放通过容斥原理预处理的需要枚举的p值。</p><h2 id="AC代码（Microsoft-Visual-C-2010）"><a href="#AC代码（Microsoft-Visual-C-2010）" class="headerlink" title="AC代码（Microsoft Visual C++ 2010）"></a>AC代码（Microsoft Visual C++ 2010）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_P = <span class="number">19</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_M = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> MAXLL = <span class="number">0x7FFFFFFFFFFFFFFF</span>LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> plus_p[N_P] = &#123;</span><br><span class="line"><span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>,</span><br><span class="line"><span class="number">30</span>, <span class="number">42</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> minus_p[N_M] = &#123;</span><br><span class="line"><span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">22</span>, <span class="number">26</span>, <span class="number">34</span>, <span class="number">38</span>, <span class="number">46</span>, <span class="number">58</span>,</span><br><span class="line"><span class="number">15</span>, <span class="number">21</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">51</span>, <span class="number">57</span>,</span><br><span class="line"><span class="number">35</span>, <span class="number">55</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">my_pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>, h = a;</span><br><span class="line"><span class="keyword">while</span> (k) &#123;</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span>) &#123;</span><br><span class="line">res *= h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (h &lt;= <span class="number">0</span> || res &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> MAXLL;</span><br><span class="line">&#125;</span><br><span class="line">h *= h;</span><br><span class="line">k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">find_left</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = (<span class="keyword">long</span> <span class="keyword">long</span>)<span class="built_in">ceil</span>(<span class="built_in">pow</span>(l, <span class="number">1.0</span> / k)) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (my_pow(res - <span class="number">1</span>, k) &gt;= l) &#123;</span><br><span class="line">res--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">find_right</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = (<span class="keyword">long</span> <span class="keyword">long</span>)<span class="built_in">floor</span>(<span class="built_in">pow</span>(r, <span class="number">1.0</span> / k)) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (my_pow(res + <span class="number">1</span>, k) &lt;= r) &#123;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l == <span class="number">1</span>) &#123;</span><br><span class="line">ans++;</span><br><span class="line">l++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N_P; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> p = plus_p[i];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> min_a = find_left(l, p);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> max_a = find_right(r, p);</span><br><span class="line"><span class="keyword">if</span> (min_a &lt;= max_a) &#123;</span><br><span class="line">ans += max_a - min_a + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "+: " &lt;&lt; p &lt;&lt; ' ' &lt;&lt; min_a &lt;&lt; ' ' &lt;&lt; max_a &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N_M; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> p = minus_p[i];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> min_a = find_left(l, p);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> max_a = find_right(r, p);</span><br><span class="line"><span class="keyword">if</span> (min_a &lt;= max_a) &#123;</span><br><span class="line">ans -= max_a - min_a + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "-: " &lt;&lt; p &lt;&lt; ' ' &lt;&lt; min_a &lt;&lt; ' ' &lt;&lt; max_a &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> l, r;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>, &amp;l, &amp;r);</span><br><span class="line">calc(l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解题心得"><a href="#解题心得" class="headerlink" title="解题心得"></a>解题心得</h2><p>在比赛之外做的，花了很久时间才做到AC，如果是比赛当场做估计是做不出来的。<br>这道题难度不是很大，但是会造成WA的细节非常多。<br>如果放宽时间的限制，笔者认为用二分寻找 $a_\min$ 与 $a_\max$ 才是这道题最优雅的解法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;http://codeforces.com/problemset/problem/955/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 955 - C. Sad powers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：Codeforces&lt;/li&gt;
&lt;li&gt;场次：&lt;a href=&quot;http://codeforces.com/contest/955&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Round #471 (Div. 2) - C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;给定 $Q$ $(1≤Q≤10^5)$ 组询问 $(L,R)$ $(1≤L≤R≤10^{18})$。&lt;br&gt;对每组询问回答有多少个 $x$ $(L≤x≤R)$ 满足存在 $a&amp;gt;0,$ $p&amp;gt;1$ 使得 $x=a^p$。&lt;br&gt;比如样例询问 $(1,4)$，结果为 $2$ $(1=1^2,$ $4=2^2)$。&lt;br&gt;时间限制：2s。&lt;br&gt;空间限制：256M。&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://tashi711.xyz/categories/programming/"/>
    
      <category term="codeforces" scheme="http://tashi711.xyz/categories/programming/codeforces/"/>
    
    
      <category term="快速幂" scheme="http://tashi711.xyz/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
      <category term="容斥原理" scheme="http://tashi711.xyz/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 805. Split Array With Same Average」解题报告</title>
    <link href="http://tashi711.xyz/programming/leetcode/leetcode-805/"/>
    <id>http://tashi711.xyz/programming/leetcode/leetcode-805/</id>
    <published>2018-04-01T16:25:42.000Z</published>
    <updated>2018-04-04T12:40:21.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/split-array-with-same-average/description/" target="_blank" rel="noopener">LeetCode 805. Split Array With Same Average</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定N个整数，判断是否能分成均值相同的两堆（非空），N范围为1到30，数值范围为0到10000。<br>比如样例 [1,2,3,4,5,6,7,8] 可以分成 [1,4,5,8] 和 [2,3,6,7] 两组，均值为4.5。</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>初看题目直觉是NP的，看完数据范围更加确定了这一点，暴搜复杂度 $2^{30}$，不好剪枝，显然会TLE。<br>首先N=1时一定返回false，因为无论怎么分总有一堆为空，于是只需考虑N≥2。<br>先将这组数字分成数量相同的两堆，N为奇数时任意一堆多放一个即可。<br>暴搜出两堆各自能产生的所有组合的均值，复杂度为 $2^{15}$。<br>如果存在一个合理的分法满足题目要求，那么最终结果的两堆数字的均值应该都等于整组数据的均值。<br>此时要么在某一堆里能计算出这个均值，要么从两堆里各取一组加权平均后等于这个均值。<br>如果尝试两两组合算出所有的可能性，那么复杂度依旧为 $(2^{15})^2=2^{30}$。<br>有一个直观的想法是，两个堆算出的均值结果进行排序。<br>用两个指针分别指向一个堆均值的最小值（小堆），以及另一个堆均值的最大值（大堆）。<br>若当前指针指向的两组数加权平均比总体均值要大，那么将大堆指针往小的方向移，否则将小堆指针往大的方向移。<br>这样就只需要线性的复杂度扫描了，但这样做的前提是指针移走后的值不会继续用到了。<br>实际实现这个算法提交后发现WA了，分析一波错的数据，发现这个做法会出现问题的原因在于，可能出现这种情况：<br>例如小堆中目前指向的那组数个数非常多，而大堆中目前以及往小方向的连续几组数个数都比较少。<br>在此时算出的加权均值小于总体均值，由于小堆的一方数量上的优势会使大堆的指针往小方向连续移好几个。<br>若此时算出的加权均值又大于了总体均值，且小堆中往大方向连续几组数个数都更少，<br>那么小堆的指针又会往大的方向移很多个，那么可能在两次连续移动的中间分别存在一组数能凑成最终的答案。<br>一个解决这个问题的方法是，一开始将数据都去均值化。<br>如果存在一个合理的分法，那么最终结果的两堆数字的均值应该都等于0，等价于和为0。<br>如果将均值考虑成求和，那么上面说到的问题就不存在了，因为数量只对加权平均有影响，而对求和没有影响。<br>可以简单的证明，一旦指针移走，前面的值就不会再考虑到了。<br>因此上面的算法，将所有求平均的地方换成求和，这个问题就可以圆满解决了。</p><h3 id="注意细节"><a href="#注意细节" class="headerlink" title="注意细节"></a>注意细节</h3><ol><li>虽然浮点数在乘除法上的迭代不多，但是还是要用相差在一定精度范围来判断两个浮点数是否相等。</li><li>在考虑从两堆和里面各取一部分时，可能出现在两堆中都取了全部的数字，此时形成的另一堆会是空集。<br>要解决这个问题还是要记录组成当前和的元素个数，若求和的两组数的数量之和等于N了就跳过。</li></ol><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>考虑排序在内，时间复杂度为：$O(2^{N/2}\log 2^{N/2})=O(\frac{N}{2}\cdot2^{N/2})$。<br>N为数组长度，在N≤30时是可以接受的。<br>空间复杂度为：$O(2^{N/2})$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> a[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">splitArraySameAverage</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">n = (<span class="keyword">int</span>)A.size();</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">res += A[i];</span><br><span class="line">&#125;</span><br><span class="line">res /= n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">a[i] = A[i - <span class="number">1</span>] - res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> work();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> sum;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line">node(<span class="keyword">double</span> _sum = <span class="number">0</span>, <span class="keyword">int</span> _cnt = <span class="number">0</span>) : sum(_sum), cnt(_cnt) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;r) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sum &lt; r.sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> ed, <span class="built_in">vector</span>&lt;node&gt; &amp;adj, <span class="keyword">double</span> sum, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == ed + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (cnt != <span class="number">0</span>) &#123;</span><br><span class="line">adj.emplace_back(sum, cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(p + <span class="number">1</span>, ed, adj, sum + a[p], cnt + <span class="number">1</span>);</span><br><span class="line">dfs(p + <span class="number">1</span>, ed, adj, sum, cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">my_equal</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">fabs</span>(x - y) &lt; EPS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = n / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; left, right;</span><br><span class="line">dfs(<span class="number">1</span>, m, left, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">dfs(m + <span class="number">1</span>, n, right, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">sort(left.begin(), left.end());</span><br><span class="line">sort(right.begin(), right.end());</span><br><span class="line"><span class="keyword">int</span> u = <span class="number">0</span>, v = (<span class="keyword">int</span>)right.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; left.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">double</span> avg = left[i].sum;</span><br><span class="line"><span class="keyword">if</span> (my_equal(avg, <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (u &lt; (<span class="keyword">int</span>)left.size() &amp;&amp; v &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> tot = left[u].cnt + right[v].cnt;</span><br><span class="line"><span class="keyword">double</span> avg = left[u].sum + right[v].sum;</span><br><span class="line"><span class="keyword">if</span> (my_equal(avg, <span class="number">0</span>) &amp;&amp; tot != n) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (avg &lt; <span class="number">0</span>) &#123;</span><br><span class="line">++u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">--v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解题心得"><a href="#解题心得" class="headerlink" title="解题心得"></a>解题心得</h2><p>最近在前室友的带领下刚入坑LeetCode，这种提交接口而不是整个程序的方式还是第一次尝试。<br>当然刚开始也踩了许多坑，比如全局变量的使用。<br>看了官方文档才发现，实际测试时，同一个全局变量是会被多个实例反复调用的。<br>因此全局变量必须每次都初始化，根据文档的提醒最好的方式是不要使用全局变量。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/split-array-with-same-average/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 805. Split Array With Same Average&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;给定N个整数，判断是否能分成均值相同的两堆（非空），N范围为1到30，数值范围为0到10000。&lt;br&gt;比如样例 [1,2,3,4,5,6,7,8] 可以分成 [1,4,5,8] 和 [2,3,6,7] 两组，均值为4.5。&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="http://tashi711.xyz/categories/programming/"/>
    
      <category term="leetcode" scheme="http://tashi711.xyz/categories/programming/leetcode/"/>
    
    
      <category term="搜索" scheme="http://tashi711.xyz/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
</feed>
