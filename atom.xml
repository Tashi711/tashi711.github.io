<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tashi711的博客</title>
  
  <subtitle>過去（きのう）に傷付きながらも、信じ続ける理想（ゆめ）を求める。いつか無限（なないろ）に輝き放って、青空（そら）に橋を描く。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tashi711.xyz/"/>
  <updated>2018-08-28T03:12:48.855Z</updated>
  <id>http://tashi711.xyz/</id>
  
  <author>
    <name>Tashi711</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「854. K-Similar Strings」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-854/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-854/</id>
    <published>2018-08-28T03:57:02.000Z</published>
    <updated>2018-08-28T03:12:48.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/k-similar-strings/description/" target="_blank" rel="noopener">854. K-Similar Strings</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>　　Strings A and B are K-similar (for some non-negative integer K) if we can swap the positions of two letters in A exactly K times so that the resulting string equals B.<br>　　Given two anagrams A and B, return the smallest K for which A and B are K-similar.</p><p>　　Example 1:<br>　　Input: A = “ab”, B = “ba”<br>　　Output: 1</p><p>　　Example 2:<br>　　Input: A = “abc”, B = “bca”<br>　　Output: 2</p><p>　　Example 3:<br>　　Input: A = “abac”, B = “baca”<br>　　Output: 2</p><p>　　Example 4:<br>　　Input: A = “aabc”, B = “abca”<br>　　Output: 2</p><p>　　Note:<br>　　1 &lt;= A.length == B.length &lt;= 20<br>　　A and B contain only lowercase letters from the set {‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’}</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>　　数据范围很小，考虑用回溯爆搜。<br>　　此处考虑两个剪枝：<br>　　一是最基本的当前累计交换次数达到目前的最优解就停止；<br>　　二是交换与顺序某种意义上是无关的，因此从前往后扫，遇到第一个不一样的位置就一定试着与后面所有可能的位置交换，将当前位置交换正确，再往后扫。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>　　因为爆搜的复杂度很难估计，尤其是有剪枝的时候，此处不展开分析，官方题解中有分析复杂度，可以参考。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> a, b;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> min_ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">diff</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] != b[i]) &#123;</span><br><span class="line">++res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; min_ans &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">min_ans = ans;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans == min_ans) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = u; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] != b[i]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (b[i] == a[j]) &#123;</span><br><span class="line">swap(a[i], a[j]);</span><br><span class="line">++ans;</span><br><span class="line">dfs(u + <span class="number">1</span>);</span><br><span class="line">--ans;</span><br><span class="line">swap(a[i], a[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kSimilarity</span><span class="params">(<span class="built_in">string</span> A, <span class="built_in">string</span> B)</span> </span>&#123;</span><br><span class="line">n = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(A.size());</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">min_ans = <span class="number">20</span>;</span><br><span class="line">a = A;</span><br><span class="line">b = B;</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> min_ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/k-similar-strings/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;854. K-Similar Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;　　Strings A and B are K-similar (for some non-negative integer K) if we can swap the positions of two letters in A exactly K times so that the resulting string equals B.&lt;br&gt;　　Given two anagrams A and B, return the smallest K for which A and B are K-similar.&lt;/p&gt;
&lt;p&gt;　　Example 1:&lt;br&gt;　　Input: A = “ab”, B = “ba”&lt;br&gt;　　Output: 1&lt;/p&gt;
&lt;p&gt;　　Example 2:&lt;br&gt;　　Input: A = “abc”, B = “bca”&lt;br&gt;　　Output: 2&lt;/p&gt;
&lt;p&gt;　　Example 3:&lt;br&gt;　　Input: A = “abac”, B = “baca”&lt;br&gt;　　Output: 2&lt;/p&gt;
&lt;p&gt;　　Example 4:&lt;br&gt;　　Input: A = “aabc”, B = “abca”&lt;br&gt;　　Output: 2&lt;/p&gt;
&lt;p&gt;　　Note:&lt;br&gt;　　1 &amp;lt;= A.length == B.length &amp;lt;= 20&lt;br&gt;　　A and B contain only lowercase letters from the set {‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’}&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="回溯" scheme="http://tashi711.xyz/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>「シド - バタフライエフェクト」鑑賞</title>
    <link href="http://tashi711.xyz/nihongo/uta/sid-butterfly-effect/"/>
    <id>http://tashi711.xyz/nihongo/uta/sid-butterfly-effect/</id>
    <published>2018-08-27T17:03:54.000Z</published>
    <updated>2018-08-28T02:43:30.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="歌曲信息"><a href="#歌曲信息" class="headerlink" title="歌曲信息"></a>歌曲信息</h2><blockquote><ul><li>歌曲：バタフライエフェクト</li><li>歌手：シド</li><li>作词：マオ</li><li>作曲：ゆうや</li><li>专辑：バタフライエフェクト（2017年5月10日由Ki/oon Music Inc.发行）</li></ul></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近シド15周年发久违的新专，不过翻译一首去年的一直想翻译的非常好听的歌。</p><a id="more"></a><h2 id="假名歌词"><a href="#假名歌词" class="headerlink" title="假名歌词"></a>假名歌词</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">通（とお）り雨（あめ）にうたれただけ　言（い）い聞（き）かせていた</span><br><span class="line">錆（さ）びたガラクタ　になるよりはましだと</span><br><span class="line">眠（ねむ）れない夜（よる）　瞑（つむ）る　怒（いか）り抱（だ）いて</span><br><span class="line"></span><br><span class="line">嵐（あらし）の前（まえ）のような　不適切（ふてきせつ）な　笑（え）み　浮（う）かべ</span><br><span class="line">その急所（きゅうしょ）を　狙（ねら）えよ</span><br><span class="line"></span><br><span class="line">空高（そらたか）くまで　助（たす）け　乞（こ）う声（こえ）</span><br><span class="line">今（いま）はまだ　届（とど）かない　そこに救（すく）いの手（て）もない</span><br><span class="line">賢者（けんじゃ）になれない　愚（おろ）かな君（きみ）</span><br><span class="line">頭（あたま）の中（なか）　溢（あふ）れ　イツカミテロ　溢（あふ）れだす</span><br><span class="line">何（なに）もかもを全（すべ）て　おれが捻（ね）じ曲（ま）げよう</span><br><span class="line"></span><br><span class="line">氷（こおり）が溶（と）ける音（おと）に　ただ　耳（みみ）を澄（す）ませてた</span><br><span class="line">我慢（がまん）のときを　じっと　楽（たの）しむように</span><br><span class="line">いつか来（く）る　朝（あさ）を　待（ま）ち望（のぞ）んで</span><br><span class="line"></span><br><span class="line">嫌悪（けんお）で　塗（ぬ）り潰（つぶ）す　少（すこ）しだけ　闇（やみ）　浮（う）かべ</span><br><span class="line">その隙（すき）みて　奪（うば）えよ</span><br><span class="line"></span><br><span class="line">空高（そらたか）くまで　助（たす）け　乞（こ）う声（こえ）</span><br><span class="line">今（いま）はまだ　届（とど）かない　そこに救（すく）いの手（て）もない</span><br><span class="line">賢者（けんじゃ）になれない　愚（おろ）かな君（きみ）</span><br><span class="line">頭（あたま）の中（なか）　溢（あふ）れ　イツカミテロ　溢（あふ）れだす</span><br><span class="line">何（なに）もかもを全（すべ）て　おれが捻（ね）じ曲（ま）げよう</span><br><span class="line"></span><br><span class="line">空高（そらたか）くまで　助（たす）け　乞（こ）う声（こえ）</span><br><span class="line">今（いま）はもう　届（とど）かない　そこに救（すく）いの手（て）もない</span><br><span class="line">賢者（けんじゃ）になれない　愚（おろ）かな君（きみ）</span><br><span class="line">頭（あたま）の中（なか）　溢（あふ）れ　イマニミテロ　溢（あふ）れだす</span><br><span class="line">何（なに）もかもを全（すべ）て　おれが捻（ね）じ曲（ま）げよう</span><br><span class="line">深紅（しんく）の羽（はね）　広（ひろ）げ　おれが変（か）えてみせよう</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;歌曲信息&quot;&gt;&lt;a href=&quot;#歌曲信息&quot; class=&quot;headerlink&quot; title=&quot;歌曲信息&quot;&gt;&lt;/a&gt;歌曲信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;歌曲：バタフライエフェクト&lt;/li&gt;
&lt;li&gt;歌手：シド&lt;/li&gt;
&lt;li&gt;作词：マオ&lt;/li&gt;
&lt;li&gt;作曲：ゆうや&lt;/li&gt;
&lt;li&gt;专辑：バタフライエフェクト（2017年5月10日由Ki/oon Music Inc.发行）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;最近シド15周年发久违的新专，不过翻译一首去年的一直想翻译的非常好听的歌。&lt;/p&gt;
    
    </summary>
    
      <category term="ニホンゴ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/"/>
    
      <category term="ウタ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/%E3%82%A6%E3%82%BF/"/>
    
    
      <category term="シド" scheme="http://tashi711.xyz/tags/%E3%82%B7%E3%83%89/"/>
    
  </entry>
  
  <entry>
    <title>「850. Rectangle Area II」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-850/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-850/</id>
    <published>2018-06-10T03:57:02.000Z</published>
    <updated>2018-06-10T04:08:18.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/rectangle-area-ii/description/" target="_blank" rel="noopener">850. Rectangle Area II</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>　　给定N（1到200）个矩形，坐标范围在0到10^9，求这N个矩形覆盖的面积，结果对10^9+7取模，题目保证总的覆盖范围不超过2^63-1。<br>　　样例1：输入[[0,0,2,2],[1,0,2,3],[1,0,3,1]]，输出6。<br>　　样例2：输入[[0,0,1000000000,1000000000]]，输出49。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>　　数据范围很大，但分布很稀疏，比较裸的离散化了。</p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><p>　　主要是判断离散化后的某个单独小块在原图中的面积比较麻烦，画个图就清楚了。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>　　时间复杂度为$O(N^3)$。<br>　　空间复杂度为$O(N^2)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> kMaxN = <span class="number">220</span> * <span class="number">4</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> kModule = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[kMaxN][kMaxN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rectangleArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; rectangles)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(rectangles.size());</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : rectangles) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j : i) &#123;</span><br><span class="line">adj.push_back(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(adj.begin(), adj.end());</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; f;</span><br><span class="line"><span class="keyword">int</span> tot = n * <span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i) &#123;</span><br><span class="line">f[adj[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : rectangles) &#123;</span><br><span class="line"><span class="keyword">int</span> ux = f[i[<span class="number">0</span>]], uy = f[i[<span class="number">1</span>]], vx = f[i[<span class="number">2</span>]], vy = f[i[<span class="number">3</span>]];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = ux; j &lt; vx; ++j) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = uy; k &lt; vy; ++k) &#123;</span><br><span class="line">a[j][k] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0L</span>L;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i][j]) &#123;</span><br><span class="line">ans += <span class="keyword">static_cast</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(adj[i + <span class="number">1</span>] - adj[i]) * ((adj[j + <span class="number">1</span>] - adj[j]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans % kModule;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解题心得"><a href="#解题心得" class="headerlink" title="解题心得"></a>解题心得</h2><p>这道题也能用二维线段树解，复杂度可以达到$O(N \log N)$。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/rectangle-area-ii/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;850. Rectangle Area II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;　　给定N（1到200）个矩形，坐标范围在0到10^9，求这N个矩形覆盖的面积，结果对10^9+7取模，题目保证总的覆盖范围不超过2^63-1。&lt;br&gt;　　样例1：输入[[0,0,2,2],[1,0,2,3],[1,0,3,1]]，输出6。&lt;br&gt;　　样例2：输入[[0,0,1000000000,1000000000]]，输出49。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="离散化" scheme="http://tashi711.xyz/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>「843. Guess the Word」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-843/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-843/</id>
    <published>2018-06-08T12:39:10.000Z</published>
    <updated>2018-06-08T12:56:22.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/guess-the-word/description/" target="_blank" rel="noopener">843. Guess the Word</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>　　交互题目：<br>　　给定N（样例为4，测试数据为100）个不同单词的list，都是小写，6位长，采样随机，其中有一个是secret的，通过调用master.guess(word)可以猜词并返回word与secret单词匹配的个数（值和位置都要匹配），但word必须是给定的list里面的，否则返回-1。小于等于10次猜对即为正确。<br>　　样例：secret = “acckzz”，wordlist = [“acckzz”,”ccbazz”,”eiowzz”,”abcczz”]：<br>　　master.guess(“aaaaaa”) returns -1, because “aaaaaa” is not in wordlist.<br>　　master.guess(“acckzz”) returns 6, because “acckzz” is secret and has all 6 matches.<br>　　master.guess(“ccbazz”) returns 3, because “ccbazz” has 3 matches.<br>　　master.guess(“eiowzz”) returns 2, because “eiowzz” has 2 matches.<br>　　master.guess(“abcczz”) returns 4, because “abcczz” has 4 matches.<br>　　上面猜了5次，有一次猜对了，即为正确。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>　　尝试了随机的方法，即每次都取满足目前猜过的情况中随机的词猜，结果猜不出来，因此需要更加有启发性的算法。参考了题解，其中有一句非常精妙：每次都应该使得保留的词尽可能少。而这个值因为可能是跟目前猜的词匹配数为0到6的任意情况，因此要使得最坏的情况（匹配后留下最多的长度）最优（最少），那么可以先预处理出两两的匹配情况，每次猜词的时候选使得其他所有可能单词匹配最多的时候最少。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>　　时间复杂度为$O(N^2)$。<br>　　空间复杂度为$O(N^2)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> kMaxN = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> kNumTry = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> kLenStr = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[kMaxN][kMaxN];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">match</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; u, <span class="keyword">const</span> <span class="built_in">string</span>&amp; v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; kLenStr; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (u[i] == v[i]) &#123;</span><br><span class="line">++res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordlist)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">f[i][j] = match(wordlist[i], wordlist[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; adj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">-1</span>, min_max = <span class="number">0x7FFFFFFF</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : adj) &#123;</span><br><span class="line"><span class="keyword">int</span> cnt[kLenStr + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j : adj) &#123;</span><br><span class="line">++cnt[f[i][j]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cur_max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= kLenStr; ++j) &#123;</span><br><span class="line">cur_max = max(cur_max, cnt[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cur_max &lt; min_max) &#123;</span><br><span class="line">min_max = cur_max;</span><br><span class="line">res = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findSecretWord</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordlist, Master&amp; master)</span> </span>&#123;</span><br><span class="line">n = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(wordlist.size());</span><br><span class="line">pre(wordlist);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">adj.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cnt = <span class="number">1</span>; cnt &lt;= kNumTry; ++cnt) &#123;</span><br><span class="line"><span class="keyword">int</span> cur_idx = calc(adj);</span><br><span class="line"><span class="keyword">int</span> cur_match = master.guess(wordlist[cur_idx]);</span><br><span class="line"><span class="keyword">if</span> (cur_match == kLenStr) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : adj) &#123;</span><br><span class="line"><span class="keyword">if</span> (f[cur_idx][i] == cur_match &amp;&amp; i != cur_idx) &#123;</span><br><span class="line">pos.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">adj = pos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/guess-the-word/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;843. Guess the Word&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;　　交互题目：&lt;br&gt;　　给定N（样例为4，测试数据为100）个不同单词的list，都是小写，6位长，采样随机，其中有一个是secret的，通过调用master.guess(word)可以猜词并返回word与secret单词匹配的个数（值和位置都要匹配），但word必须是给定的list里面的，否则返回-1。小于等于10次猜对即为正确。&lt;br&gt;　　样例：secret = “acckzz”，wordlist = [“acckzz”,”ccbazz”,”eiowzz”,”abcczz”]：&lt;br&gt;　　master.guess(“aaaaaa”) returns -1, because “aaaaaa” is not in wordlist.&lt;br&gt;　　master.guess(“acckzz”) returns 6, because “acckzz” is secret and has all 6 matches.&lt;br&gt;　　master.guess(“ccbazz”) returns 3, because “ccbazz” has 3 matches.&lt;br&gt;　　master.guess(“eiowzz”) returns 2, because “eiowzz” has 2 matches.&lt;br&gt;　　master.guess(“abcczz”) returns 4, because “abcczz” has 4 matches.&lt;br&gt;　　上面猜了5次，有一次猜对了，即为正确。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="交互题" scheme="http://tashi711.xyz/tags/%E4%BA%A4%E4%BA%92%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>「839. Similar String Groups」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-839/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-839/</id>
    <published>2018-06-07T14:00:06.000Z</published>
    <updated>2018-06-07T14:09:21.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/similar-string-groups/description/" target="_blank" rel="noopener">839. Similar String Groups</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>　　给定N（1到2000）个长度为M（1到1000）的字符串，如果某两个字符串是相似的，当且仅当从某个字符串交换某两个字母位置后可以得到另一个。把这些字符串分成很多组，其中每组当中的每一个字符串至少跟同组的某一个字符串相似。求问这N个字符串被分为多少组。<br>　　给的字符串都是小写且包含的字母相同，另外有N*M≤20000，且judge时间更加充裕。<br>　　样例：输入[“tars”,”rats”,”arts”,”star”]，输出2。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>　　用很裸的方法两两判断相似，连边，然后找连通分量个数即可。复杂度是$O(N^2M)$，但由于题设有N*M≤20000和judge时间充裕的假设，试着提交了下，直接AC了。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>　　时间复杂度为$O(N^2M)$。<br>　　空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> kMaxN = <span class="number">2200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[kMaxN];</span><br><span class="line"><span class="keyword">bool</span> vst[kMaxN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">similar</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; u, <span class="keyword">const</span> <span class="built_in">string</span>&amp; v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (u[i] != v[i]) &#123;</span><br><span class="line">++cnt;</span><br><span class="line"><span class="keyword">if</span> (cnt &gt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">vst[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(adj[u].size()); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> v = adj[u][i];</span><br><span class="line"><span class="keyword">if</span> (!vst[v]) &#123;</span><br><span class="line">dfs(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numSimilarGroups</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">n = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(A.size());</span><br><span class="line">m = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(A[<span class="number">0</span>].size());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">adj[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (similar(A[i], A[j])) &#123;</span><br><span class="line">adj[i].push_back(j);</span><br><span class="line">adj[j].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(vst, <span class="number">0</span>, <span class="keyword">sizeof</span> vst);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!vst[i]) &#123;</span><br><span class="line">dfs(i);</span><br><span class="line">++ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/similar-string-groups/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;839. Similar String Groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;　　给定N（1到2000）个长度为M（1到1000）的字符串，如果某两个字符串是相似的，当且仅当从某个字符串交换某两个字母位置后可以得到另一个。把这些字符串分成很多组，其中每组当中的每一个字符串至少跟同组的某一个字符串相似。求问这N个字符串被分为多少组。&lt;br&gt;　　给的字符串都是小写且包含的字母相同，另外有N*M≤20000，且judge时间更加充裕。&lt;br&gt;　　样例：输入[“tars”,”rats”,”arts”,”star”]，输出2。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="图论" scheme="http://tashi711.xyz/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="连通分量" scheme="http://tashi711.xyz/tags/%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>「847. Shortest Path Visiting All Nodes」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-847/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-847/</id>
    <published>2018-06-07T01:36:10.000Z</published>
    <updated>2018-06-07T03:13:07.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/shortest-path-visiting-all-nodes/description/" target="_blank" rel="noopener">847. Shortest Path Visiting All Nodes</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>　　给定N（1到12）个结点的无向无权图，输出访问到所有点的最短路径，可以重复走点、边，也可以自选起终点。<br>　　样例1：图为[[1,2,3],[0],[0],[0]]，输出4，（一种可能的最短路径为[1,0,2,0,3]）。<br>　　样例2：图为[[1],[0,2,4],[1,3,4],[2],[1,2]]，输出4，（一种可能的最短路径为[0,1,4,2,3]）。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>　　比较裸的一道状态压缩的题目，数据规模比较小又可以明显的找到父状态与子状态。<br>　　定义DP的数组为f[i][j]，其中i为访问状态，范围从0到$2^N-1$，每一位如果为1表示这个位置的结点访问过，为0表示未访问过，j为最后停留的结点位置，范围从0到N-1，当然必须属于i中为1的位置，否则这个状态组合就不合理（停留在j处但j没访问过），记chd为i去掉位置j处1的状态（因为最后停留在j，说明是最后走到了j，那么i一定是从chd转移过来的，否则没有意义），那么转移方程为f[i][j] = min{f[chd][k] + d[k][j]}，其中k为chd中1的位置，d[k][j]为k到j的距离，可以通过每个点进行bfs求最短路预处理得到，复杂度为$O(N^3)$。<br>　　DP的状态数量为$O(2^N)\cdot O(N)$，转移复杂度为$O(N)$，即枚举子状态chd的1的位置，因为$O(2^N)$是$O(N)$的高阶项，可以认为总的复杂度为$O(N^2\cdot2^N)$，是完全能接受的。<br>　　初始状态为f[只有第j个位置为1][any j] = 0，即自选起点。<br>　　目标状态为max{f[全1][any j]}，即枚举每个可能的终点。</p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><p>　　访问状态的枚举顺序从小到大即可。因为父状态一定比子状态大（父状态是子状态某个位置多了1），即如果访问状态从小到大枚举，计算父状态的时候子状态一定被计算好了。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>　　时间复杂度为$O(N^2\cdot2^N)$。<br>　　空间复杂度为$O(N\cdot2^N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> kMaxN = <span class="number">13</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> kMaxM = <span class="number">1</span> &lt;&lt; kMaxN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[kMaxM][kMaxN];</span><br><span class="line"><span class="keyword">int</span> d[kMaxN][kMaxN];</span><br><span class="line"><span class="keyword">bool</span> vst[kMaxN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; adj, <span class="keyword">int</span> st)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vst, <span class="number">0</span>, <span class="keyword">sizeof</span> vst);</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">q.emplace(st, <span class="number">0</span>);</span><br><span class="line">vst[st] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> u = q.front().first, w = q.front().second;</span><br><span class="line">d[st][u] = w;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(adj[u].size()); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> v = adj[u][i];</span><br><span class="line"><span class="keyword">if</span> (!vst[v]) &#123;</span><br><span class="line">q.emplace(v, w + <span class="number">1</span>);</span><br><span class="line">vst[v] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shortestPathLength</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">0x3F</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0x3F</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(graph.size());</span><br><span class="line"><span class="keyword">int</span> m = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">bfs(graph, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">f[<span class="number">1</span> &lt;&lt; i][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; j)) &#123;</span><br><span class="line"><span class="keyword">int</span> chd = i - (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (chd &amp; (<span class="number">1</span> &lt;&lt; k)) &#123;</span><br><span class="line">f[i][j] = min(f[i][j], f[chd][k] + d[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = n * n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">ans = min(ans, f[m][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/shortest-path-visiting-all-nodes/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;847. Shortest Path Visiting All Nodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;　　给定N（1到12）个结点的无向无权图，输出访问到所有点的最短路径，可以重复走点、边，也可以自选起终点。&lt;br&gt;　　样例1：图为[[1,2,3],[0],[0],[0]]，输出4，（一种可能的最短路径为[1,0,2,0,3]）。&lt;br&gt;　　样例2：图为[[1],[0,2,4],[1,3,4],[2],[1,2]]，输出4，（一种可能的最短路径为[0,1,4,2,3]）。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="状态压缩DP" scheme="http://tashi711.xyz/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 834. Sum of Distances in Tree」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-834/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-834/</id>
    <published>2018-06-04T11:33:46.000Z</published>
    <updated>2018-06-04T11:41:51.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/sum-of-distances-in-tree/description/" target="_blank" rel="noopener">LeetCode 834. Sum of Distances in Tree</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>　　给定N（1到10000）个结点的树，边的长度都是1，输出每个点到其他所有点的距离之和。<br>　　样例：N为6，边为[[0,1],[0,2],[2,3],[2,4],[2,5]]，输出[8,12,6,10,10,10]。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>　　比较简单的一道题目，暴力解决N方，其实每个点的距离和可以由相邻点得到，减去这一侧的点数加上另一侧的点数即可。<br>　　因此可以先$O(N)$算出某个点的距离和，再逐个往外算出每个点的距离和，每个点仅需$O(1)$就能得到，当然要先预处理出这一侧所有点的个数。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>　　时间复杂度为$O(N)$。<br>　　空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> kMaxN = <span class="number">11000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[kMaxN], tree[kMaxN];</span><br><span class="line"><span class="keyword">bool</span> vst[kMaxN];</span><br><span class="line"><span class="keyword">int</span> cnt[kMaxN];</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sumOfDistancesInTree(<span class="keyword">int</span> N, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; edges) &#123;</span><br><span class="line">n = N;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">adj[i].clear();</span><br><span class="line">tree[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">adj[edges[i][<span class="number">0</span>]].push_back(edges[i][<span class="number">1</span>]);</span><br><span class="line">adj[edges[i][<span class="number">1</span>]].push_back(edges[i][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">ans.clear();</span><br><span class="line">ans.resize(n);</span><br><span class="line"><span class="built_in">memset</span>(vst, <span class="number">0</span>, <span class="keyword">sizeof</span> vst);</span><br><span class="line">build_tree();</span><br><span class="line">cal_num(<span class="number">0</span>);</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">work();</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal_num</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">cnt[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(tree[u].size()); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> v = tree[u][i];</span><br><span class="line">cnt[u] += cal_num(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_tree</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(<span class="number">0</span>);</span><br><span class="line">vst[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> u = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(adj[u].size()); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> v = adj[u][i];</span><br><span class="line"><span class="keyword">if</span> (!vst[v]) &#123;</span><br><span class="line">tree[u].push_back(v);</span><br><span class="line">q.push(v);</span><br><span class="line">vst[v] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">sum += s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(tree[u].size()); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> v = tree[u][i];</span><br><span class="line">dfs(v, s + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal_ans</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">ans[u] = s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(tree[u].size()); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> v = tree[u][i];</span><br><span class="line">cal_ans(v, s - cnt[v] + n - cnt[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cal_ans(<span class="number">0</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/sum-of-distances-in-tree/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 834. Sum of Distances in Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;　　给定N（1到10000）个结点的树，边的长度都是1，输出每个点到其他所有点的距离之和。&lt;br&gt;　　样例：N为6，边为[[0,1],[0,2],[2,3],[2,4],[2,5]]，输出[8,12,6,10,10,10]。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="树形DP" scheme="http://tashi711.xyz/tags/%E6%A0%91%E5%BD%A2DP/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 828. Unique Letter String」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-828/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-828/</id>
    <published>2018-05-31T12:00:32.000Z</published>
    <updated>2018-05-31T12:15:25.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/unique-letter-string/description/" target="_blank" rel="noopener">LeetCode 828. Unique Letter String</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>　　定义unique character为字符串中出现正好一次的字母，定义UNIQ(S)为字符串S中unique character的个数。给定一个只含有大写字母的字符串S，求S的所有非空子串的UNIQ之和，如果两个不同位置的子串相同被认为是不同的子串。结果对10^9+7取模。<br>　　样例：1、”ABC”-&gt;10；2、”ABA”-&gt;8。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>　　比较简单的一道题目，考虑每个单独的字母对于最终答案的贡献。如果某个字母a对答案有贡献，那么包含他的子串一定在从这个a往两边延伸到边界或者另一个a之内位置的范围内。那么总共可能的子串有u*v个，其中u、v分别为延伸到边界或者另一个a之内位置的长度。对每个’A’到’Z’的字母a，找到每个a的位置，计算往外延伸的长度，乘起来累加到答案即可。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>　　时间复杂度为 $O(NM)$，其中M为字母个数，可以认为是常数26。<br>　　空间复杂度为 $O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> kM = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uniqueLetterString</span><span class="params">(<span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> work(S);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(s.size());</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> i = <span class="string">'A'</span>; i &lt;= <span class="string">'Z'</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[j] == i) &#123;</span><br><span class="line"><span class="keyword">int</span> cnt_pre = j + <span class="number">1</span>, cnt_next = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; n; ++k) &#123;</span><br><span class="line">++cnt_next;</span><br><span class="line"><span class="keyword">if</span> (s[k] == i) &#123;</span><br><span class="line">ans = (ans + cnt_pre * cnt_next) % kM;</span><br><span class="line">cnt_pre = cnt_next;</span><br><span class="line">cnt_next = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = (ans + cnt_pre * (cnt_next + <span class="number">1</span>)) % kM;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/unique-letter-string/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 828. Unique Letter String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;　　定义unique character为字符串中出现正好一次的字母，定义UNIQ(S)为字符串S中unique character的个数。给定一个只含有大写字母的字符串S，求S的所有非空子串的UNIQ之和，如果两个不同位置的子串相同被认为是不同的子串。结果对10^9+7取模。&lt;br&gt;　　样例：1、”ABC”-&amp;gt;10；2、”ABA”-&amp;gt;8。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
  </entry>
  
  <entry>
    <title>「LeetCode 803. Bricks Falling When Hit」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-803/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-803/</id>
    <published>2018-05-25T08:00:34.000Z</published>
    <updated>2018-05-25T14:42:24.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/bricks-falling-when-hit/description/" target="_blank" rel="noopener">LeetCode 803. Bricks Falling When Hit</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>　　给定一个0-1矩阵（[1, 200]×[1, 200]），1代表砖块，一个砖块不会掉落当且仅当它所在的4-连通分支直接连着顶层。<br>　　给定一系列消除（不超过矩阵面积次，且每次不一样），每次消除某一个位置，输出每次消除后掉落多少块（若该位置没有砖块输出0）。<br>　　样例1：<br>　　Input: grid = [[1,0,0,0],[1,1,1,0]]，hits = [[1,0]]；Output: [2]。<br>　　样例2：<br>　　Input: grid = [[1,0,0,0],[1,1,0,0]]，hits = [[1,1],[1,0]]；Output: [0,0]。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>　　比较难的一道题，其实一开始有想到倒序思考外加并查集，不过没有细想下去，看了题解发现自己的第一想法是对的，只是多注意一些处理的细节就好了。<br>　　首先一开始想到的是每次消除都做一遍种子填充，复杂度为$O(N^4)$，不太能接受。因此还是要想到倒序处理以及并查集才能完美解决这一题。一开始先去掉所有消除的块，用种子填充先预处理好所有的子连通分量，再逆序一个一个添加被消除的块，每次添加都判断是否有悬空的连通分量连上悬挂的连通分量，如果有，那么说明这个悬空的连通分量的就是在消除这一个位置块的时候掉下的。</p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><p>　　在并查集的最祖先的结点处保存这个连通分量是不是悬挂的以及整个连通分量的大小。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>　　时间复杂度为$O(N^2\alpha(N^2))$，其中$\alpha$是反Ackermann函数，也就是并查集的复杂度（通常被认为是小于等于4的常数）。<br>　　空间复杂度为$O(N^2)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> kN = <span class="number">220</span>, kM = <span class="number">44000</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> kDU[] = &#123; <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> kDV[] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[kM];</span><br><span class="line"><span class="keyword">int</span> cnt[kM];</span><br><span class="line"><span class="keyword">bool</span> top[kM];</span><br><span class="line"><span class="keyword">int</span> vst[kN][kN];</span><br><span class="line"><span class="keyword">int</span> n, m, h;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_p</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p[k] != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> p[k] = find_p(p[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> u * m + v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>* u, <span class="keyword">int</span>* v)</span> </span>&#123;</span><br><span class="line">*u = k / m;</span><br><span class="line">*v = k % m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; adj, <span class="keyword">int</span> sk, <span class="keyword">bool</span>* ok)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u &gt;= <span class="number">0</span> &amp;&amp; u &lt; n &amp;&amp; v &gt;= <span class="number">0</span> &amp;&amp; v &lt; m &amp;&amp; !vst[u][v] &amp;&amp; a[u][v]) &#123;</span><br><span class="line"><span class="keyword">int</span> k = f(u, v);</span><br><span class="line">adj.emplace_back(k);</span><br><span class="line">vst[u][v] = <span class="literal">true</span>;</span><br><span class="line">p[k] = sk;</span><br><span class="line"><span class="keyword">if</span> (u == <span class="number">0</span>) &#123;</span><br><span class="line">*ok = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flood_fill</span><span class="params">(<span class="keyword">int</span> su, <span class="keyword">int</span> sv)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> sk = f(su, sv);</span><br><span class="line">q.push_back(sk);</span><br><span class="line">vst[su][sv] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">bool</span> ok = (su == <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(q.size()); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> k = q[i], u, v;</span><br><span class="line">g(k, &amp;u, &amp;v);</span><br><span class="line">solve(u + <span class="number">1</span>, v, q, sk, &amp;ok);</span><br><span class="line">solve(u - <span class="number">1</span>, v, q, sk, &amp;ok);</span><br><span class="line">solve(u, v + <span class="number">1</span>, q, sk, &amp;ok);</span><br><span class="line">solve(u, v - <span class="number">1</span>, q, sk, &amp;ok);</span><br><span class="line">&#125;</span><br><span class="line">cnt[sk] = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(q.size());</span><br><span class="line">top[sk] = ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; hitBricks(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; hits) &#123;</span><br><span class="line"><span class="built_in">memset</span>(p, <span class="number">0xFF</span>, <span class="keyword">sizeof</span> p);</span><br><span class="line"><span class="built_in">memset</span>(vst, <span class="number">0</span>, <span class="keyword">sizeof</span> vst);</span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line"><span class="built_in">memset</span>(top, <span class="number">0</span>, <span class="keyword">sizeof</span> top);</span><br><span class="line"></span><br><span class="line">n = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(grid.size());</span><br><span class="line">m = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(grid[<span class="number">0</span>].size());</span><br><span class="line">h = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(hits.size());</span><br><span class="line"></span><br><span class="line">a = grid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = hits[i][<span class="number">0</span>], v = hits[i][<span class="number">1</span>];</span><br><span class="line">a[u][v] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> k = f(i, j);</span><br><span class="line"><span class="keyword">if</span> (a[i][j] &amp;&amp; !vst[i][j]) &#123;</span><br><span class="line">flood_fill(i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans(h);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = hits[i][<span class="number">0</span>], v = hits[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (grid[u][v]) &#123;</span><br><span class="line"><span class="keyword">int</span> k = f(u, v);</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> cu = u + kDU[j], cv = v + kDV[j];</span><br><span class="line"><span class="keyword">if</span> (cu &gt;= <span class="number">0</span> &amp;&amp; cu &lt; n &amp;&amp; cv &gt;= <span class="number">0</span> &amp;&amp; cv &lt; m &amp;&amp; a[cu][cv]) &#123;</span><br><span class="line"><span class="keyword">int</span> ck = f(cu, cv);</span><br><span class="line"><span class="keyword">int</span> pck = find_p(ck);</span><br><span class="line">s.insert(pck);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[u][v] = <span class="number">1</span>;</span><br><span class="line">cnt[k] = <span class="number">1</span>;</span><br><span class="line">top[k] = (u == <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (!s.empty()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cp : s) &#123;</span><br><span class="line">p[cp] = k;</span><br><span class="line">cnt[k] += cnt[cp];</span><br><span class="line">top[k] = (top[k] || top[cp]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (top[k]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cp : s) &#123;</span><br><span class="line"><span class="keyword">if</span> (!top[cp]) &#123;</span><br><span class="line">sum += cnt[cp];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans[i] = sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解题心得"><a href="#解题心得" class="headerlink" title="解题心得"></a>解题心得</h2><p>　　有时候要相信自己的第一直觉，这往往是解决题目的关键。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/bricks-falling-when-hit/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 803. Bricks Falling When Hit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;　　给定一个0-1矩阵（[1, 200]×[1, 200]），1代表砖块，一个砖块不会掉落当且仅当它所在的4-连通分支直接连着顶层。&lt;br&gt;　　给定一系列消除（不超过矩阵面积次，且每次不一样），每次消除某一个位置，输出每次消除后掉落多少块（若该位置没有砖块输出0）。&lt;br&gt;　　样例1：&lt;br&gt;　　Input: grid = [[1,0,0,0],[1,1,1,0]]，hits = [[1,0]]；Output: [2]。&lt;br&gt;　　样例2：&lt;br&gt;　　Input: grid = [[1,0,0,0],[1,1,0,0]]，hits = [[1,1],[1,0]]；Output: [0,0]。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="种子填充算法" scheme="http://tashi711.xyz/tags/%E7%A7%8D%E5%AD%90%E5%A1%AB%E5%85%85%E7%AE%97%E6%B3%95/"/>
    
      <category term="并查集" scheme="http://tashi711.xyz/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>PuTTY与Atom上SSH与SFTP的Public Key认证总结</title>
    <link href="http://tashi711.xyz/programming/technologies/SSH/"/>
    <id>http://tashi711.xyz/programming/technologies/SSH/</id>
    <published>2018-05-25T03:15:34.000Z</published>
    <updated>2018-05-31T12:18:24.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本机配置"><a href="#本机配置" class="headerlink" title="本机配置"></a>本机配置</h2><p>　　主要是Windows上的配置（前提是远端服务器上已经配置好相应的id_rsa.pub了）。</p><h3 id="PuTTY"><a href="#PuTTY" class="headerlink" title="PuTTY"></a>PuTTY</h3><p>　　1、配置好或者Load已有的密码登录配置；<br>　　2、生成好id_rsa（可以通过Git Bash生成或者从Linux中生成好拷贝过来）；<br>　　3、运行PuTTY安装目录下的puttygen.exe，选择菜单Conversions中的Import key，选择id_rsa文件，载入后看得到key框里面有id_rsa的信息，点击右下方的save private key，保存到一个PuTTY专用的private key文件（.ppk）中；<br>　　4、在PuTTY的左边选择SSH-&gt;Auth，在右边点击Browse按钮，载入刚才存储的.ppk文件；<br>　　5、在PuTTY的左边选择Connection-&gt;Data，在右边Auto-login username输入框中填写SSH的用户名；<br>　　6、在PuTTY的左边选择Session，在右边点击Save把配置保存下来；<br>　　7、完成配置，之后登陆会发现直接能SSH上去不需要输密码了。</p><a id="more"></a><h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><p>　　1、配置好已有的密码登录配置；<br>　　2、密码项已经不需要了，设为空：”pass”: “”。（如果以前有配置的话）<br>　　3、配置私钥所在位置，一般如下：”privatekey”: “C:/Users/[xxx]/.ssh/id_rsa”，其中[xxx]为自己的本机系统用户名。注意即使在Windows下文件名分隔符要使用左斜杠<br>　　4、完成配置，之后直接点击Connect就可以直接登陆了。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>　　Linux下注意更换id_rsa和id_rsa.pub之后重新log in一下即可。<br>　　另外，如果没有配置过ssh-agent可以先执行：eval <code>ssh-agent -s</code>，然后执行ssh-add，这些是永久生效的，之后开机就不用再执行了。<br>　　如果遇到id_rsa权限过高的情况，可以再将id_rsa给chmod到0600，之后就可以顺利连上ssh和sftp了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;本机配置&quot;&gt;&lt;a href=&quot;#本机配置&quot; class=&quot;headerlink&quot; title=&quot;本机配置&quot;&gt;&lt;/a&gt;本机配置&lt;/h2&gt;&lt;p&gt;　　主要是Windows上的配置（前提是远端服务器上已经配置好相应的id_rsa.pub了）。&lt;/p&gt;
&lt;h3 id=&quot;PuTTY&quot;&gt;&lt;a href=&quot;#PuTTY&quot; class=&quot;headerlink&quot; title=&quot;PuTTY&quot;&gt;&lt;/a&gt;PuTTY&lt;/h3&gt;&lt;p&gt;　　1、配置好或者Load已有的密码登录配置；&lt;br&gt;　　2、生成好id_rsa（可以通过Git Bash生成或者从Linux中生成好拷贝过来）；&lt;br&gt;　　3、运行PuTTY安装目录下的puttygen.exe，选择菜单Conversions中的Import key，选择id_rsa文件，载入后看得到key框里面有id_rsa的信息，点击右下方的save private key，保存到一个PuTTY专用的private key文件（.ppk）中；&lt;br&gt;　　4、在PuTTY的左边选择SSH-&amp;gt;Auth，在右边点击Browse按钮，载入刚才存储的.ppk文件；&lt;br&gt;　　5、在PuTTY的左边选择Connection-&amp;gt;Data，在右边Auto-login username输入框中填写SSH的用户名；&lt;br&gt;　　6、在PuTTY的左边选择Session，在右边点击Save把配置保存下来；&lt;br&gt;　　7、完成配置，之后登陆会发现直接能SSH上去不需要输密码了。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="技术" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SSH" scheme="http://tashi711.xyz/tags/SSH/"/>
    
      <category term="Public Key" scheme="http://tashi711.xyz/tags/Public-Key/"/>
    
  </entry>
  
  <entry>
    <title>「焚吐 / みやかわくん - 神風エクスプレス」鑑賞</title>
    <link href="http://tashi711.xyz/nihongo/uta/kamikaze-ekusupuresu/"/>
    <id>http://tashi711.xyz/nihongo/uta/kamikaze-ekusupuresu/</id>
    <published>2018-05-08T12:37:54.000Z</published>
    <updated>2018-05-08T12:53:02.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="歌曲信息"><a href="#歌曲信息" class="headerlink" title="歌曲信息"></a>歌曲信息</h2><blockquote><ul><li>歌曲：神風エクスプレス</li><li>歌手：焚吐 / みやかわくん</li><li>作词：焚吐</li><li>作曲：焚吐 / みやかわくん</li><li>专辑：神風エクスプレス（2018年2月14日发行）</li></ul></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>柯南最新的ED、听起来很有feeling、就稍微译了译。<br>焚吐的声音好好听哇、花痴ing…</p><a id="more"></a><h2 id="假名歌词"><a href="#假名歌词" class="headerlink" title="假名歌词"></a>假名歌词</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">ああ　霞（かすみ）の中（なか）　伸（の）ばした腕（うで）が</span><br><span class="line">少（すこ）し震（ふる）えている　海岸線午前四時（かいがんせんごぜんよんじ）</span><br><span class="line"></span><br><span class="line">ああ　不安（ふあん）と高揚感（こうようかん）　一緒（いっしょ）くたにして</span><br><span class="line">波（なみ）は揺（ゆ）らめいていた</span><br><span class="line"></span><br><span class="line">未来（みらい）はそう　封（ふう）を切（き）る前（まえ）の前（まえ）</span><br><span class="line">出来上（できあ）がってさえいない原材料（げんざいりょう）</span><br><span class="line"></span><br><span class="line">「まだまだ足掻（あが）ける　ここから駆（か）けるんだ」って</span><br><span class="line">君（きみ）の　君（きみ）の　一声（ひとこえ）で全（すべ）て始（はじ）まる</span><br><span class="line"></span><br><span class="line">一二（いちに）の三（さん）で飛（と）んでいこう</span><br><span class="line">目（め）は閉（と）じていて構（かま）わない</span><br><span class="line">熱（ねつ）を帯（お）びる夢（ゆめ）</span><br><span class="line"></span><br><span class="line">瞼（まぶた）の裏（うら）でもうずっと</span><br><span class="line">思（おも）い描（えが）いてきたエクスプレス</span><br><span class="line">とうとう発進（はっしん）です</span><br><span class="line"></span><br><span class="line">ああ　明（あ）けた空（そら）が　誘（いざな）っている</span><br><span class="line">白（しろ）いアーチを成（な）して　僕（ぼく）らを待（ま）ち構（かま）える</span><br><span class="line"></span><br><span class="line">「その期待（きたい）こそが　足枷（あしかせ）なんだ</span><br><span class="line">どうか放（ほう）っといてくれよ」</span><br><span class="line"></span><br><span class="line">いつだってそう　忙（いそが）しい生（い）き物（もの）だ</span><br><span class="line">頼（たの）まれちゃいないのに今日（きょう）だって</span><br><span class="line"></span><br><span class="line">何十回目（なにじゅっかいめ）かの　愛（あい）や夢（ゆめ）に四苦八苦（しくはっく）</span><br><span class="line">正直（しょうじき）　うんざり　することもあるけれど</span><br><span class="line"></span><br><span class="line">地平（ちへい）の向（む）こう一心（いっしん）に</span><br><span class="line">目（め）を凝（こ）らすのも無駄（むだ）ではない</span><br><span class="line">高（たか）らかに歌（うた）え</span><br><span class="line"></span><br><span class="line">僕（ぼく）らが明日（あす）を見（み）ていた</span><br><span class="line">丁度（ちょうど）そのとき明日（あした）の方（ほう）</span><br><span class="line">も僕（ぼく）らを見（み）ていた</span><br><span class="line"></span><br><span class="line">願（ねが）いだって　未来（みらい）だって</span><br><span class="line">僕（ぼく）らはむしろ曖昧（あいまい）な方（ほう）が良（よ）い</span><br><span class="line">飛（と）び方（かた）もなんとなくで良（よ）い</span><br><span class="line"></span><br><span class="line">きっときっと　きっときっと　きっときっと</span><br><span class="line">そっちの方（ほう）が長（なが）く飛（と）べるや</span><br><span class="line"></span><br><span class="line">一二（いちに）の三（さん）で合図（あいず）して</span><br><span class="line">目（め）は閉（と）じていて構（かま）わない</span><br><span class="line">熱（ねつ）を帯（お）びる夢（ゆめ）</span><br><span class="line"></span><br><span class="line">あらゆる闇（やみ）を消（け）し去（さ）る</span><br><span class="line">ような神風（かみかぜ）エクスプレス</span><br><span class="line">とうとう発進（はっしん）です</span><br></pre></td></tr></table></figure><h2 id="其他感想"><a href="#其他感想" class="headerlink" title="其他感想"></a>其他感想</h2><p>焚吐之前唱过柯南的ED、声音很有特点。<br>みやかわくん稍微冷门点、是存活在二次元的翻唱歌手。<br>反正之后柯南的新曲好听都都会稍微译一译^_^…</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;歌曲信息&quot;&gt;&lt;a href=&quot;#歌曲信息&quot; class=&quot;headerlink&quot; title=&quot;歌曲信息&quot;&gt;&lt;/a&gt;歌曲信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;歌曲：神風エクスプレス&lt;/li&gt;
&lt;li&gt;歌手：焚吐 / みやかわくん&lt;/li&gt;
&lt;li&gt;作词：焚吐&lt;/li&gt;
&lt;li&gt;作曲：焚吐 / みやかわくん&lt;/li&gt;
&lt;li&gt;专辑：神風エクスプレス（2018年2月14日发行）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;柯南最新的ED、听起来很有feeling、就稍微译了译。&lt;br&gt;焚吐的声音好好听哇、花痴ing…&lt;/p&gt;
    
    </summary>
    
      <category term="ニホンゴ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/"/>
    
      <category term="ウタ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/%E3%82%A6%E3%82%BF/"/>
    
    
      <category term="名侦探柯南" scheme="http://tashi711.xyz/tags/%E5%90%8D%E4%BE%A6%E6%8E%A2%E6%9F%AF%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>「Google C++ Style Guide」小结</title>
    <link href="http://tashi711.xyz/programming/notes/others/google-code-style/"/>
    <id>http://tashi711.xyz/programming/notes/others/google-code-style/</id>
    <published>2018-05-06T03:17:59.000Z</published>
    <updated>2018-05-23T14:05:38.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Google-C-Style-Guide"><a href="#Google-C-Style-Guide" class="headerlink" title="Google C++ Style Guide"></a>Google C++ Style Guide</h2><p>刚进公司的时候看过一遍、现在需要重新再学习一下、顺便写点笔记。<br>（如果记得没错的话这份文档的名字改过了、以前叫coding style、现在叫style guide了）。<br>对于一些平时一直习惯使用的（比如#define保护）以及一些不推荐使用但是基本不会用到的（比如前置声明）就不再赘述了。<br>下面附上链接：</p><ul><li><a href="http://google.github.io/styleguide/cppguide.html" target="_blank" rel="noopener">英文版链接</a></li><li><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/" target="_blank" rel="noopener">中文版链接</a></li></ul><a id="more"></a><h3 id="include的路径及顺序"><a href="#include的路径及顺序" class="headerlink" title="#include的路径及顺序"></a>#include的路径及顺序</h3><p>项目内头文件应按照项目源代码目录树结构排列, 避免使用 UNIX 特殊的快捷目录 . (当前目录) 或 .. (上级目录)。<br>xxx.cc 中包含头文件的次序如下(按字母顺序分别对每种类型的头文件进行二次排序):</p><ol><li>xxx.h</li><li>C 系统文件</li><li>C++ 系统文件</li><li>其他库的 .h 文件</li><li>本项目内 .h 文件</li></ol><p>举例来说, google-awesome-project/src/foo/internal/fooserver.cc 的包含次序如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;foo/public/fooserver.h&quot; // 优先位置</span><br><span class="line"></span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;hash_map&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">#include &quot;base/basictypes.h&quot;</span><br><span class="line">#include &quot;base/commandlineflags.h&quot;</span><br><span class="line">#include &quot;foo/public/bar.h&quot;</span><br></pre></td></tr></table></figure><p>例外：有时平台特定代码需要条件编译，这些代码可以放到其它 includes 之后，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;foo/public/fooserver.h&quot;</span><br><span class="line"></span><br><span class="line">#include &quot;base/port.h&quot;  // For LANG_CXX11.</span><br><span class="line"></span><br><span class="line">#ifdef LANG_CXX11</span><br><span class="line">#include &lt;initializer_list&gt;</span><br><span class="line">#endif  // LANG_CXX11</span><br></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>不应该使用 using 指示引入整个命名空间的标识符号。比如：using namespace xxx。</p><p>不要在头文件中使用命名空间别名除非显式标记内部命名空间使用。<br>因为任何在头文件中引入的命名空间都会成为公开API的一部分。<br>在 .cc 中使用别名缩短常用的命名空间，比如：namespace baz = ::foo::bar::baz;<br>如果要在 .h 中使用，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 在 .h 中使用别名缩短常用的命名空间</span><br><span class="line">namespace librarian &#123;</span><br><span class="line">namespace impl &#123;  // 仅限内部使用</span><br><span class="line">namespace sidetable = ::pipeline_diagnostics::sidetable;</span><br><span class="line">&#125;  // namespace impl</span><br><span class="line"></span><br><span class="line">inline void my_inline_function() &#123;</span><br><span class="line">  // 限制在一个函数中的命名空间别名</span><br><span class="line">  namespace baz = ::foo::bar::baz;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">&#125;  // namespace librarian</span><br></pre></td></tr></table></figure><p>注意：所有置于匿名命名空间的声明都具有内部链接性，<br>函数和变量可以经由声明为 static 拥有内部链接性。<br>这意味着你在这个文件中声明的这些标识符都不能在另一个文件中被访问。<br>即使两个文件声明了完全一样名字的标识符，它们所指向的实体实际上是完全不同的。<br>因此：推荐、鼓励在 .cc 中对于不需要在其他地方引用的标识符使用内部链接性声明，<br>但是不要在 .h 中使用。</p><p>另外举例而言，对于头文件 myproject/foo_bar.h , 应当使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">namespace myproject &#123;</span><br><span class="line">namespace foo_bar &#123;</span><br><span class="line">void Function1();</span><br><span class="line">void Function2();</span><br><span class="line">&#125;  // namespace foo_bar</span><br><span class="line">&#125;  // namespace myproject</span><br></pre></td></tr></table></figure><p>而非</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">namespace myproject &#123;</span><br><span class="line">class FooBar &#123;</span><br><span class="line"> public:</span><br><span class="line">  static void Function1();</span><br><span class="line">  static void Function2();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;  // namespace myproject</span><br></pre></td></tr></table></figure><p>注意：禁止定义静态储存周期非POD变量。</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>构造函数不得调用虚函数, 考虑使用明确的 Init() 方法或使用工厂模式。</p><p>在类型定义中, 类型转换运算符和单参数构造函数都应当用 explicit 进行标记。<br>例外： 拷贝和移动构造函数不应当被标记为 explicit, 因为它们并不执行类型转换。<br>不能以一个参数进行调用的构造函数不应当加上 explicit。<br>接受一个 std::initializer_list 作为参数的构造函数也应当省略 explicit，<br>以便支持拷贝初始化 (例如 MyType m = {1, 2};) 。</p><p>所有继承必须是 public 的。<br>对于重载的虚函数或虚析构函数, 使用 override,<br>或 (较不常用的) final 关键字显式地进行标记。</p><p>声明顺序：<br>类型 (包括 typedef, using 和嵌套的结构体与类),<br>常量<br>工厂函数<br>构造函数<br>赋值运算符<br>析构函数<br>其它函数<br>数据成员</p><p>接口类类名以 Interface 为后缀, 除提供带实现的虚析构函数。<br>静态成员函数外, 其他均为纯虚函数, 不定义非静态数据成员。<br>不提供构造函数, 提供的话, 声明为 protected。</p><h3 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h3><p>一些trick：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// Vector 接收了一个初始化列表。</span><br><span class="line">vector&lt;string&gt; v&#123;&quot;foo&quot;, &quot;bar&quot;&#125;;</span><br><span class="line"></span><br><span class="line">// 不考虑细节上的微妙差别，大致上相同。</span><br><span class="line">// 您可以任选其一。</span><br><span class="line">vector&lt;string&gt; v = &#123;&quot;foo&quot;, &quot;bar&quot;&#125;;</span><br><span class="line"></span><br><span class="line">// 可以配合 new 一起用。</span><br><span class="line">auto p = new vector&lt;string&gt;&#123;&quot;foo&quot;, &quot;bar&quot;&#125;;</span><br><span class="line"></span><br><span class="line">// map 接收了一些 pair, 列表初始化大显神威。</span><br><span class="line">map&lt;int, string&gt; m = &#123;&#123;1, &quot;one&quot;&#125;, &#123;2, &quot;2&quot;&#125;&#125;;</span><br><span class="line"></span><br><span class="line">// 初始化列表也可以用在返回类型上的隐式转换。</span><br><span class="line">vector&lt;int&gt; test_function() &#123; return &#123;1, 2, 3&#125;; &#125;</span><br><span class="line"></span><br><span class="line">// 初始化列表可迭代。</span><br><span class="line">for (int i : &#123;-1, -2, -3&#125;) &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 在函数调用里用列表初始化。</span><br><span class="line">void TestFunction2(vector&lt;int&gt; v) &#123;&#125;</span><br><span class="line">TestFunction2(&#123;1, 2, 3&#125;);</span><br></pre></td></tr></table></figure></p><p>用户自定义 std::initializer_list<t> ：</t></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class MyType &#123;</span><br><span class="line"> public:</span><br><span class="line">  // std::initializer_list 专门接收 init 列表。</span><br><span class="line">  // 得以值传递。</span><br><span class="line">  MyType(std::initializer_list&lt;int&gt; init_list) &#123;</span><br><span class="line">    for (int i : init_list) append(i);</span><br><span class="line">  &#125;</span><br><span class="line">  MyType&amp; operator=(std::initializer_list&lt;int&gt; init_list) &#123;</span><br><span class="line">    clear();</span><br><span class="line">    for (int i : init_list) append(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">MyType m&#123;2, 3, 5, 7&#125;;</span><br></pre></td></tr></table></figure><p>列表初始化也适用于常规数据类型的构造，<br>哪怕没有接收 std::initializer_list<t> 的构造函数：</t></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">double d&#123;1.23&#125;;</span><br><span class="line">// MyOtherType 没有 std::initializer_list 构造函数，</span><br><span class="line"> // 直接上接收常规类型的构造函数。</span><br><span class="line">class MyOtherType &#123;</span><br><span class="line"> public:</span><br><span class="line">  explicit MyOtherType(string);</span><br><span class="line">  MyOtherType(int, string);</span><br><span class="line">&#125;;</span><br><span class="line">MyOtherType m = &#123;1, &quot;b&quot;&#125;;</span><br><span class="line">// 不过如果构造函数是显式的（explict），您就不能用 `= &#123;&#125;` 了。</span><br><span class="line">MyOtherType m&#123;&quot;b&quot;&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Google-C-Style-Guide&quot;&gt;&lt;a href=&quot;#Google-C-Style-Guide&quot; class=&quot;headerlink&quot; title=&quot;Google C++ Style Guide&quot;&gt;&lt;/a&gt;Google C++ Style Guide&lt;/h2&gt;&lt;p&gt;刚进公司的时候看过一遍、现在需要重新再学习一下、顺便写点笔记。&lt;br&gt;（如果记得没错的话这份文档的名字改过了、以前叫coding style、现在叫style guide了）。&lt;br&gt;对于一些平时一直习惯使用的（比如#define保护）以及一些不推荐使用但是基本不会用到的（比如前置声明）就不再赘述了。&lt;br&gt;下面附上链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://google.github.io/styleguide/cppguide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;英文版链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;中文版链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="读书笔记" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="其他" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Google" scheme="http://tashi711.xyz/tags/Google/"/>
    
      <category term="C++" scheme="http://tashi711.xyz/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>日语中「条件表达方式」小结</title>
    <link href="http://tashi711.xyz/nihongo/benkyou/condition/"/>
    <id>http://tashi711.xyz/nihongo/benkyou/condition/</id>
    <published>2018-05-05T11:23:28.000Z</published>
    <updated>2018-05-05T11:54:57.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="归纳总结"><a href="#归纳总结" class="headerlink" title="归纳总结"></a>归纳总结</h2><h3 id="“～たら”和“～ば”"><a href="#“～たら”和“～ば”" class="headerlink" title="“～たら”和“～ば”"></a>“～たら”和“～ば”</h3><p>1、表示“如果”、“要是”，其中用“～ば”时后面的小句不能是意志、请求的形式（“～たいです”、“～てください”）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">雨が降ったら、窓を閉めてください。（“～降れば”不行）</span><br></pre></td></tr></table></figure><p>2、后面的小句是过去时，表示发现某种情况，不能用“～ば”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">窓を開けたら、富士山が見えました。（“～開ければ”不行）</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="“～と”"><a href="#“～と”" class="headerlink" title="“～と”"></a>“～と”</h3><p>1、用于前项一旦成立，后项就必然成为现实。此时用“～たら”也不算错，但不够自然。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">スイッチを押すと／押したら、電気がつきます。</span><br></pre></td></tr></table></figure><p>2、后面的小句不能是意志、请求的形式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">スイッチを押したら、すぐ部屋を出てください。（“～押すと”不行）</span><br></pre></td></tr></table></figure><p>3、后面的小句是过去时，表示发现某种情况，与“～たら”相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">窓を開けると、富士山が見えました。</span><br></pre></td></tr></table></figure><h3 id="“～なら”"><a href="#“～なら”" class="headerlink" title="“～なら”"></a>“～なら”</h3><p>1、多用于以对方的某种意愿为前提而提出某种建议，这种用法“～たら”“～ば”“～と”都不具备。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新鮮な魚を買いたいんですが…。</span><br><span class="line">—— 魚を買うなら、駅前のズーパーがいいですよ。</span><br></pre></td></tr></table></figure><p>2、前项不是对方的意志或愿望，而是其某种兴趣或嗜好时，与“～たら”可以通用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">野菜が嫌いなら／嫌いだったら、食べなくでもいいですよ。</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>新标日第二版第37课语法部分。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;归纳总结&quot;&gt;&lt;a href=&quot;#归纳总结&quot; class=&quot;headerlink&quot; title=&quot;归纳总结&quot;&gt;&lt;/a&gt;归纳总结&lt;/h2&gt;&lt;h3 id=&quot;“～たら”和“～ば”&quot;&gt;&lt;a href=&quot;#“～たら”和“～ば”&quot; class=&quot;headerlink&quot; title=&quot;“～たら”和“～ば”&quot;&gt;&lt;/a&gt;“～たら”和“～ば”&lt;/h3&gt;&lt;p&gt;1、表示“如果”、“要是”，其中用“～ば”时后面的小句不能是意志、请求的形式（“～たいです”、“～てください”）。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;雨が降ったら、窓を閉めてください。（“～降れば”不行）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2、后面的小句是过去时，表示发现某种情况，不能用“～ば”。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;窓を開けたら、富士山が見えました。（“～開ければ”不行）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ニホンゴ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/"/>
    
      <category term="ベンキョウ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/%E3%83%99%E3%83%B3%E3%82%AD%E3%83%A7%E3%82%A6/"/>
    
    
      <category term="コンディション" scheme="http://tashi711.xyz/tags/%E3%82%B3%E3%83%B3%E3%83%87%E3%82%A3%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 827. Making A Large Island」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-827/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-827/</id>
    <published>2018-05-02T11:34:17.000Z</published>
    <updated>2018-05-02T11:53:03.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/making-a-large-island/description/" target="_blank" rel="noopener">LeetCode 827. Making A Large Island</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定N×N的0-1方图（1≤N≤50），求问最多改变其中一个0到1之后最大的1的4-连通分量。<br>比如样例[[1, 0], [0, 1]]，结果为3。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>比较简单点的一道题目，先种子填充求出所有4-连通分量，记录下来（注意不同的连通分量间打上不同的tag）。<br>枚举每个0点，将其上下左右的<strong>不同</strong>连通分量的size加起来再加1的最大值输出即可。</p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><p>只需注意边界条件，以及没有0点时能够输出整个方图的size即可。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为 $O(N^2)$，因为种子填充最多将整张图遍历完。<br>空间复杂度为 $O(N^2)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> vst[N][N];</span><br><span class="line"><span class="keyword">int</span> cur;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">largestIsland</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">n = (<span class="keyword">int</span>)grid.size();</span><br><span class="line">m = (<span class="keyword">int</span>)grid[<span class="number">0</span>].size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">a[i + <span class="number">1</span>][j + <span class="number">1</span>] = grid[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> work();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line">node(<span class="keyword">int</span> _u = <span class="number">0</span>, <span class="keyword">int</span> _v = <span class="number">0</span>) : u(_u), v(_v) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">within_and_not_vst_then_emplace</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="built_in">vector</span>&lt;node&gt;&amp; adj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u &gt;= <span class="number">1</span> &amp;&amp; u &lt;= n &amp;&amp; v &gt;= <span class="number">1</span> &amp;&amp; v &lt;= m &amp;&amp; !vst[u][v] &amp;&amp; a[u][v] == <span class="number">1</span>) &#123;</span><br><span class="line">adj.emplace_back(u, v);</span><br><span class="line">vst[u][v] = cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floodfill</span><span class="params">(<span class="keyword">int</span> su, <span class="keyword">int</span> sv)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; q;</span><br><span class="line">q.emplace_back(su, sv);</span><br><span class="line">vst[su][sv] = cur;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)q.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = q[i].u, v = q[i].v;</span><br><span class="line">within_and_not_vst_then_emplace(u + <span class="number">1</span>, v, q);</span><br><span class="line">within_and_not_vst_then_emplace(u - <span class="number">1</span>, v, q);</span><br><span class="line">within_and_not_vst_then_emplace(u, v + <span class="number">1</span>, q);</span><br><span class="line">within_and_not_vst_then_emplace(u, v - <span class="number">1</span>, q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">int</span>)q.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">within_and_insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u &gt;= <span class="number">1</span> &amp;&amp; u &lt;= n &amp;&amp; v &gt;= <span class="number">1</span> &amp;&amp; v &lt;= m) &#123;</span><br><span class="line">s.insert(vst[u][v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vst, <span class="number">0</span>, <span class="keyword">sizeof</span> vst);</span><br><span class="line">cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">cnt.push_back(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (!vst[i][j] &amp;&amp; a[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">++cur;</span><br><span class="line"><span class="keyword">int</span> res = floodfill(i, j);</span><br><span class="line">ans = max(ans, res);</span><br><span class="line">cnt.push_back(res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">within_and_insert(i + <span class="number">1</span>, j, s);</span><br><span class="line">within_and_insert(i - <span class="number">1</span>, j, s);</span><br><span class="line">within_and_insert(i, j + <span class="number">1</span>, s);</span><br><span class="line">within_and_insert(i, j - <span class="number">1</span>, s);</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k : s) &#123;</span><br><span class="line">t += cnt[k];</span><br><span class="line">&#125;</span><br><span class="line">ans = max(ans, t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解题心得"><a href="#解题心得" class="headerlink" title="解题心得"></a>解题心得</h2><p>确实特别简单的一道题，最暴力的方法枚举所有0点的时候单独做种子填充。<br>也仅仅是4次方的复杂度，对这道题的规模来说不会超时。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/making-a-large-island/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 827. Making A Large Island&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;给定N×N的0-1方图（1≤N≤50），求问最多改变其中一个0到1之后最大的1的4-连通分量。&lt;br&gt;比如样例[[1, 0], [0, 1]]，结果为3。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="种子填充算法" scheme="http://tashi711.xyz/tags/%E7%A7%8D%E5%AD%90%E5%A1%AB%E5%85%85%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 818. Race Car」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-818/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-818/</id>
    <published>2018-04-28T06:54:25.000Z</published>
    <updated>2018-04-28T07:45:18.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/race-car/description/" target="_blank" rel="noopener">LeetCode 818. Race Car</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>一开始车在无限长的的直线的坐标0处，速度为+1，有两种指令A（加速）和R（反向）。<br>当接收指令A时，位置加上速度的值，然后速度乘2，当接收指令R时，速度反向且绝对值变为1，位置不变。<br>现在给定终点位置，求问到达这个位置的最少指令数。<br>比如样例输入3，输出2（AA: 0-&gt;1-&gt;3）；输入6，输出5（AAARA: 0-&gt;1-&gt;3-&gt;7-&gt;7-&gt;6）</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>比较难的一道题目，想了几天无果看了官方给的题解，还是很巧妙的。<br>用$A^k$表示$k$次连续的$A$，首先结尾一定不是$R$，开头的$RA^k$可以放到最后。<br>那么最终指令应该形如$A^{k_1}RA^{k_2}R…RA^{k_n}$。<br>容易得到奇数的$k_i$与偶数的$k_i$都是单调递减的，且各不相同。<br>并且到达或者超过目标位置之后继续执行$A$是没有意义的。<br>因此就有了DP的做法，如果下标位置是$2^k-1$，那么可以直接$A^k$达到。<br>否则有两种情况，一是拐两次到达，正面一定有一次最大限度的$2^k-1$，外加返回走$j$步（枚举$j$）。<br>二是直接走刚好超过$2^k-1$，回走到终点。</p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><p>边界条件f[0] = 0。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为 $O(NlogN)$。<br>空间复杂度为 $O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">11000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">racecar</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">0x7F</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= target; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> k = max_k(i);</span><br><span class="line"><span class="keyword">if</span> (i == (<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>) &#123;</span><br><span class="line">f[i] = k;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">f[i] = min(f[i], f[i - (<span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>)) + (<span class="number">1</span> &lt;&lt; j)] + k + j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span> - i &lt; i) &#123;</span><br><span class="line">f[i] = min(f[i], f[(<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span> - i] + k + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[target];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_k</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (k &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">++res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解题心得"><a href="#解题心得" class="headerlink" title="解题心得"></a>解题心得</h2><p>看起来是个N方的复杂度，但其实步长是指数级的。<br>因此在距离范围内枚举步长的量级只是对数级，可以用DP解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/race-car/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 818. Race Car&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;一开始车在无限长的的直线的坐标0处，速度为+1，有两种指令A（加速）和R（反向）。&lt;br&gt;当接收指令A时，位置加上速度的值，然后速度乘2，当接收指令R时，速度反向且绝对值变为1，位置不变。&lt;br&gt;现在给定终点位置，求问到达这个位置的最少指令数。&lt;br&gt;比如样例输入3，输出2（AA: 0-&amp;gt;1-&amp;gt;3）；输入6，输出5（AAARA: 0-&amp;gt;1-&amp;gt;3-&amp;gt;7-&amp;gt;7-&amp;gt;6）&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="动态规划" scheme="http://tashi711.xyz/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 810. Chalkboard XOR Game」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-810/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-810/</id>
    <published>2018-04-16T13:51:37.000Z</published>
    <updated>2018-04-18T13:20:59.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/chalkboard-xor-game/description/" target="_blank" rel="noopener">LeetCode 810. Chalkboard XOR Game</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定N个数，A和B轮流各取一个数，谁取之后剩下的所有数异或为0就输，A先取，如果一开始所有数异或为0也算A赢。<br>两个人同样聪明，求问A能不能赢。N范围为1到1000，数的范围0到2的16次方。<br>比如样例路线为 [1, 1, 2]，则A输。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>一开始想是一个博弈论的模型，不过建博弈树的复杂度貌似有点高。<br>其实仔细想想会发现如果当前有至少两种数剩下时，一定可以取到异或不为0的情况。<br>因此一定会取到最后一个数，直接判断数量的奇偶就好了，奇数个数一定是A输。<br>即使不用取到最后一个数，必输的状态也一定是奇数个相同的数。</p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><p>注意如果一开始所有数异或为0也算A赢，无论奇偶。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为 $O(N)$，主要是要扫一遍看看是不是一开始就是异或为0。<br>空间复杂度为 $O(1)$，不考虑输入的空间的话。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">xorGame</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = (<span class="keyword">int</span>)nums.size();</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">s ^= nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s == <span class="number">0</span> || n % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解题心得"><a href="#解题心得" class="headerlink" title="解题心得"></a>解题心得</h2><p>这道题非常有意思，10行代码解决。标签为Hard，且在短时间比赛里面。<br>数据范围也给的非常性感，1K、2的16次方，这些都给做题者放了一个烟雾弹。<br>以至于哪怕想到了正确的解法，也会怀疑自己一定是哪里想的不对。<br>所以难题是有难题的道理的，可以在任何方面难住做题者。<br>而这道难题解出来的时刻，并不是想出这个 $O(N)$ 算法的时刻，而是敢于提交这10行代码的时刻。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/chalkboard-xor-game/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 810. Chalkboard XOR Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;给定N个数，A和B轮流各取一个数，谁取之后剩下的所有数异或为0就输，A先取，如果一开始所有数异或为0也算A赢。&lt;br&gt;两个人同样聪明，求问A能不能赢。N范围为1到1000，数的范围0到2的16次方。&lt;br&gt;比如样例路线为 [1, 1, 2]，则A输。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="博弈论" scheme="http://tashi711.xyz/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>「Google Code Jam Round 1A 2018」参赛小结</title>
    <link href="http://tashi711.xyz/programming/reports/others/gcj-1a-2018/"/>
    <id>http://tashi711.xyz/programming/reports/others/gcj-1a-2018/</id>
    <published>2018-04-14T03:20:10.000Z</published>
    <updated>2018-04-14T05:08:30.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="比赛信息"><a href="#比赛信息" class="headerlink" title="比赛信息"></a>比赛信息</h2><blockquote><ul><li>链接：<a href="https://codejam.withgoogle.com/2018/challenges/0000000000007883/dashboard" target="_blank" rel="noopener">Google Code Jam Round 1A 2018</a></li><li>来源：Google Code Jam</li><li>时间：Start - Apr/14/2018 09:00 (UTC+8) | Length - 02:30</li><li>成绩：Solved - A(all), B(all), C(small case) | Standing - 800/5172</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="A-Waffle-Choppers"><a href="#A-Waffle-Choppers" class="headerlink" title="A. Waffle Choppers"></a><a href="https://codejam.withgoogle.com/2018/challenges/0000000000007883/dashboard" target="_blank" rel="noopener">A. Waffle Choppers</a></h3><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>假设总的巧克力有N个，那么 N mod ((H+1)(V+1)) != 0 一定是无解的。<br>分别扫描一遍纵向与横向，当分别达到N/(H+1)个与N/(V+1)个的地方一定是切的位置。<br>然后再检查是否切的每块为N/((H+1)(V+1))即可<br>时间复杂度为 $O(RC)$。</p><a id="more"></a><h4 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s[N];</span><br><span class="line"><span class="keyword">int</span> su[N], sv[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(su, <span class="number">0</span>, <span class="keyword">sizeof</span> su);</span><br><span class="line"><span class="built_in">memset</span>(sv, <span class="number">0</span>, <span class="keyword">sizeof</span> sv);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">s[i] = <span class="string">'\0'</span> + s[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> t = (s[i][j] == <span class="string">'@'</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">cnt += t;</span><br><span class="line">su[i] += t;</span><br><span class="line">sv[j] += t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; au, av;</span><br><span class="line"><span class="keyword">if</span> (cnt % ((u + <span class="number">1</span>) * (v + <span class="number">1</span>))) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPOSSIBLE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cu = cnt / (u + <span class="number">1</span>), cv = cnt / (v + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> avg = cnt / ((u + <span class="number">1</span>) * (v + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">int</span> cur_u = <span class="number">0</span>, cur_v = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">cur_u += su[i];</span><br><span class="line"><span class="keyword">if</span> (cur_u == cu) &#123;</span><br><span class="line">au.push_back(i);</span><br><span class="line">cur_u = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur_u &gt; cu) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPOSSIBLE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">cur_v += sv[i];</span><br><span class="line"><span class="keyword">if</span> (cur_v == cv) &#123;</span><br><span class="line">av.push_back(i);</span><br><span class="line">cur_v = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur_v &gt; cv) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPOSSIBLE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> bu = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= u; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> nu = au[i];</span><br><span class="line"><span class="keyword">int</span> bv = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= v; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> nv = av[j];</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> ii = bu + <span class="number">1</span>; ii &lt;= nu; ++ii) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> jj = bv + <span class="number">1</span>; jj &lt;= nv; ++jj) &#123;</span><br><span class="line">t += (s[ii][jj] == <span class="string">'@'</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (t != avg) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPOSSIBLE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">bv = nv;</span><br><span class="line">&#125;</span><br><span class="line">bu = nu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"POSSIBLE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, i);</span><br><span class="line">work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-Bit-Party"><a href="#B-Bit-Party" class="headerlink" title="B. Bit Party"></a><a href="https://codejam.withgoogle.com/2018/challenges/0000000000007883/dashboard/000000000002fff6" target="_blank" rel="noopener">B. Bit Party</a></h3><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>由于答案具有单调性（超过答案的时间都满足，小于答案的时间都不满足）。<br>因此考虑二分答案，验证的时候只需考虑当前时间每个cashier能解决的最多数量。<br>然后取最高的R个相加，超过B则说明可行。<br>时间的数量级为 $O((M_i+B)S_i+P_i)$，二分这个时间。<br>每次验证时需要对C个数量进行排序。<br>因此总的时间复杂度为 $O((C \log C) \log ((M_i+B)S_i+P_i))$。</p><h4 id="AC代码（C-）-1"><a href="#AC代码（C-）-1" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> M = <span class="number">0x7FFFFFFFFFFFFFFE</span>LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m[N], s[N], p[N];</span><br><span class="line"><span class="keyword">int</span> r, c, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; adj;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; ++i) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cur = min((<span class="keyword">long</span> <span class="keyword">long</span>)m[i], max(<span class="number">0L</span>L, (k - p[i]) / s[i]));</span><br><span class="line">adj.push_back(cur);</span><br><span class="line">&#125;</span><br><span class="line">sort(adj.begin(), adj.end(), greater&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;());</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i) &#123;</span><br><span class="line">sum += adj[i];</span><br><span class="line"><span class="keyword">if</span> (sum &gt;= b) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;m[i], &amp;s[i], &amp;p[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> u = <span class="number">1</span>, v = M;</span><br><span class="line"><span class="keyword">while</span> (u != v) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid = (u + v) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (check(mid)) &#123;</span><br><span class="line">v = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">u = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; u &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, i);</span><br><span class="line">work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-Edgy-Baking"><a href="#C-Edgy-Baking" class="headerlink" title="C. Edgy Baking"></a><a href="https://codejam.withgoogle.com/2018/challenges/0000000000007883/analysis/000000000002fff7" target="_blank" rel="noopener">C. Edgy Baking</a></h3><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>本题只解了小case，因为长宽都相同，所以所有面团可以看成等价的。<br>那么枚举有多少个切与多少个不切即可，切的周长增加的范围是长宽的最小值乘2到对角线长度乘2。<br>判断此时如果周长范围包括P，则能达到P，否则在没有爆掉的情况下能达到最长的周长。<br>时间复杂度为 $O(N)$。</p><h4 id="Small-Case代码（C-）"><a href="#Small-Case代码（C-）" class="headerlink" title="Small Case代码（C++）"></a>Small Case代码（C++）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w[N], h[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_small_case</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> u = w[<span class="number">1</span>], v = h[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> ori_p = <span class="number">2</span> * (u + v);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> min_p = ori_p + <span class="number">2</span> * min(u, v);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> max_p = ori_p + <span class="number">2</span> * <span class="built_in">sqrt</span>((<span class="keyword">long</span> <span class="keyword">double</span>)u * u + (<span class="keyword">long</span> <span class="keyword">double</span>)v * v);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> get_min = (n - i) * ori_p + i * min_p;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> get_max = (n - i) * ori_p + i * max_p;</span><br><span class="line"><span class="keyword">if</span> (get_min &lt;= p &amp;&amp; p &lt;= get_max) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">9</span>) &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (get_max &lt; p) &#123;</span><br><span class="line">ans = max(ans, get_max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">9</span>) &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;w[i], &amp;h[i]);</span><br><span class="line">&#125;</span><br><span class="line">solve_small_case();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, i);</span><br><span class="line">work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参赛心得"><a href="#参赛心得" class="headerlink" title="参赛心得"></a>参赛心得</h2><p>算是比较简单的一场初赛了，算法都比较裸。<br>至少在A轮过了就不用倒时差去做后面的两场了，还是很开心。<br>希望复赛也能保持比较好的状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;比赛信息&quot;&gt;&lt;a href=&quot;#比赛信息&quot; class=&quot;headerlink&quot; title=&quot;比赛信息&quot;&gt;&lt;/a&gt;比赛信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://codejam.withgoogle.com/2018/challenges/0000000000007883/dashboard&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google Code Jam Round 1A 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：Google Code Jam&lt;/li&gt;
&lt;li&gt;时间：Start - Apr/14/2018 09:00 (UTC+8) | Length - 02:30&lt;/li&gt;
&lt;li&gt;成绩：Solved - A(all), B(all), C(small case) | Standing - 800/5172&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;A-Waffle-Choppers&quot;&gt;&lt;a href=&quot;#A-Waffle-Choppers&quot; class=&quot;headerlink&quot; title=&quot;A. Waffle Choppers&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codejam.withgoogle.com/2018/challenges/0000000000007883/dashboard&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A. Waffle Choppers&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h4&gt;&lt;p&gt;假设总的巧克力有N个，那么 N mod ((H+1)(V+1)) != 0 一定是无解的。&lt;br&gt;分别扫描一遍纵向与横向，当分别达到N/(H+1)个与N/(V+1)个的地方一定是切的位置。&lt;br&gt;然后再检查是否切的每块为N/((H+1)(V+1))即可&lt;br&gt;时间复杂度为 $O(RC)$。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="其他" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="模拟" scheme="http://tashi711.xyz/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="二分答案" scheme="http://tashi711.xyz/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 815. Bus Routes」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-815/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-815/</id>
    <published>2018-04-13T11:28:45.000Z</published>
    <updated>2018-04-13T12:26:16.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/bus-routes/description/" target="_blank" rel="noopener">LeetCode 815. Bus Routes</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定N种路线，每种路线包含不超过M个站，站的编号为0到K-1，N范围为1到500，M的范围为1到500，K为$10^6$。<br>再给定起点S与终点T，求问从起点到终点最少坐几次车，一开始没有上车，如果不能到达返回-1。<br>比如样例路线为 [[1, 2, 7], [3, 6, 7]]，从1到6，最少需要2次：1 -&gt; 7 -&gt; 6。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先预处理每个编号的站有哪些路线经过，开一个 $O(K)$ 的vector来储存。<br>因为站的编号最多出现 $O(NM)$ 次，所以空间足够。<br>然后对每个编号的站，所有经过它的路线一定是可以互相到达的，且只用换乘1次。<br>于是我们构建一个新图，以路线为点，能够一次换乘互相到达的两个路线之间连边。<br>连边的时间最坏的情况下是每个路线都包含同样的 $O(M)$ 个站。<br>这样在这 $O(M)$ 个站上的两两路线连边总共需要 $O(N^2M)$ 的时间，依旧可以接受。<br>最终在建好的图上做一遍BFS求最短路即可。<br>这里有一个小技巧，因为BFS的起点是所有包含S的路线，而终点是所有包含T的路线。<br>这样的话初始化BFS队列以及判断是否达到终点比较繁琐。<br>可以添加两个点，编号为N和N+1，其中N能到达所有包含S的路线，而所有包含T的路线能到达N+1。<br>这样就可以以点N为起点，以N+1为终点来计算了。<br>最终如果发现新构建的图N与N+1不连通，返回-1。</p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><p>注意如果S==T，那么其实是不用上车的，应该返回0。<br>但按照前面的算法会返回1（从N到这个路线，再从这个路线到N+1），所以需要特判一下。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度的瓶颈在建图处，为 $O(N^2M)$。<br>空间复杂度为 $O(N^2+NM+K)$，其中 $O(N^2)$ 是图的空间，其余的部分上面分析过了。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">550</span>, M = <span class="number">1100000</span>, K = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[M];</span><br><span class="line"><span class="keyword">int</span> f[N][N];</span><br><span class="line"><span class="keyword">int</span> d[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numBusesToDestination</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; routes, <span class="keyword">int</span> S, <span class="keyword">int</span> T)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</span><br><span class="line">adj[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> work(routes, S, T);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; a, <span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (st == ed) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n = (<span class="keyword">int</span>)a.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> m = (<span class="keyword">int</span>)a[i].size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">adj[a[i][j]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> m = (<span class="keyword">int</span>)adj[i].size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m - <span class="number">1</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; m; ++k) &#123;</span><br><span class="line"><span class="keyword">int</span> u = adj[i][j], v = adj[i][k];</span><br><span class="line">f[u][v] = f[v][u] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)adj[st].size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = adj[st][i];</span><br><span class="line">f[n][u] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)adj[ed].size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = adj[ed][i];</span><br><span class="line">f[u][n + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(n);</span><br><span class="line">d[n] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> u = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n + <span class="number">2</span>; ++v) &#123;</span><br><span class="line"><span class="keyword">if</span> (f[u][v] &amp;&amp; d[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">q.push(v);</span><br><span class="line"><span class="keyword">if</span> (v == n + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> d[v] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解题心得"><a href="#解题心得" class="headerlink" title="解题心得"></a>解题心得</h2><p>虽然按照官方的说法最好不要使用全局变量。<br>但是因为这道题如果把 $O(K)$ 个vector开在局部就会出现问题。<br>于是还是使用了全局变量，注意需要初始化这些全局变量，</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/bus-routes/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 815. Bus Routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;给定N种路线，每种路线包含不超过M个站，站的编号为0到K-1，N范围为1到500，M的范围为1到500，K为$10^6$。&lt;br&gt;再给定起点S与终点T，求问从起点到终点最少坐几次车，一开始没有上车，如果不能到达返回-1。&lt;br&gt;比如样例路线为 [[1, 2, 7], [3, 6, 7]]，从1到6，最少需要2次：1 -&amp;gt; 7 -&amp;gt; 6。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="构图" scheme="http://tashi711.xyz/tags/%E6%9E%84%E5%9B%BE/"/>
    
      <category term="BFS" scheme="http://tashi711.xyz/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>「Codeforces Round #472 Div. 2」参赛小结</title>
    <link href="http://tashi711.xyz/programming/reports/codeforces/round-472-div-2/"/>
    <id>http://tashi711.xyz/programming/reports/codeforces/round-472-div-2/</id>
    <published>2018-04-06T01:57:24.000Z</published>
    <updated>2018-04-06T18:19:13.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="比赛信息"><a href="#比赛信息" class="headerlink" title="比赛信息"></a>比赛信息</h2><blockquote><ul><li>链接：<a href="http://codeforces.com/contest/957" target="_blank" rel="noopener">Codeforces Round #472 (rated, Div. 2, based on VK Cup 2018 Round 2)</a></li><li>来源：Codeforces</li><li>时间：Start - Mar/24/2018 23:35 (UTC+8) | Length - 02:15</li><li>成绩：Solved - A, B, C, D | Standing - 257/5016 | Rating - 1819→1842 (+23)</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="A-Tritonic-Iridescence-957-A"><a href="#A-Tritonic-Iridescence-957-A" class="headerlink" title="A. Tritonic Iridescence (957 - A)"></a><a href="http://codeforces.com/contest/957/problem/A" target="_blank" rel="noopener">A. Tritonic Iridescence (957 - A)</a></h3><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>按照以下顺序依次判断即可：<br>如果已经有连续两个相同的非“?”返回“No”。<br>如果长度为1 ? “?”返回“Yes” : 非“?”返回“No”。<br>如果有两个连续的“?”返回“Yes”。<br>如果任意一端为“?”返回“Yes”。<br>如果存在问号两边为同色返回“Yes”。<br>其他情况返回“No”。<br>时间复杂度为 $O(N)$。</p><a id="more"></a><h4 id="AC代码（GNU-G-17-7-2-0）"><a href="#AC代码（GNU-G-17-7-2-0）" class="headerlink" title="AC代码（GNU G++17 7.2.0）"></a>AC代码（GNU G++17 7.2.0）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == s[i + <span class="number">1</span>] &amp;&amp; s[i] != <span class="string">'?'</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'?'</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == s[i + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'?'</span> || s[n - <span class="number">1</span>] == <span class="string">'?'</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">'?'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i - <span class="number">1</span>] == s[i + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-Mystical-Mosaic-957-B"><a href="#B-Mystical-Mosaic-957-B" class="headerlink" title="B. Mystical Mosaic (957 - B)"></a><a href="http://codeforces.com/contest/957/problem/B" target="_blank" rel="noopener">B. Mystical Mosaic (957 - B)</a></h3><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>依次考虑每一行，假设当前考虑第i行。<br>第i行上有“#”的列是取第i行这一轮必须且仅须取的。<br>那么这些列上有“#”的行也是这一轮必须且仅须取的。<br>检查这组行、列是否在交点处都是“#”且其他地方都是“.”。<br>若满足要求，则继续考虑后面没考虑过的行，否则返回“No”。<br>所有行检查完毕后返回“Yes”。<br>时间复杂度为 $O(N^4)$。</p><h4 id="AC代码（GNU-G-17-7-2-0）-1"><a href="#AC代码（GNU-G-17-7-2-0）-1" class="headerlink" title="AC代码（GNU G++17 7.2.0）"></a>AC代码（GNU G++17 7.2.0）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"><span class="keyword">bool</span> vst[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">a[i][j + <span class="number">1</span>] = (s[j] == <span class="string">'.'</span> ? <span class="number">1</span> : <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (vst[i]) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">vst[i] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">bool</span> now[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">adj.push_back(j);</span><br><span class="line">now[j] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">now[j] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="keyword">int</span>)adj.size(); ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> u = adj[j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (!vst[k] &amp;&amp; a[k][u] == <span class="number">2</span>) &#123;</span><br><span class="line">vst[k] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">1</span>; p &lt;= m; ++p) &#123;</span><br><span class="line"><span class="keyword">if</span> ((a[k][p] == <span class="number">1</span>) != (now[p] == <span class="literal">false</span>)) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-Three-level-Laser-957-C"><a href="#C-Three-level-Laser-957-C" class="headerlink" title="C. Three-level Laser (957 - C)"></a><a href="http://codeforces.com/contest/957/problem/C" target="_blank" rel="noopener">C. Three-level Laser (957 - C)</a></h3><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>考虑每个点作为i，那么j一定在i紧跟的后一个位置最优，这时k越远越好。<br>每次i往后移，就将k移到离i不超过U的最远位置。<br>k最多移动n次，因此每次移动k的均摊复杂度只有 $O(1)$。<br>注意每次更新的时候i、j、k这3个点不重合即可。<br>总的时间复杂度为 $O(N)$。</p><h4 id="AC代码（GNU-G-17-7-2-0）-2"><a href="#AC代码（GNU-G-17-7-2-0）-2" class="headerlink" title="AC代码（GNU G++17 7.2.0）"></a>AC代码（GNU G++17 7.2.0）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> n, u;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; u;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> ans = <span class="number">-1.</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (pos != n &amp;&amp; a[pos + <span class="number">1</span>] - a[i] &lt;= u) &#123;</span><br><span class="line">pos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pos &gt; i + <span class="number">1</span>) &#123;</span><br><span class="line">ans = max(ans, (<span class="keyword">long</span> <span class="keyword">double</span>)(a[pos] - a[i + <span class="number">1</span>]) / (a[pos] - a[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">15</span>) &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-Riverside-Curio-957-D"><a href="#D-Riverside-Curio-957-D" class="headerlink" title="D. Riverside Curio (957 - D)"></a><a href="http://codeforces.com/contest/957/problem/D" target="_blank" rel="noopener">D. Riverside Curio (957 - D)</a></h3><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>先从后往前扫一遍，记录如果要满足当前位置的要求，前面一天至少要有几条线。<br>然后再从前往后扫即可，如果为了满足当前位置的要求需要加一条就往下加一条（这一天没有线累加到答案上）。<br>否则最优的放法是恰好在某条线上，答案加的最少且不用增加新的线，除非根据之前预处理的记录发现必须要增加。<br>这时相当于就在中间的那个位置增加一条，并且最终答案也要加1。<br>总的时间复杂度为 $O(N)$。</p><h4 id="AC代码（GNU-G-17-7-2-0）-3"><a href="#AC代码（GNU-G-17-7-2-0）-3" class="headerlink" title="AC代码（GNU G++17 7.2.0）"></a>AC代码（GNU G++17 7.2.0）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> u[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> need = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">need = u[i] = max(a[i], need);</span><br><span class="line">need--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] == cnt) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ans += cnt - a[i] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (u[i + <span class="number">1</span>] &gt; cnt) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参赛心得"><a href="#参赛心得" class="headerlink" title="参赛心得"></a>参赛心得</h2><p>虽然做出了4道题，不过都挺水的，rating也只涨了一点点。<br>貌似除了第一题都是VK Cup的原题，相当于只做了这场比赛最水的一半（一共6道题）。<br>希望赶紧做到Div. 1去。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;比赛信息&quot;&gt;&lt;a href=&quot;#比赛信息&quot; class=&quot;headerlink&quot; title=&quot;比赛信息&quot;&gt;&lt;/a&gt;比赛信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;http://codeforces.com/contest/957&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces Round #472 (rated, Div. 2, based on VK Cup 2018 Round 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：Codeforces&lt;/li&gt;
&lt;li&gt;时间：Start - Mar/24/2018 23:35 (UTC+8) | Length - 02:15&lt;/li&gt;
&lt;li&gt;成绩：Solved - A, B, C, D | Standing - 257/5016 | Rating - 1819→1842 (+23)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;A-Tritonic-Iridescence-957-A&quot;&gt;&lt;a href=&quot;#A-Tritonic-Iridescence-957-A&quot; class=&quot;headerlink&quot; title=&quot;A. Tritonic Iridescence (957 - A)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/957/problem/A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A. Tritonic Iridescence (957 - A)&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h4&gt;&lt;p&gt;按照以下顺序依次判断即可：&lt;br&gt;如果已经有连续两个相同的非“?”返回“No”。&lt;br&gt;如果长度为1 ? “?”返回“Yes” : 非“?”返回“No”。&lt;br&gt;如果有两个连续的“?”返回“Yes”。&lt;br&gt;如果任意一端为“?”返回“Yes”。&lt;br&gt;如果存在问号两边为同色返回“Yes”。&lt;br&gt;其他情况返回“No”。&lt;br&gt;时间复杂度为 $O(N)$。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="Codeforces" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/Codeforces/"/>
    
    
      <category term="模拟" scheme="http://tashi711.xyz/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>「自動詞、他動詞」区分</title>
    <link href="http://tashi711.xyz/nihongo/benkyou/jitadoushi/"/>
    <id>http://tashi711.xyz/nihongo/benkyou/jitadoushi/</id>
    <published>2018-04-05T17:03:55.000Z</published>
    <updated>2018-04-06T18:22:27.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一般经验"><a href="#一般经验" class="headerlink" title="一般经验"></a>一般经验</h2><h3 id="1、以「す」结尾的动词都是他动词，其对应的动词是自动词"><a href="#1、以「す」结尾的动词都是他动词，其对应的动词是自动词" class="headerlink" title="1、以「す」结尾的动词都是他动词，其对应的动词是自动词"></a>1、以「す」结尾的动词都是他动词，其对应的动词是自动词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">揺らす　→　揺れる　　</span><br><span class="line">鳴らす　→　鳴る　　</span><br><span class="line">散らす　→　散る</span><br></pre></td></tr></table></figure><h3 id="2、大多数「え段＋る」的动词是他动词，其对应的一类动词（五段动词）或者「あ段＋る」的动词是自动词"><a href="#2、大多数「え段＋る」的动词是他动词，其对应的一类动词（五段动词）或者「あ段＋る」的动词是自动词" class="headerlink" title="2、大多数「え段＋る」的动词是他动词，其对应的一类动词（五段动词）或者「あ段＋る」的动词是自动词"></a>2、大多数「え段＋る」的动词是他动词，其对应的一类动词（五段动词）或者「あ段＋る」的动词是自动词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">始める　　→　始まる　</span><br><span class="line">まとめる　→　まとまる　</span><br><span class="line">かける　　→　かかる　</span><br><span class="line">つける　　→　つく</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="3、所有可能动词都是自动词"><a href="#3、所有可能动词都是自动词" class="headerlink" title="3、所有可能动词都是自动词"></a>3、所有可能动词都是自动词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">書ける</span><br><span class="line">見える</span><br><span class="line">聞こえる</span><br></pre></td></tr></table></figure><h3 id="4、大多以「れる」结尾的二类动词是自动词，其相对的动词是他动词"><a href="#4、大多以「れる」结尾的二类动词是自动词，其相对的动词是他动词" class="headerlink" title="4、大多以「れる」结尾的二类动词是自动词，其相对的动词是他动词"></a>4、大多以「れる」结尾的二类动词是自动词，其相对的动词是他动词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">分かつ　→　分かれる</span><br><span class="line">放つ　　→　放れる　</span><br><span class="line">零す　　→　零れる</span><br><span class="line">倒す　　→　倒れる</span><br></pre></td></tr></table></figure><h3 id="5、形容词加「む、める」的动词大多是他动词，加「まる」的是自动词"><a href="#5、形容词加「む、める」的动词大多是他动词，加「まる」的是自动词" class="headerlink" title="5、形容词加「む、める」的动词大多是他动词，加「まる」的是自动词"></a>5、形容词加「む、める」的动词大多是他动词，加「まる」的是自动词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">悲しむ</span><br><span class="line">楽しむ</span><br><span class="line">高める　→　高まる</span><br><span class="line">強める　→　強まる</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.cdteikyo.com/detail/83-148-277.html" target="_blank" rel="noopener">什么是他动词自动词？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一般经验&quot;&gt;&lt;a href=&quot;#一般经验&quot; class=&quot;headerlink&quot; title=&quot;一般经验&quot;&gt;&lt;/a&gt;一般经验&lt;/h2&gt;&lt;h3 id=&quot;1、以「す」结尾的动词都是他动词，其对应的动词是自动词&quot;&gt;&lt;a href=&quot;#1、以「す」结尾的动词都是他动词，其对应的动词是自动词&quot; class=&quot;headerlink&quot; title=&quot;1、以「す」结尾的动词都是他动词，其对应的动词是自动词&quot;&gt;&lt;/a&gt;1、以「す」结尾的动词都是他动词，其对应的动词是自动词&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;揺らす　→　揺れる　　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;鳴らす　→　鳴る　　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;散らす　→　散る&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2、大多数「え段＋る」的动词是他动词，其对应的一类动词（五段动词）或者「あ段＋る」的动词是自动词&quot;&gt;&lt;a href=&quot;#2、大多数「え段＋る」的动词是他动词，其对应的一类动词（五段动词）或者「あ段＋る」的动词是自动词&quot; class=&quot;headerlink&quot; title=&quot;2、大多数「え段＋る」的动词是他动词，其对应的一类动词（五段动词）或者「あ段＋る」的动词是自动词&quot;&gt;&lt;/a&gt;2、大多数「え段＋る」的动词是他动词，其对应的一类动词（五段动词）或者「あ段＋る」的动词是自动词&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;始める　　→　始まる　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;まとめる　→　まとまる　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;かける　　→　かかる　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;つける　　→　つく&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ニホンゴ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/"/>
    
      <category term="ベンキョウ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/%E3%83%99%E3%83%B3%E3%82%AD%E3%83%A7%E3%82%A6/"/>
    
    
      <category term="動詞" scheme="http://tashi711.xyz/tags/%E5%8B%95%E8%A9%9E/"/>
    
  </entry>
  
</feed>
