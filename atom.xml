<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tashi711的博客</title>
  
  <subtitle>過去（きのう）に傷付きながらも、信じ続ける理想（ゆめ）を求める。いつか無限（なないろ）に輝き放って、青空（そら）に橋を描く。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tashi711.xyz/"/>
  <updated>2018-05-08T12:53:02.199Z</updated>
  <id>http://tashi711.xyz/</id>
  
  <author>
    <name>Tashi711</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「焚吐 / みやかわくん - 神風エクスプレス」鑑賞</title>
    <link href="http://tashi711.xyz/nihongo/uta/kamikaze-ekusupuresu/"/>
    <id>http://tashi711.xyz/nihongo/uta/kamikaze-ekusupuresu/</id>
    <published>2018-05-08T12:37:54.000Z</published>
    <updated>2018-05-08T12:53:02.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="歌曲信息"><a href="#歌曲信息" class="headerlink" title="歌曲信息"></a>歌曲信息</h2><blockquote><ul><li>歌曲：神風エクスプレス</li><li>歌手：焚吐 / みやかわくん</li><li>作词：焚吐</li><li>作曲：焚吐 / みやかわくん</li><li>专辑：神風エクスプレス（2018年2月14日发行）</li></ul></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>柯南最新的ED、听起来很有feeling、就稍微译了译。<br>焚吐的声音好好听哇、花痴ing…</p><a id="more"></a><h2 id="假名歌词"><a href="#假名歌词" class="headerlink" title="假名歌词"></a>假名歌词</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">ああ　霞（かすみ）の中（なか）　伸（の）ばした腕（うで）が</span><br><span class="line">少（すこ）し震（ふる）えている　海岸線午前四時（かいがんせんごぜんよんじ）</span><br><span class="line"></span><br><span class="line">ああ　不安（ふあん）と高揚感（こうようかん）　一緒（いっしょ）くたにして</span><br><span class="line">波（なみ）は揺（ゆ）らめいていた</span><br><span class="line"></span><br><span class="line">未来（みらい）はそう　封（ふう）を切（き）る前（まえ）の前（まえ）</span><br><span class="line">出来上（できあ）がってさえいない原材料（げんざいりょう）</span><br><span class="line"></span><br><span class="line">「まだまだ足掻（あが）ける　ここから駆（か）けるんだ」って</span><br><span class="line">君（きみ）の　君（きみ）の　一声（ひとこえ）で全（すべ）て始（はじ）まる</span><br><span class="line"></span><br><span class="line">一二（いちに）の三（さん）で飛（と）んでいこう</span><br><span class="line">目（め）は閉（と）じていて構（かま）わない</span><br><span class="line">熱（ねつ）を帯（お）びる夢（ゆめ）</span><br><span class="line"></span><br><span class="line">瞼（まぶた）の裏（うら）でもうずっと</span><br><span class="line">思（おも）い描（えが）いてきたエクスプレス</span><br><span class="line">とうとう発進（はっしん）です</span><br><span class="line"></span><br><span class="line">ああ　明（あ）けた空（そら）が　誘（いざな）っている</span><br><span class="line">白（しろ）いアーチを成（な）して　僕（ぼく）らを待（ま）ち構（かま）える</span><br><span class="line"></span><br><span class="line">「その期待（きたい）こそが　足枷（あしかせ）なんだ</span><br><span class="line">どうか放（ほう）っといてくれよ」</span><br><span class="line"></span><br><span class="line">いつだってそう　忙（いそが）しい生（い）き物（もの）だ</span><br><span class="line">頼（たの）まれちゃいないのに今日（きょう）だって</span><br><span class="line"></span><br><span class="line">何十回目（なにじゅっかいめ）かの　愛（あい）や夢（ゆめ）に四苦八苦（しくはっく）</span><br><span class="line">正直（しょうじき）　うんざり　することもあるけれど</span><br><span class="line"></span><br><span class="line">地平（ちへい）の向（む）こう一心（いっしん）に</span><br><span class="line">目（め）を凝（こ）らすのも無駄（むだ）ではない</span><br><span class="line">高（たか）らかに歌（うた）え</span><br><span class="line"></span><br><span class="line">僕（ぼく）らが明日（あす）を見（み）ていた</span><br><span class="line">丁度（ちょうど）そのとき明日（あした）の方（ほう）</span><br><span class="line">も僕（ぼく）らを見（み）ていた</span><br><span class="line"></span><br><span class="line">願（ねが）いだって　未来（みらい）だって</span><br><span class="line">僕（ぼく）らはむしろ曖昧（あいまい）な方（ほう）が良（よ）い</span><br><span class="line">飛（と）び方（かた）もなんとなくで良（よ）い</span><br><span class="line"></span><br><span class="line">きっときっと　きっときっと　きっときっと</span><br><span class="line">そっちの方（ほう）が長（なが）く飛（と）べるや</span><br><span class="line"></span><br><span class="line">一二（いちに）の三（さん）で合図（あいず）して</span><br><span class="line">目（め）は閉（と）じていて構（かま）わない</span><br><span class="line">熱（ねつ）を帯（お）びる夢（ゆめ）</span><br><span class="line"></span><br><span class="line">あらゆる闇（やみ）を消（け）し去（さ）る</span><br><span class="line">ような神風（かみかぜ）エクスプレス</span><br><span class="line">とうとう発進（はっしん）です</span><br></pre></td></tr></table></figure><h2 id="其他感想"><a href="#其他感想" class="headerlink" title="其他感想"></a>其他感想</h2><p>焚吐之前唱过柯南的ED、声音很有特点。<br>みやかわくん稍微冷门点、是存活在二次元的翻唱歌手。<br>反正之后柯南的新曲好听都都会稍微译一译^_^…</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;歌曲信息&quot;&gt;&lt;a href=&quot;#歌曲信息&quot; class=&quot;headerlink&quot; title=&quot;歌曲信息&quot;&gt;&lt;/a&gt;歌曲信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;歌曲：神風エクスプレス&lt;/li&gt;
&lt;li&gt;歌手：焚吐 / みやかわくん&lt;/li&gt;
&lt;li&gt;作词：焚吐&lt;/li&gt;
&lt;li&gt;作曲：焚吐 / みやかわくん&lt;/li&gt;
&lt;li&gt;专辑：神風エクスプレス（2018年2月14日发行）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;柯南最新的ED、听起来很有feeling、就稍微译了译。&lt;br&gt;焚吐的声音好好听哇、花痴ing…&lt;/p&gt;
    
    </summary>
    
      <category term="ニホンゴ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/"/>
    
      <category term="ウタ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/%E3%82%A6%E3%82%BF/"/>
    
    
      <category term="名侦探柯南" scheme="http://tashi711.xyz/tags/%E5%90%8D%E4%BE%A6%E6%8E%A2%E6%9F%AF%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>「Google C++ Style Guide」小结</title>
    <link href="http://tashi711.xyz/programming/notes/others/google-code-style/"/>
    <id>http://tashi711.xyz/programming/notes/others/google-code-style/</id>
    <published>2018-05-06T03:17:59.000Z</published>
    <updated>2018-05-23T14:05:38.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Google-C-Style-Guide"><a href="#Google-C-Style-Guide" class="headerlink" title="Google C++ Style Guide"></a>Google C++ Style Guide</h2><p>刚进公司的时候看过一遍、现在需要重新再学习一下、顺便写点笔记。<br>（如果记得没错的话这份文档的名字改过了、以前叫coding style、现在叫style guide了）。<br>对于一些平时一直习惯使用的（比如#define保护）以及一些不推荐使用但是基本不会用到的（比如前置声明）就不再赘述了。<br>下面附上链接：</p><ul><li><a href="http://google.github.io/styleguide/cppguide.html" target="_blank" rel="noopener">英文版链接</a></li><li><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/" target="_blank" rel="noopener">中文版链接</a></li></ul><a id="more"></a><h3 id="include的路径及顺序"><a href="#include的路径及顺序" class="headerlink" title="#include的路径及顺序"></a>#include的路径及顺序</h3><p>项目内头文件应按照项目源代码目录树结构排列, 避免使用 UNIX 特殊的快捷目录 . (当前目录) 或 .. (上级目录)。<br>xxx.cc 中包含头文件的次序如下(按字母顺序分别对每种类型的头文件进行二次排序):</p><ol><li>xxx.h</li><li>C 系统文件</li><li>C++ 系统文件</li><li>其他库的 .h 文件</li><li>本项目内 .h 文件</li></ol><p>举例来说, google-awesome-project/src/foo/internal/fooserver.cc 的包含次序如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;foo/public/fooserver.h&quot; // 优先位置</span><br><span class="line"></span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;hash_map&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">#include &quot;base/basictypes.h&quot;</span><br><span class="line">#include &quot;base/commandlineflags.h&quot;</span><br><span class="line">#include &quot;foo/public/bar.h&quot;</span><br></pre></td></tr></table></figure><p>例外：有时平台特定代码需要条件编译，这些代码可以放到其它 includes 之后，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;foo/public/fooserver.h&quot;</span><br><span class="line"></span><br><span class="line">#include &quot;base/port.h&quot;  // For LANG_CXX11.</span><br><span class="line"></span><br><span class="line">#ifdef LANG_CXX11</span><br><span class="line">#include &lt;initializer_list&gt;</span><br><span class="line">#endif  // LANG_CXX11</span><br></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>不应该使用 using 指示引入整个命名空间的标识符号。比如：using namespace xxx。</p><p>不要在头文件中使用命名空间别名除非显式标记内部命名空间使用。<br>因为任何在头文件中引入的命名空间都会成为公开API的一部分。<br>在 .cc 中使用别名缩短常用的命名空间，比如：namespace baz = ::foo::bar::baz;<br>如果要在 .h 中使用，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 在 .h 中使用别名缩短常用的命名空间</span><br><span class="line">namespace librarian &#123;</span><br><span class="line">namespace impl &#123;  // 仅限内部使用</span><br><span class="line">namespace sidetable = ::pipeline_diagnostics::sidetable;</span><br><span class="line">&#125;  // namespace impl</span><br><span class="line"></span><br><span class="line">inline void my_inline_function() &#123;</span><br><span class="line">  // 限制在一个函数中的命名空间别名</span><br><span class="line">  namespace baz = ::foo::bar::baz;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">&#125;  // namespace librarian</span><br></pre></td></tr></table></figure><p>注意：所有置于匿名命名空间的声明都具有内部链接性，<br>函数和变量可以经由声明为 static 拥有内部链接性。<br>这意味着你在这个文件中声明的这些标识符都不能在另一个文件中被访问。<br>即使两个文件声明了完全一样名字的标识符，它们所指向的实体实际上是完全不同的。<br>因此：推荐、鼓励在 .cc 中对于不需要在其他地方引用的标识符使用内部链接性声明，<br>但是不要在 .h 中使用。</p><p>另外举例而言，对于头文件 myproject/foo_bar.h , 应当使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">namespace myproject &#123;</span><br><span class="line">namespace foo_bar &#123;</span><br><span class="line">void Function1();</span><br><span class="line">void Function2();</span><br><span class="line">&#125;  // namespace foo_bar</span><br><span class="line">&#125;  // namespace myproject</span><br></pre></td></tr></table></figure><p>而非</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">namespace myproject &#123;</span><br><span class="line">class FooBar &#123;</span><br><span class="line"> public:</span><br><span class="line">  static void Function1();</span><br><span class="line">  static void Function2();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;  // namespace myproject</span><br></pre></td></tr></table></figure><p>注意：禁止定义静态储存周期非POD变量。</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>构造函数不得调用虚函数, 考虑使用明确的 Init() 方法或使用工厂模式。</p><p>在类型定义中, 类型转换运算符和单参数构造函数都应当用 explicit 进行标记。<br>例外： 拷贝和移动构造函数不应当被标记为 explicit, 因为它们并不执行类型转换。<br>不能以一个参数进行调用的构造函数不应当加上 explicit。<br>接受一个 std::initializer_list 作为参数的构造函数也应当省略 explicit，<br>以便支持拷贝初始化 (例如 MyType m = {1, 2};) 。</p><p>所有继承必须是 public 的。<br>对于重载的虚函数或虚析构函数, 使用 override,<br>或 (较不常用的) final 关键字显式地进行标记。</p><p>声明顺序：<br>类型 (包括 typedef, using 和嵌套的结构体与类),<br>常量<br>工厂函数<br>构造函数<br>赋值运算符<br>析构函数<br>其它函数<br>数据成员</p><p>接口类类名以 Interface 为后缀, 除提供带实现的虚析构函数。<br>静态成员函数外, 其他均为纯虚函数, 不定义非静态数据成员。<br>不提供构造函数, 提供的话, 声明为 protected。</p><h3 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h3><p>一些trick：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// Vector 接收了一个初始化列表。</span><br><span class="line">vector&lt;string&gt; v&#123;&quot;foo&quot;, &quot;bar&quot;&#125;;</span><br><span class="line"></span><br><span class="line">// 不考虑细节上的微妙差别，大致上相同。</span><br><span class="line">// 您可以任选其一。</span><br><span class="line">vector&lt;string&gt; v = &#123;&quot;foo&quot;, &quot;bar&quot;&#125;;</span><br><span class="line"></span><br><span class="line">// 可以配合 new 一起用。</span><br><span class="line">auto p = new vector&lt;string&gt;&#123;&quot;foo&quot;, &quot;bar&quot;&#125;;</span><br><span class="line"></span><br><span class="line">// map 接收了一些 pair, 列表初始化大显神威。</span><br><span class="line">map&lt;int, string&gt; m = &#123;&#123;1, &quot;one&quot;&#125;, &#123;2, &quot;2&quot;&#125;&#125;;</span><br><span class="line"></span><br><span class="line">// 初始化列表也可以用在返回类型上的隐式转换。</span><br><span class="line">vector&lt;int&gt; test_function() &#123; return &#123;1, 2, 3&#125;; &#125;</span><br><span class="line"></span><br><span class="line">// 初始化列表可迭代。</span><br><span class="line">for (int i : &#123;-1, -2, -3&#125;) &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 在函数调用里用列表初始化。</span><br><span class="line">void TestFunction2(vector&lt;int&gt; v) &#123;&#125;</span><br><span class="line">TestFunction2(&#123;1, 2, 3&#125;);</span><br></pre></td></tr></table></figure></p><p>用户自定义 std::initializer_list<t> ：</t></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class MyType &#123;</span><br><span class="line"> public:</span><br><span class="line">  // std::initializer_list 专门接收 init 列表。</span><br><span class="line">  // 得以值传递。</span><br><span class="line">  MyType(std::initializer_list&lt;int&gt; init_list) &#123;</span><br><span class="line">    for (int i : init_list) append(i);</span><br><span class="line">  &#125;</span><br><span class="line">  MyType&amp; operator=(std::initializer_list&lt;int&gt; init_list) &#123;</span><br><span class="line">    clear();</span><br><span class="line">    for (int i : init_list) append(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">MyType m&#123;2, 3, 5, 7&#125;;</span><br></pre></td></tr></table></figure><p>列表初始化也适用于常规数据类型的构造，<br>哪怕没有接收 std::initializer_list<t> 的构造函数：</t></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">double d&#123;1.23&#125;;</span><br><span class="line">// MyOtherType 没有 std::initializer_list 构造函数，</span><br><span class="line"> // 直接上接收常规类型的构造函数。</span><br><span class="line">class MyOtherType &#123;</span><br><span class="line"> public:</span><br><span class="line">  explicit MyOtherType(string);</span><br><span class="line">  MyOtherType(int, string);</span><br><span class="line">&#125;;</span><br><span class="line">MyOtherType m = &#123;1, &quot;b&quot;&#125;;</span><br><span class="line">// 不过如果构造函数是显式的（explict），您就不能用 `= &#123;&#125;` 了。</span><br><span class="line">MyOtherType m&#123;&quot;b&quot;&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Google-C-Style-Guide&quot;&gt;&lt;a href=&quot;#Google-C-Style-Guide&quot; class=&quot;headerlink&quot; title=&quot;Google C++ Style Guide&quot;&gt;&lt;/a&gt;Google C++ Style Guide&lt;/h2&gt;&lt;p&gt;刚进公司的时候看过一遍、现在需要重新再学习一下、顺便写点笔记。&lt;br&gt;（如果记得没错的话这份文档的名字改过了、以前叫coding style、现在叫style guide了）。&lt;br&gt;对于一些平时一直习惯使用的（比如#define保护）以及一些不推荐使用但是基本不会用到的（比如前置声明）就不再赘述了。&lt;br&gt;下面附上链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://google.github.io/styleguide/cppguide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;英文版链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;中文版链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="读书笔记" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="其他" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Google" scheme="http://tashi711.xyz/tags/Google/"/>
    
      <category term="C++" scheme="http://tashi711.xyz/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>日语中「条件表达方式」小结</title>
    <link href="http://tashi711.xyz/nihongo/benkyou/condition/"/>
    <id>http://tashi711.xyz/nihongo/benkyou/condition/</id>
    <published>2018-05-05T11:23:28.000Z</published>
    <updated>2018-05-05T11:54:57.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="归纳总结"><a href="#归纳总结" class="headerlink" title="归纳总结"></a>归纳总结</h2><h3 id="“～たら”和“～ば”"><a href="#“～たら”和“～ば”" class="headerlink" title="“～たら”和“～ば”"></a>“～たら”和“～ば”</h3><p>1、表示“如果”、“要是”，其中用“～ば”时后面的小句不能是意志、请求的形式（“～たいです”、“～てください”）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">雨が降ったら、窓を閉めてください。（“～降れば”不行）</span><br></pre></td></tr></table></figure><p>2、后面的小句是过去时，表示发现某种情况，不能用“～ば”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">窓を開けたら、富士山が見えました。（“～開ければ”不行）</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="“～と”"><a href="#“～と”" class="headerlink" title="“～と”"></a>“～と”</h3><p>1、用于前项一旦成立，后项就必然成为现实。此时用“～たら”也不算错，但不够自然。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">スイッチを押すと／押したら、電気がつきます。</span><br></pre></td></tr></table></figure><p>2、后面的小句不能是意志、请求的形式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">スイッチを押したら、すぐ部屋を出てください。（“～押すと”不行）</span><br></pre></td></tr></table></figure><p>3、后面的小句是过去时，表示发现某种情况，与“～たら”相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">窓を開けると、富士山が見えました。</span><br></pre></td></tr></table></figure><h3 id="“～なら”"><a href="#“～なら”" class="headerlink" title="“～なら”"></a>“～なら”</h3><p>1、多用于以对方的某种意愿为前提而提出某种建议，这种用法“～たら”“～ば”“～と”都不具备。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新鮮な魚を買いたいんですが…。</span><br><span class="line">—— 魚を買うなら、駅前のズーパーがいいですよ。</span><br></pre></td></tr></table></figure><p>2、前项不是对方的意志或愿望，而是其某种兴趣或嗜好时，与“～たら”可以通用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">野菜が嫌いなら／嫌いだったら、食べなくでもいいですよ。</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>新标日第二版第37课语法部分。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;归纳总结&quot;&gt;&lt;a href=&quot;#归纳总结&quot; class=&quot;headerlink&quot; title=&quot;归纳总结&quot;&gt;&lt;/a&gt;归纳总结&lt;/h2&gt;&lt;h3 id=&quot;“～たら”和“～ば”&quot;&gt;&lt;a href=&quot;#“～たら”和“～ば”&quot; class=&quot;headerlink&quot; title=&quot;“～たら”和“～ば”&quot;&gt;&lt;/a&gt;“～たら”和“～ば”&lt;/h3&gt;&lt;p&gt;1、表示“如果”、“要是”，其中用“～ば”时后面的小句不能是意志、请求的形式（“～たいです”、“～てください”）。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;雨が降ったら、窓を閉めてください。（“～降れば”不行）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2、后面的小句是过去时，表示发现某种情况，不能用“～ば”。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;窓を開けたら、富士山が見えました。（“～開ければ”不行）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ニホンゴ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/"/>
    
      <category term="ベンキョウ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/%E3%83%99%E3%83%B3%E3%82%AD%E3%83%A7%E3%82%A6/"/>
    
    
      <category term="コンディション" scheme="http://tashi711.xyz/tags/%E3%82%B3%E3%83%B3%E3%83%87%E3%82%A3%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 827. Making A Large Island」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-827/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-827/</id>
    <published>2018-05-02T11:34:17.000Z</published>
    <updated>2018-05-02T11:53:03.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/making-a-large-island/description/" target="_blank" rel="noopener">LeetCode 827. Making A Large Island</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定N×N的0-1方图（1≤N≤50），求问最多改变其中一个0到1之后最大的1的4-连通分量。<br>比如样例[[1, 0], [0, 1]]，结果为3。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>比较简单点的一道题目，先种子填充求出所有4-连通分量，记录下来（注意不同的连通分量间打上不同的tag）。<br>枚举每个0点，将其上下左右的<strong>不同</strong>连通分量的size加起来再加1的最大值输出即可。</p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><p>只需注意边界条件，以及没有0点时能够输出整个方图的size即可。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为 $O(N^2)$，因为种子填充最多将整张图遍历完。<br>空间复杂度为 $O(N^2)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> vst[N][N];</span><br><span class="line"><span class="keyword">int</span> cur;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">largestIsland</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">n = (<span class="keyword">int</span>)grid.size();</span><br><span class="line">m = (<span class="keyword">int</span>)grid[<span class="number">0</span>].size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">a[i + <span class="number">1</span>][j + <span class="number">1</span>] = grid[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> work();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line">node(<span class="keyword">int</span> _u = <span class="number">0</span>, <span class="keyword">int</span> _v = <span class="number">0</span>) : u(_u), v(_v) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">within_and_not_vst_then_emplace</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="built_in">vector</span>&lt;node&gt;&amp; adj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u &gt;= <span class="number">1</span> &amp;&amp; u &lt;= n &amp;&amp; v &gt;= <span class="number">1</span> &amp;&amp; v &lt;= m &amp;&amp; !vst[u][v] &amp;&amp; a[u][v] == <span class="number">1</span>) &#123;</span><br><span class="line">adj.emplace_back(u, v);</span><br><span class="line">vst[u][v] = cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floodfill</span><span class="params">(<span class="keyword">int</span> su, <span class="keyword">int</span> sv)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; q;</span><br><span class="line">q.emplace_back(su, sv);</span><br><span class="line">vst[su][sv] = cur;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)q.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = q[i].u, v = q[i].v;</span><br><span class="line">within_and_not_vst_then_emplace(u + <span class="number">1</span>, v, q);</span><br><span class="line">within_and_not_vst_then_emplace(u - <span class="number">1</span>, v, q);</span><br><span class="line">within_and_not_vst_then_emplace(u, v + <span class="number">1</span>, q);</span><br><span class="line">within_and_not_vst_then_emplace(u, v - <span class="number">1</span>, q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">int</span>)q.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">within_and_insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u &gt;= <span class="number">1</span> &amp;&amp; u &lt;= n &amp;&amp; v &gt;= <span class="number">1</span> &amp;&amp; v &lt;= m) &#123;</span><br><span class="line">s.insert(vst[u][v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vst, <span class="number">0</span>, <span class="keyword">sizeof</span> vst);</span><br><span class="line">cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt;</span><br><span class="line">cnt.push_back(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (!vst[i][j] &amp;&amp; a[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">++cur;</span><br><span class="line"><span class="keyword">int</span> res = floodfill(i, j);</span><br><span class="line">ans = max(ans, res);</span><br><span class="line">cnt.push_back(res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">within_and_insert(i + <span class="number">1</span>, j, s);</span><br><span class="line">within_and_insert(i - <span class="number">1</span>, j, s);</span><br><span class="line">within_and_insert(i, j + <span class="number">1</span>, s);</span><br><span class="line">within_and_insert(i, j - <span class="number">1</span>, s);</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k : s) &#123;</span><br><span class="line">t += cnt[k];</span><br><span class="line">&#125;</span><br><span class="line">ans = max(ans, t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解题心得"><a href="#解题心得" class="headerlink" title="解题心得"></a>解题心得</h2><p>确实特别简单的一道题，最暴力的方法枚举所有0点的时候单独做种子填充。<br>也仅仅是4次方的复杂度，对这道题的规模来说不会超时。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/making-a-large-island/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 827. Making A Large Island&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;给定N×N的0-1方图（1≤N≤50），求问最多改变其中一个0到1之后最大的1的4-连通分量。&lt;br&gt;比如样例[[1, 0], [0, 1]]，结果为3。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="种子填充算法" scheme="http://tashi711.xyz/tags/%E7%A7%8D%E5%AD%90%E5%A1%AB%E5%85%85%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 818. Race Car」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-818/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-818/</id>
    <published>2018-04-28T06:54:25.000Z</published>
    <updated>2018-04-28T07:45:18.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/race-car/description/" target="_blank" rel="noopener">LeetCode 818. Race Car</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>一开始车在无限长的的直线的坐标0处，速度为+1，有两种指令A（加速）和R（反向）。<br>当接收指令A时，位置加上速度的值，然后速度乘2，当接收指令R时，速度反向且绝对值变为1，位置不变。<br>现在给定终点位置，求问到达这个位置的最少指令数。<br>比如样例输入3，输出2（AA: 0-&gt;1-&gt;3）；输入6，输出5（AAARA: 0-&gt;1-&gt;3-&gt;7-&gt;7-&gt;6）</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>比较难的一道题目，想了几天无果看了官方给的题解，还是很巧妙的。<br>用$A^k$表示$k$次连续的$A$，首先结尾一定不是$R$，开头的$RA^k$可以放到最后。<br>那么最终指令应该形如$A^{k_1}RA^{k_2}R…RA^{k_n}$。<br>容易得到奇数的$k_i$与偶数的$k_i$都是单调递减的，且各不相同。<br>并且到达或者超过目标位置之后继续执行$A$是没有意义的。<br>因此就有了DP的做法，如果下标位置是$2^k-1$，那么可以直接$A^k$达到。<br>否则有两种情况，一是拐两次到达，正面一定有一次最大限度的$2^k-1$，外加返回走$j$步（枚举$j$）。<br>二是直接走刚好超过$2^k-1$，回走到终点。</p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><p>边界条件f[0] = 0。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为 $O(NlogN)$。<br>空间复杂度为 $O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">11000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">racecar</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">0x7F</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= target; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> k = max_k(i);</span><br><span class="line"><span class="keyword">if</span> (i == (<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>) &#123;</span><br><span class="line">f[i] = k;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">f[i] = min(f[i], f[i - (<span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>)) + (<span class="number">1</span> &lt;&lt; j)] + k + j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span> - i &lt; i) &#123;</span><br><span class="line">f[i] = min(f[i], f[(<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span> - i] + k + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[target];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_k</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (k &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">++res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解题心得"><a href="#解题心得" class="headerlink" title="解题心得"></a>解题心得</h2><p>看起来是个N方的复杂度，但其实步长是指数级的。<br>因此在距离范围内枚举步长的量级只是对数级，可以用DP解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/race-car/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 818. Race Car&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;一开始车在无限长的的直线的坐标0处，速度为+1，有两种指令A（加速）和R（反向）。&lt;br&gt;当接收指令A时，位置加上速度的值，然后速度乘2，当接收指令R时，速度反向且绝对值变为1，位置不变。&lt;br&gt;现在给定终点位置，求问到达这个位置的最少指令数。&lt;br&gt;比如样例输入3，输出2（AA: 0-&amp;gt;1-&amp;gt;3）；输入6，输出5（AAARA: 0-&amp;gt;1-&amp;gt;3-&amp;gt;7-&amp;gt;7-&amp;gt;6）&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="动态规划" scheme="http://tashi711.xyz/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 810. Chalkboard XOR Game」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-810/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-810/</id>
    <published>2018-04-16T13:51:37.000Z</published>
    <updated>2018-04-18T13:20:59.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/chalkboard-xor-game/description/" target="_blank" rel="noopener">LeetCode 810. Chalkboard XOR Game</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定N个数，A和B轮流各取一个数，谁取之后剩下的所有数异或为0就输，A先取，如果一开始所有数异或为0也算A赢。<br>两个人同样聪明，求问A能不能赢。N范围为1到1000，数的范围0到2的16次方。<br>比如样例路线为 [1, 1, 2]，则A输。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>一开始想是一个博弈论的模型，不过建博弈树的复杂度貌似有点高。<br>其实仔细想想会发现如果当前有至少两种数剩下时，一定可以取到异或不为0的情况。<br>因此一定会取到最后一个数，直接判断数量的奇偶就好了，奇数个数一定是A输。<br>即使不用取到最后一个数，必输的状态也一定是奇数个相同的数。</p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><p>注意如果一开始所有数异或为0也算A赢，无论奇偶。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为 $O(N)$，主要是要扫一遍看看是不是一开始就是异或为0。<br>空间复杂度为 $O(1)$，不考虑输入的空间的话。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">xorGame</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = (<span class="keyword">int</span>)nums.size();</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">s ^= nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s == <span class="number">0</span> || n % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解题心得"><a href="#解题心得" class="headerlink" title="解题心得"></a>解题心得</h2><p>这道题非常有意思，10行代码解决。标签为Hard，且在短时间比赛里面。<br>数据范围也给的非常性感，1K、2的16次方，这些都给做题者放了一个烟雾弹。<br>以至于哪怕想到了正确的解法，也会怀疑自己一定是哪里想的不对。<br>所以难题是有难题的道理的，可以在任何方面难住做题者。<br>而这道难题解出来的时刻，并不是想出这个 $O(N)$ 算法的时刻，而是敢于提交这10行代码的时刻。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/chalkboard-xor-game/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 810. Chalkboard XOR Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;给定N个数，A和B轮流各取一个数，谁取之后剩下的所有数异或为0就输，A先取，如果一开始所有数异或为0也算A赢。&lt;br&gt;两个人同样聪明，求问A能不能赢。N范围为1到1000，数的范围0到2的16次方。&lt;br&gt;比如样例路线为 [1, 1, 2]，则A输。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="博弈论" scheme="http://tashi711.xyz/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>「Google Code Jam Round 1A 2018」参赛小结</title>
    <link href="http://tashi711.xyz/programming/reports/others/gcj-1a-2018/"/>
    <id>http://tashi711.xyz/programming/reports/others/gcj-1a-2018/</id>
    <published>2018-04-14T03:20:10.000Z</published>
    <updated>2018-04-14T05:08:30.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="比赛信息"><a href="#比赛信息" class="headerlink" title="比赛信息"></a>比赛信息</h2><blockquote><ul><li>链接：<a href="https://codejam.withgoogle.com/2018/challenges/0000000000007883/dashboard" target="_blank" rel="noopener">Google Code Jam Round 1A 2018</a></li><li>来源：Google Code Jam</li><li>时间：Start - Apr/14/2018 09:00 (UTC+8) | Length - 02:30</li><li>成绩：Solved - A(all), B(all), C(small case) | Standing - 800/5172</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="A-Waffle-Choppers"><a href="#A-Waffle-Choppers" class="headerlink" title="A. Waffle Choppers"></a><a href="https://codejam.withgoogle.com/2018/challenges/0000000000007883/dashboard" target="_blank" rel="noopener">A. Waffle Choppers</a></h3><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>假设总的巧克力有N个，那么 N mod ((H+1)(V+1)) != 0 一定是无解的。<br>分别扫描一遍纵向与横向，当分别达到N/(H+1)个与N/(V+1)个的地方一定是切的位置。<br>然后再检查是否切的每块为N/((H+1)(V+1))即可<br>时间复杂度为 $O(RC)$。</p><a id="more"></a><h4 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s[N];</span><br><span class="line"><span class="keyword">int</span> su[N], sv[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(su, <span class="number">0</span>, <span class="keyword">sizeof</span> su);</span><br><span class="line"><span class="built_in">memset</span>(sv, <span class="number">0</span>, <span class="keyword">sizeof</span> sv);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">s[i] = <span class="string">'\0'</span> + s[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> t = (s[i][j] == <span class="string">'@'</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">cnt += t;</span><br><span class="line">su[i] += t;</span><br><span class="line">sv[j] += t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; au, av;</span><br><span class="line"><span class="keyword">if</span> (cnt % ((u + <span class="number">1</span>) * (v + <span class="number">1</span>))) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPOSSIBLE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cu = cnt / (u + <span class="number">1</span>), cv = cnt / (v + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> avg = cnt / ((u + <span class="number">1</span>) * (v + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">int</span> cur_u = <span class="number">0</span>, cur_v = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">cur_u += su[i];</span><br><span class="line"><span class="keyword">if</span> (cur_u == cu) &#123;</span><br><span class="line">au.push_back(i);</span><br><span class="line">cur_u = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur_u &gt; cu) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPOSSIBLE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">cur_v += sv[i];</span><br><span class="line"><span class="keyword">if</span> (cur_v == cv) &#123;</span><br><span class="line">av.push_back(i);</span><br><span class="line">cur_v = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur_v &gt; cv) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPOSSIBLE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> bu = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= u; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> nu = au[i];</span><br><span class="line"><span class="keyword">int</span> bv = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= v; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> nv = av[j];</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> ii = bu + <span class="number">1</span>; ii &lt;= nu; ++ii) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> jj = bv + <span class="number">1</span>; jj &lt;= nv; ++jj) &#123;</span><br><span class="line">t += (s[ii][jj] == <span class="string">'@'</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (t != avg) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"IMPOSSIBLE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">bv = nv;</span><br><span class="line">&#125;</span><br><span class="line">bu = nu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"POSSIBLE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, i);</span><br><span class="line">work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-Bit-Party"><a href="#B-Bit-Party" class="headerlink" title="B. Bit Party"></a><a href="https://codejam.withgoogle.com/2018/challenges/0000000000007883/dashboard/000000000002fff6" target="_blank" rel="noopener">B. Bit Party</a></h3><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>由于答案具有单调性（超过答案的时间都满足，小于答案的时间都不满足）。<br>因此考虑二分答案，验证的时候只需考虑当前时间每个cashier能解决的最多数量。<br>然后取最高的R个相加，超过B则说明可行。<br>时间的数量级为 $O((M_i+B)S_i+P_i)$，二分这个时间。<br>每次验证时需要对C个数量进行排序。<br>因此总的时间复杂度为 $O((C \log C) \log ((M_i+B)S_i+P_i))$。</p><h4 id="AC代码（C-）-1"><a href="#AC代码（C-）-1" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> M = <span class="number">0x7FFFFFFFFFFFFFFE</span>LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m[N], s[N], p[N];</span><br><span class="line"><span class="keyword">int</span> r, c, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; adj;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; ++i) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cur = min((<span class="keyword">long</span> <span class="keyword">long</span>)m[i], max(<span class="number">0L</span>L, (k - p[i]) / s[i]));</span><br><span class="line">adj.push_back(cur);</span><br><span class="line">&#125;</span><br><span class="line">sort(adj.begin(), adj.end(), greater&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;());</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i) &#123;</span><br><span class="line">sum += adj[i];</span><br><span class="line"><span class="keyword">if</span> (sum &gt;= b) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;m[i], &amp;s[i], &amp;p[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> u = <span class="number">1</span>, v = M;</span><br><span class="line"><span class="keyword">while</span> (u != v) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid = (u + v) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (check(mid)) &#123;</span><br><span class="line">v = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">u = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; u &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, i);</span><br><span class="line">work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-Edgy-Baking"><a href="#C-Edgy-Baking" class="headerlink" title="C. Edgy Baking"></a><a href="https://codejam.withgoogle.com/2018/challenges/0000000000007883/analysis/000000000002fff7" target="_blank" rel="noopener">C. Edgy Baking</a></h3><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>本题只解了小case，因为长宽都相同，所以所有面团可以看成等价的。<br>那么枚举有多少个切与多少个不切即可，切的周长增加的范围是长宽的最小值乘2到对角线长度乘2。<br>判断此时如果周长范围包括P，则能达到P，否则在没有爆掉的情况下能达到最长的周长。<br>时间复杂度为 $O(N)$。</p><h4 id="Small-Case代码（C-）"><a href="#Small-Case代码（C-）" class="headerlink" title="Small Case代码（C++）"></a>Small Case代码（C++）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w[N], h[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_small_case</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> u = w[<span class="number">1</span>], v = h[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> ori_p = <span class="number">2</span> * (u + v);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> min_p = ori_p + <span class="number">2</span> * min(u, v);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> max_p = ori_p + <span class="number">2</span> * <span class="built_in">sqrt</span>((<span class="keyword">long</span> <span class="keyword">double</span>)u * u + (<span class="keyword">long</span> <span class="keyword">double</span>)v * v);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> get_min = (n - i) * ori_p + i * min_p;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> get_max = (n - i) * ori_p + i * max_p;</span><br><span class="line"><span class="keyword">if</span> (get_min &lt;= p &amp;&amp; p &lt;= get_max) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">9</span>) &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (get_max &lt; p) &#123;</span><br><span class="line">ans = max(ans, get_max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">9</span>) &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;w[i], &amp;h[i]);</span><br><span class="line">&#125;</span><br><span class="line">solve_small_case();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, i);</span><br><span class="line">work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参赛心得"><a href="#参赛心得" class="headerlink" title="参赛心得"></a>参赛心得</h2><p>算是比较简单的一场初赛了，算法都比较裸。<br>至少在A轮过了就不用倒时差去做后面的两场了，还是很开心。<br>希望复赛也能保持比较好的状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;比赛信息&quot;&gt;&lt;a href=&quot;#比赛信息&quot; class=&quot;headerlink&quot; title=&quot;比赛信息&quot;&gt;&lt;/a&gt;比赛信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://codejam.withgoogle.com/2018/challenges/0000000000007883/dashboard&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google Code Jam Round 1A 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：Google Code Jam&lt;/li&gt;
&lt;li&gt;时间：Start - Apr/14/2018 09:00 (UTC+8) | Length - 02:30&lt;/li&gt;
&lt;li&gt;成绩：Solved - A(all), B(all), C(small case) | Standing - 800/5172&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;A-Waffle-Choppers&quot;&gt;&lt;a href=&quot;#A-Waffle-Choppers&quot; class=&quot;headerlink&quot; title=&quot;A. Waffle Choppers&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codejam.withgoogle.com/2018/challenges/0000000000007883/dashboard&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A. Waffle Choppers&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h4&gt;&lt;p&gt;假设总的巧克力有N个，那么 N mod ((H+1)(V+1)) != 0 一定是无解的。&lt;br&gt;分别扫描一遍纵向与横向，当分别达到N/(H+1)个与N/(V+1)个的地方一定是切的位置。&lt;br&gt;然后再检查是否切的每块为N/((H+1)(V+1))即可&lt;br&gt;时间复杂度为 $O(RC)$。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="其他" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="模拟" scheme="http://tashi711.xyz/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="二分答案" scheme="http://tashi711.xyz/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 815. Bus Routes」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-815/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-815/</id>
    <published>2018-04-13T11:28:45.000Z</published>
    <updated>2018-04-13T12:26:16.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/bus-routes/description/" target="_blank" rel="noopener">LeetCode 815. Bus Routes</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定N种路线，每种路线包含不超过M个站，站的编号为0到K-1，N范围为1到500，M的范围为1到500，K为$10^6$。<br>再给定起点S与终点T，求问从起点到终点最少坐几次车，一开始没有上车，如果不能到达返回-1。<br>比如样例路线为 [[1, 2, 7], [3, 6, 7]]，从1到6，最少需要2次：1 -&gt; 7 -&gt; 6。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先预处理每个编号的站有哪些路线经过，开一个 $O(K)$ 的vector来储存。<br>因为站的编号最多出现 $O(NM)$ 次，所以空间足够。<br>然后对每个编号的站，所有经过它的路线一定是可以互相到达的，且只用换乘1次。<br>于是我们构建一个新图，以路线为点，能够一次换乘互相到达的两个路线之间连边。<br>连边的时间最坏的情况下是每个路线都包含同样的 $O(M)$ 个站。<br>这样在这 $O(M)$ 个站上的两两路线连边总共需要 $O(N^2M)$ 的时间，依旧可以接受。<br>最终在建好的图上做一遍BFS求最短路即可。<br>这里有一个小技巧，因为BFS的起点是所有包含S的路线，而终点是所有包含T的路线。<br>这样的话初始化BFS队列以及判断是否达到终点比较繁琐。<br>可以添加两个点，编号为N和N+1，其中N能到达所有包含S的路线，而所有包含T的路线能到达N+1。<br>这样就可以以点N为起点，以N+1为终点来计算了。<br>最终如果发现新构建的图N与N+1不连通，返回-1。</p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><p>注意如果S==T，那么其实是不用上车的，应该返回0。<br>但按照前面的算法会返回1（从N到这个路线，再从这个路线到N+1），所以需要特判一下。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度的瓶颈在建图处，为 $O(N^2M)$。<br>空间复杂度为 $O(N^2+NM+K)$，其中 $O(N^2)$ 是图的空间，其余的部分上面分析过了。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">550</span>, M = <span class="number">1100000</span>, K = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[M];</span><br><span class="line"><span class="keyword">int</span> f[N][N];</span><br><span class="line"><span class="keyword">int</span> d[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numBusesToDestination</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; routes, <span class="keyword">int</span> S, <span class="keyword">int</span> T)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</span><br><span class="line">adj[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> work(routes, S, T);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; a, <span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (st == ed) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n = (<span class="keyword">int</span>)a.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> m = (<span class="keyword">int</span>)a[i].size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">adj[a[i][j]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> m = (<span class="keyword">int</span>)adj[i].size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m - <span class="number">1</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; m; ++k) &#123;</span><br><span class="line"><span class="keyword">int</span> u = adj[i][j], v = adj[i][k];</span><br><span class="line">f[u][v] = f[v][u] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)adj[st].size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = adj[st][i];</span><br><span class="line">f[n][u] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)adj[ed].size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = adj[ed][i];</span><br><span class="line">f[u][n + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(n);</span><br><span class="line">d[n] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> u = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; n + <span class="number">2</span>; ++v) &#123;</span><br><span class="line"><span class="keyword">if</span> (f[u][v] &amp;&amp; d[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">q.push(v);</span><br><span class="line"><span class="keyword">if</span> (v == n + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> d[v] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解题心得"><a href="#解题心得" class="headerlink" title="解题心得"></a>解题心得</h2><p>虽然按照官方的说法最好不要使用全局变量。<br>但是因为这道题如果把 $O(K)$ 个vector开在局部就会出现问题。<br>于是还是使用了全局变量，注意需要初始化这些全局变量，</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/bus-routes/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 815. Bus Routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;给定N种路线，每种路线包含不超过M个站，站的编号为0到K-1，N范围为1到500，M的范围为1到500，K为$10^6$。&lt;br&gt;再给定起点S与终点T，求问从起点到终点最少坐几次车，一开始没有上车，如果不能到达返回-1。&lt;br&gt;比如样例路线为 [[1, 2, 7], [3, 6, 7]]，从1到6，最少需要2次：1 -&amp;gt; 7 -&amp;gt; 6。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="构图" scheme="http://tashi711.xyz/tags/%E6%9E%84%E5%9B%BE/"/>
    
      <category term="BFS" scheme="http://tashi711.xyz/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>「Codeforces Round #472 Div. 2」参赛小结</title>
    <link href="http://tashi711.xyz/programming/reports/codeforces/round-472-div-2/"/>
    <id>http://tashi711.xyz/programming/reports/codeforces/round-472-div-2/</id>
    <published>2018-04-06T01:57:24.000Z</published>
    <updated>2018-04-06T18:19:13.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="比赛信息"><a href="#比赛信息" class="headerlink" title="比赛信息"></a>比赛信息</h2><blockquote><ul><li>链接：<a href="http://codeforces.com/contest/957" target="_blank" rel="noopener">Codeforces Round #472 (rated, Div. 2, based on VK Cup 2018 Round 2)</a></li><li>来源：Codeforces</li><li>时间：Start - Mar/24/2018 23:35 (UTC+8) | Length - 02:15</li><li>成绩：Solved - A, B, C, D | Standing - 257/5016 | Rating - 1819→1842 (+23)</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="A-Tritonic-Iridescence-957-A"><a href="#A-Tritonic-Iridescence-957-A" class="headerlink" title="A. Tritonic Iridescence (957 - A)"></a><a href="http://codeforces.com/contest/957/problem/A" target="_blank" rel="noopener">A. Tritonic Iridescence (957 - A)</a></h3><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>按照以下顺序依次判断即可：<br>如果已经有连续两个相同的非“?”返回“No”。<br>如果长度为1 ? “?”返回“Yes” : 非“?”返回“No”。<br>如果有两个连续的“?”返回“Yes”。<br>如果任意一端为“?”返回“Yes”。<br>如果存在问号两边为同色返回“Yes”。<br>其他情况返回“No”。<br>时间复杂度为 $O(N)$。</p><a id="more"></a><h4 id="AC代码（GNU-G-17-7-2-0）"><a href="#AC代码（GNU-G-17-7-2-0）" class="headerlink" title="AC代码（GNU G++17 7.2.0）"></a>AC代码（GNU G++17 7.2.0）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == s[i + <span class="number">1</span>] &amp;&amp; s[i] != <span class="string">'?'</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'?'</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == s[i + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'?'</span> || s[n - <span class="number">1</span>] == <span class="string">'?'</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">'?'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i - <span class="number">1</span>] == s[i + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-Mystical-Mosaic-957-B"><a href="#B-Mystical-Mosaic-957-B" class="headerlink" title="B. Mystical Mosaic (957 - B)"></a><a href="http://codeforces.com/contest/957/problem/B" target="_blank" rel="noopener">B. Mystical Mosaic (957 - B)</a></h3><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>依次考虑每一行，假设当前考虑第i行。<br>第i行上有“#”的列是取第i行这一轮必须且仅须取的。<br>那么这些列上有“#”的行也是这一轮必须且仅须取的。<br>检查这组行、列是否在交点处都是“#”且其他地方都是“.”。<br>若满足要求，则继续考虑后面没考虑过的行，否则返回“No”。<br>所有行检查完毕后返回“Yes”。<br>时间复杂度为 $O(N^4)$。</p><h4 id="AC代码（GNU-G-17-7-2-0）-1"><a href="#AC代码（GNU-G-17-7-2-0）-1" class="headerlink" title="AC代码（GNU G++17 7.2.0）"></a>AC代码（GNU G++17 7.2.0）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"><span class="keyword">bool</span> vst[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">a[i][j + <span class="number">1</span>] = (s[j] == <span class="string">'.'</span> ? <span class="number">1</span> : <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (vst[i]) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">vst[i] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">bool</span> now[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">adj.push_back(j);</span><br><span class="line">now[j] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">now[j] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="keyword">int</span>)adj.size(); ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> u = adj[j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (!vst[k] &amp;&amp; a[k][u] == <span class="number">2</span>) &#123;</span><br><span class="line">vst[k] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">1</span>; p &lt;= m; ++p) &#123;</span><br><span class="line"><span class="keyword">if</span> ((a[k][p] == <span class="number">1</span>) != (now[p] == <span class="literal">false</span>)) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-Three-level-Laser-957-C"><a href="#C-Three-level-Laser-957-C" class="headerlink" title="C. Three-level Laser (957 - C)"></a><a href="http://codeforces.com/contest/957/problem/C" target="_blank" rel="noopener">C. Three-level Laser (957 - C)</a></h3><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>考虑每个点作为i，那么j一定在i紧跟的后一个位置最优，这时k越远越好。<br>每次i往后移，就将k移到离i不超过U的最远位置。<br>k最多移动n次，因此每次移动k的均摊复杂度只有 $O(1)$。<br>注意每次更新的时候i、j、k这3个点不重合即可。<br>总的时间复杂度为 $O(N)$。</p><h4 id="AC代码（GNU-G-17-7-2-0）-2"><a href="#AC代码（GNU-G-17-7-2-0）-2" class="headerlink" title="AC代码（GNU G++17 7.2.0）"></a>AC代码（GNU G++17 7.2.0）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> n, u;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; u;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> ans = <span class="number">-1.</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (pos != n &amp;&amp; a[pos + <span class="number">1</span>] - a[i] &lt;= u) &#123;</span><br><span class="line">pos++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pos &gt; i + <span class="number">1</span>) &#123;</span><br><span class="line">ans = max(ans, (<span class="keyword">long</span> <span class="keyword">double</span>)(a[pos] - a[i + <span class="number">1</span>]) / (a[pos] - a[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">15</span>) &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-Riverside-Curio-957-D"><a href="#D-Riverside-Curio-957-D" class="headerlink" title="D. Riverside Curio (957 - D)"></a><a href="http://codeforces.com/contest/957/problem/D" target="_blank" rel="noopener">D. Riverside Curio (957 - D)</a></h3><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>先从后往前扫一遍，记录如果要满足当前位置的要求，前面一天至少要有几条线。<br>然后再从前往后扫即可，如果为了满足当前位置的要求需要加一条就往下加一条（这一天没有线累加到答案上）。<br>否则最优的放法是恰好在某条线上，答案加的最少且不用增加新的线，除非根据之前预处理的记录发现必须要增加。<br>这时相当于就在中间的那个位置增加一条，并且最终答案也要加1。<br>总的时间复杂度为 $O(N)$。</p><h4 id="AC代码（GNU-G-17-7-2-0）-3"><a href="#AC代码（GNU-G-17-7-2-0）-3" class="headerlink" title="AC代码（GNU G++17 7.2.0）"></a>AC代码（GNU G++17 7.2.0）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> u[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> need = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">need = u[i] = max(a[i], need);</span><br><span class="line">need--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] == cnt) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ans += cnt - a[i] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (u[i + <span class="number">1</span>] &gt; cnt) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参赛心得"><a href="#参赛心得" class="headerlink" title="参赛心得"></a>参赛心得</h2><p>虽然做出了4道题，不过都挺水的，rating也只涨了一点点。<br>貌似除了第一题都是VK Cup的原题，相当于只做了这场比赛最水的一半（一共6道题）。<br>希望赶紧做到Div. 1去。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;比赛信息&quot;&gt;&lt;a href=&quot;#比赛信息&quot; class=&quot;headerlink&quot; title=&quot;比赛信息&quot;&gt;&lt;/a&gt;比赛信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;http://codeforces.com/contest/957&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces Round #472 (rated, Div. 2, based on VK Cup 2018 Round 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：Codeforces&lt;/li&gt;
&lt;li&gt;时间：Start - Mar/24/2018 23:35 (UTC+8) | Length - 02:15&lt;/li&gt;
&lt;li&gt;成绩：Solved - A, B, C, D | Standing - 257/5016 | Rating - 1819→1842 (+23)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;A-Tritonic-Iridescence-957-A&quot;&gt;&lt;a href=&quot;#A-Tritonic-Iridescence-957-A&quot; class=&quot;headerlink&quot; title=&quot;A. Tritonic Iridescence (957 - A)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/957/problem/A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A. Tritonic Iridescence (957 - A)&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h4&gt;&lt;p&gt;按照以下顺序依次判断即可：&lt;br&gt;如果已经有连续两个相同的非“?”返回“No”。&lt;br&gt;如果长度为1 ? “?”返回“Yes” : 非“?”返回“No”。&lt;br&gt;如果有两个连续的“?”返回“Yes”。&lt;br&gt;如果任意一端为“?”返回“Yes”。&lt;br&gt;如果存在问号两边为同色返回“Yes”。&lt;br&gt;其他情况返回“No”。&lt;br&gt;时间复杂度为 $O(N)$。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="Codeforces" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/Codeforces/"/>
    
    
      <category term="模拟" scheme="http://tashi711.xyz/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>「自動詞、他動詞」区分</title>
    <link href="http://tashi711.xyz/nihongo/benkyou/jitadoushi/"/>
    <id>http://tashi711.xyz/nihongo/benkyou/jitadoushi/</id>
    <published>2018-04-05T17:03:55.000Z</published>
    <updated>2018-04-06T18:22:27.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一般经验"><a href="#一般经验" class="headerlink" title="一般经验"></a>一般经验</h2><h3 id="1、以「す」结尾的动词都是他动词，其对应的动词是自动词"><a href="#1、以「す」结尾的动词都是他动词，其对应的动词是自动词" class="headerlink" title="1、以「す」结尾的动词都是他动词，其对应的动词是自动词"></a>1、以「す」结尾的动词都是他动词，其对应的动词是自动词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">揺らす　→　揺れる　　</span><br><span class="line">鳴らす　→　鳴る　　</span><br><span class="line">散らす　→　散る</span><br></pre></td></tr></table></figure><h3 id="2、大多数「え段＋る」的动词是他动词，其对应的一类动词（五段动词）或者「あ段＋る」的动词是自动词"><a href="#2、大多数「え段＋る」的动词是他动词，其对应的一类动词（五段动词）或者「あ段＋る」的动词是自动词" class="headerlink" title="2、大多数「え段＋る」的动词是他动词，其对应的一类动词（五段动词）或者「あ段＋る」的动词是自动词"></a>2、大多数「え段＋る」的动词是他动词，其对应的一类动词（五段动词）或者「あ段＋る」的动词是自动词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">始める　　→　始まる　</span><br><span class="line">まとめる　→　まとまる　</span><br><span class="line">かける　　→　かかる　</span><br><span class="line">つける　　→　つく</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="3、所有可能动词都是自动词"><a href="#3、所有可能动词都是自动词" class="headerlink" title="3、所有可能动词都是自动词"></a>3、所有可能动词都是自动词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">書ける</span><br><span class="line">見える</span><br><span class="line">聞こえる</span><br></pre></td></tr></table></figure><h3 id="4、大多以「れる」结尾的二类动词是自动词，其相对的动词是他动词"><a href="#4、大多以「れる」结尾的二类动词是自动词，其相对的动词是他动词" class="headerlink" title="4、大多以「れる」结尾的二类动词是自动词，其相对的动词是他动词"></a>4、大多以「れる」结尾的二类动词是自动词，其相对的动词是他动词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">分かつ　→　分かれる</span><br><span class="line">放つ　　→　放れる　</span><br><span class="line">零す　　→　零れる</span><br><span class="line">倒す　　→　倒れる</span><br></pre></td></tr></table></figure><h3 id="5、形容词加「む、める」的动词大多是他动词，加「まる」的是自动词"><a href="#5、形容词加「む、める」的动词大多是他动词，加「まる」的是自动词" class="headerlink" title="5、形容词加「む、める」的动词大多是他动词，加「まる」的是自动词"></a>5、形容词加「む、める」的动词大多是他动词，加「まる」的是自动词</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">悲しむ</span><br><span class="line">楽しむ</span><br><span class="line">高める　→　高まる</span><br><span class="line">強める　→　強まる</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.cdteikyo.com/detail/83-148-277.html" target="_blank" rel="noopener">什么是他动词自动词？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一般经验&quot;&gt;&lt;a href=&quot;#一般经验&quot; class=&quot;headerlink&quot; title=&quot;一般经验&quot;&gt;&lt;/a&gt;一般经验&lt;/h2&gt;&lt;h3 id=&quot;1、以「す」结尾的动词都是他动词，其对应的动词是自动词&quot;&gt;&lt;a href=&quot;#1、以「す」结尾的动词都是他动词，其对应的动词是自动词&quot; class=&quot;headerlink&quot; title=&quot;1、以「す」结尾的动词都是他动词，其对应的动词是自动词&quot;&gt;&lt;/a&gt;1、以「す」结尾的动词都是他动词，其对应的动词是自动词&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;揺らす　→　揺れる　　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;鳴らす　→　鳴る　　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;散らす　→　散る&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2、大多数「え段＋る」的动词是他动词，其对应的一类动词（五段动词）或者「あ段＋る」的动词是自动词&quot;&gt;&lt;a href=&quot;#2、大多数「え段＋る」的动词是他动词，其对应的一类动词（五段动词）或者「あ段＋る」的动词是自动词&quot; class=&quot;headerlink&quot; title=&quot;2、大多数「え段＋る」的动词是他动词，其对应的一类动词（五段动词）或者「あ段＋る」的动词是自动词&quot;&gt;&lt;/a&gt;2、大多数「え段＋る」的动词是他动词，其对应的一类动词（五段动词）或者「あ段＋る」的动词是自动词&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;始める　　→　始まる　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;まとめる　→　まとまる　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;かける　　→　かかる　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;つける　　→　つく&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ニホンゴ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/"/>
    
      <category term="ベンキョウ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/%E3%83%99%E3%83%B3%E3%82%AD%E3%83%A7%E3%82%A6/"/>
    
    
      <category term="動詞" scheme="http://tashi711.xyz/tags/%E5%8B%95%E8%A9%9E/"/>
    
  </entry>
  
  <entry>
    <title>「シド - Graduation」鑑賞</title>
    <link href="http://tashi711.xyz/nihongo/uta/sid-graduation/"/>
    <id>http://tashi711.xyz/nihongo/uta/sid-graduation/</id>
    <published>2018-04-05T17:03:54.000Z</published>
    <updated>2018-04-06T18:22:52.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="歌曲信息"><a href="#歌曲信息" class="headerlink" title="歌曲信息"></a>歌曲信息</h2><blockquote><ul><li>歌曲：Graduation</li><li>歌手：シド</li><li>作词：マオ</li><li>作曲：御恵明希（Aki）</li><li>专辑：残り香（2012年5月2日发行）</li></ul></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这首歌比较冷门，是シド一张单曲盘的非主打歌，感觉莫名的好听。<br>歌词也写得非常有氛围，高中毕业和本科毕业的时候脑袋里都浮现了这首歌的旋律。<br>特别是这句「なんとなくで、過ごした三年だったけど、君もきっと、同じだよね」非常有感觉。</p><a id="more"></a><h2 id="假名歌词"><a href="#假名歌词" class="headerlink" title="假名歌词"></a>假名歌词</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">紙切（かみき）れぐらいしか　思（おも）ってなかった</span><br><span class="line">その意味（いみ）には　まだ気（き）づかない</span><br><span class="line">寒空（さむぞら）響（ひび）いた　お別（わか）れの歌（うた）に</span><br><span class="line">口（くち）パクして　ボタンはずした</span><br><span class="line"></span><br><span class="line">なんとなくで　過（す）ごした三年（さんねん）だったけど</span><br><span class="line">君（きみ）もきっと　同（おな）じだよね</span><br><span class="line"></span><br><span class="line">こんな風（ふう）な毎日（まいにち）が　永遠（えいえん）じゃないと知（し）ってた</span><br><span class="line">だけど僕（ぼく）ら　離（はな）れること　疑（うたが）ってた</span><br><span class="line">出会（であ）った頃（ころ）のままで</span><br><span class="line"></span><br><span class="line">この道（みち）はいくつも　枝（えだ）別（わか）れの先（さき）</span><br><span class="line">繋（つな）がってる　君（きみ）は言（い）った</span><br><span class="line">寒空（さむぞら）　響（ひび）いたお別（わか）れの歌（うた）が</span><br><span class="line">懐（なつ）かしくて　会（あ）いたくなった</span><br><span class="line"></span><br><span class="line">なんとなくじゃ　振（ふ）り落（お）とされそうなほど</span><br><span class="line">甘（あま）くなくて　非力（ひりき）を知（し）って</span><br><span class="line"></span><br><span class="line">あの頃（ころ）はよかったと　笑（わら）い合（あ）うような真似（まね）は</span><br><span class="line">したくないね　だけどそれじゃ　進（すす）めそうにない</span><br><span class="line">思（おも）い出（で）から　始（はじ）めよう</span><br><span class="line"></span><br><span class="line">筒（つつ）に入（い）れた　紙切（かみき）れだったはずなのに</span><br><span class="line">今（いま）こうして　証（あかし）になった</span><br><span class="line"></span><br><span class="line">こんな風（ふう）な毎日（まいにち）が　永遠（えいえん）じゃないと知（し）ってた</span><br><span class="line">だけど僕（ぼく）ら　離（はな）れること　疑（うたが）ってた</span><br><span class="line">かけがえのない日々（ひび）</span><br><span class="line"></span><br><span class="line">あの頃（ころ）はよかったと　笑（わら）い合（あ）うような真似（まね）は</span><br><span class="line">したくないね　だけどそれじゃ　進（すす）めそうにない</span><br><span class="line">立（た）ち止（と）まってもいい　思（おも）い出（で）から始（はじ）めよう</span><br></pre></td></tr></table></figure><h2 id="其他感想"><a href="#其他感想" class="headerlink" title="其他感想"></a>其他感想</h2><p>シド是喜欢很久很久的日系组合了，视觉系出身。<br>从高中关注开始基本都是走正常的流行摇滚风了，唱过很多动漫曲。<br>四个人都非常的有才华，作词作曲基本都是乐队自己完成的。<br>希望他们能一直走下去，带来更多优秀的作品。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;歌曲信息&quot;&gt;&lt;a href=&quot;#歌曲信息&quot; class=&quot;headerlink&quot; title=&quot;歌曲信息&quot;&gt;&lt;/a&gt;歌曲信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;歌曲：Graduation&lt;/li&gt;
&lt;li&gt;歌手：シド&lt;/li&gt;
&lt;li&gt;作词：マオ&lt;/li&gt;
&lt;li&gt;作曲：御恵明希（Aki）&lt;/li&gt;
&lt;li&gt;专辑：残り香（2012年5月2日发行）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;这首歌比较冷门，是シド一张单曲盘的非主打歌，感觉莫名的好听。&lt;br&gt;歌词也写得非常有氛围，高中毕业和本科毕业的时候脑袋里都浮现了这首歌的旋律。&lt;br&gt;特别是这句「なんとなくで、過ごした三年だったけど、君もきっと、同じだよね」非常有感觉。&lt;/p&gt;
    
    </summary>
    
      <category term="ニホンゴ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/"/>
    
      <category term="ウタ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/%E3%82%A6%E3%82%BF/"/>
    
    
      <category term="シド" scheme="http://tashi711.xyz/tags/%E3%82%B7%E3%83%89/"/>
    
  </entry>
  
  <entry>
    <title>「喜多修平 - Beyond the Rainbow ～ユメミルセカイ～」鑑賞</title>
    <link href="http://tashi711.xyz/nihongo/uta/beyond-the-rainbow/"/>
    <id>http://tashi711.xyz/nihongo/uta/beyond-the-rainbow/</id>
    <published>2018-04-05T10:55:44.000Z</published>
    <updated>2018-04-06T18:22:48.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="歌曲信息"><a href="#歌曲信息" class="headerlink" title="歌曲信息"></a>歌曲信息</h2><blockquote><ul><li>歌曲：Beyond the Rainbow ～ユメミルセカイ～</li><li>歌手：喜多修平（きた しゅうへい）</li><li>作词：喜多修平</li><li>作曲：喜多修平</li><li>编曲：铃木マサキ</li><li>专辑：ユメミルセカイ（2013年7月24日发行）</li></ul></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这首歌不是动漫的主题曲，所以知名度并不高，这其实是喜多修平第二张专辑的主打歌。<br>从开始发行开始到现在笔者还一直在听，快5年了，非常燃、好听的一首歌，而且歌词写的非常好。<br>歌词里面有许多双关的地方，比如「幻想」和「夢想」唱成「まぼろし」，「無限」唱成「なないろ」之类的。<br>这样的歌词设计使得歌词的意义可以很好地传达到，同时唱起来也非常的有气势。</p><a id="more"></a><h2 id="假名歌词"><a href="#假名歌词" class="headerlink" title="假名歌词"></a>假名歌词</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">叶（かな）えられない願（ねが）いを胸（むね）に秘（ひ）め</span><br><span class="line">失（な）くした日々（ひび）の色（いろ）ばかり重（かさ）ねてる　滲（にじ）んだ世界（せかい）で</span><br><span class="line">モノクロームな瞳（ひとみ）覚醒（めざ）めさせたい</span><br><span class="line">雨上（あめあ）がりの街（まち）ヒカリ捜（さが）し　駆（か）け巡（めぐ）れば</span><br><span class="line"></span><br><span class="line">幻想（まぼろし）に傷付（きずつ）きながらも　求（もと）め　信（しん）じ続（つづ）ける理想（ゆめ）は</span><br><span class="line">いつか鮮（あざ）やかに輝（かがや）き放（はな）ち　青空（そら）に橋（はし）を描（えが）く</span><br><span class="line">まだ見知（みし）らぬ色彩（いろ）とりどりの　出逢（であ）いと軌跡（きせき）掛（か）け合（あ）わせて</span><br><span class="line">昇（のぼ）っていこう　懼（おそ）れずに</span><br><span class="line"></span><br><span class="line">君（きみ）へと届（とど）け　この僕（ぼく）の歌（うた）</span><br><span class="line">未来（あす）に　馳（は）せる　祈（いの）り込（こ）め</span><br><span class="line">高（たか）く　いま遠（とお）く　さぁ伝（つた）えてくれ</span><br><span class="line">遙（はる）か　彼方（かなた）　夢（ゆめ）の元（もと）へ</span><br><span class="line"></span><br><span class="line">忘（わす）れられない自分（じぶん）を飾（かざ）り付（づ）け</span><br><span class="line">乾（かわ）いた声（こえ）で繕（つくろ）っては隠（かく）してた　夢見（ゆめみ）る世界（せかい）を</span><br><span class="line">カオティックな心（こころ）の鍵（かぎ）解（と）き放（はな）ったら</span><br><span class="line">涙（なみだ）に濡（ぬ）れた過去（きのう）脱（ぬ）ぎ棄（す）て　飛（と）び立（た）つのさ</span><br><span class="line"></span><br><span class="line">夢想（まぼろし）に導（みちび）かれるように　あの日（ひ）　掴（つか）み刻（きざ）んだ希望（ゆめ）は</span><br><span class="line">やがて無限（なないろ）に輝（かがや）き増（ま）し　天空（そら）に橋（はし）は架（か）かる</span><br><span class="line">その胸（むね）抱（だ）きしめてる虹（にじ）と　溢（あふ）れる光（ひかり）掛（か）け合（あ）わせて</span><br><span class="line">越（こ）えていこう　迷（まよ）わずに</span><br><span class="line"></span><br><span class="line">君（きみ）へと届（とど）け　この僕（ぼく）の歌（うた）</span><br><span class="line">未来（あす）を　目指（めざ）す　想（おも）い乗（の）せ</span><br><span class="line">強（つよ）く　いま遠（とお）く　さぁ伝（つた）えてくれ</span><br><span class="line">遙（はる）か　彼方（かなた）　夢（ゆめ）の先（さき）へ</span><br><span class="line"></span><br><span class="line">君（きみ）へと届（とど）け　この僕（ぼく）の歌（うた）</span><br><span class="line">空（そら）に　舞（ま）った　果（は）てない夢（ゆめ）</span><br><span class="line">遠（とお）く　まだ遠（とお）く　さぁ叶（かな）えにいこう</span><br><span class="line">遙（はる）か　彼方（かなた）　虹（にじ）の先（さき）へ</span><br><span class="line"></span><br><span class="line">未来（あす）へと届（とど）け　この僕等（ぼくら）の歌（うた）</span><br><span class="line">風（かぜ）に　翔（かけ）る　想（おも）い乗（の）せ</span><br><span class="line">遠（とお）く　いま遠（とお）く　あぁ伝（つた）えにいく</span><br><span class="line">遙（はる）か　彼方（かなた）　夢（ゆめ）の先（さき）へ</span><br></pre></td></tr></table></figure><h2 id="其他感想"><a href="#其他感想" class="headerlink" title="其他感想"></a>其他感想</h2><p>笔者被高中同学说过声音很像喜多修平，有一种唱很燃的日漫主题曲的味道。<br>他被大家熟知大多是因为「夏目友人帐」第一季OP「一斉の声」。<br>其实除了动漫、游戏曲之外，喜多修平也有许多优秀的作品。<br>因此这里传达这首歌，同时也传达一下这首歌非常励志的歌词。<br>笔者的博客签名也是来源于这首歌哦~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;歌曲信息&quot;&gt;&lt;a href=&quot;#歌曲信息&quot; class=&quot;headerlink&quot; title=&quot;歌曲信息&quot;&gt;&lt;/a&gt;歌曲信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;歌曲：Beyond the Rainbow ～ユメミルセカイ～&lt;/li&gt;
&lt;li&gt;歌手：喜多修平（きた しゅうへい）&lt;/li&gt;
&lt;li&gt;作词：喜多修平&lt;/li&gt;
&lt;li&gt;作曲：喜多修平&lt;/li&gt;
&lt;li&gt;编曲：铃木マサキ&lt;/li&gt;
&lt;li&gt;专辑：ユメミルセカイ（2013年7月24日发行）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;这首歌不是动漫的主题曲，所以知名度并不高，这其实是喜多修平第二张专辑的主打歌。&lt;br&gt;从开始发行开始到现在笔者还一直在听，快5年了，非常燃、好听的一首歌，而且歌词写的非常好。&lt;br&gt;歌词里面有许多双关的地方，比如「幻想」和「夢想」唱成「まぼろし」，「無限」唱成「なないろ」之类的。&lt;br&gt;这样的歌词设计使得歌词的意义可以很好地传达到，同时唱起来也非常的有气势。&lt;/p&gt;
    
    </summary>
    
      <category term="ニホンゴ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/"/>
    
      <category term="ウタ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/%E3%82%A6%E3%82%BF/"/>
    
    
      <category term="喜多修平" scheme="http://tashi711.xyz/tags/%E5%96%9C%E5%A4%9A%E4%BF%AE%E5%B9%B3/"/>
    
  </entry>
  
  <entry>
    <title>「MICHI - Cry for the Truth」鑑賞</title>
    <link href="http://tashi711.xyz/nihongo/uta/cry-for-the-truth/"/>
    <id>http://tashi711.xyz/nihongo/uta/cry-for-the-truth/</id>
    <published>2018-04-04T16:15:55.000Z</published>
    <updated>2018-04-06T18:22:57.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="歌曲信息"><a href="#歌曲信息" class="headerlink" title="歌曲信息"></a>歌曲信息</h2><blockquote><ul><li>歌曲：Cry for the Truth</li><li>歌手：MICHI</li><li>作词：RUCCA</li><li>作曲：藤田淳平（Elements Garden）</li><li>编曲：岩橋星実</li><li>专辑：Cry for the Truth/Secret Sky（2015年7月22日发行）</li><li>其他：六花的勇者（六花の勇者）OP</li></ul></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>当年在音悦Tai看MV时不经意间瞄到这首歌，意外的caught my heart。<br>这首歌算是MICHI这位冷门歌手最知名的歌了，大概因为是「六花的勇者」的OP吧。<br>不过这部冷门的动漫也没有看过，据说是一部根据轻小说改编的推理番。<br>很少有这么一首动漫主题曲不是因为其动漫或者歌手本身而具有这么强大的吸引力。<br>歌里面将「哀歌」唱成「エレジー」，将「理想郷」唱成「ユートピア」也是非常的有feeling。</p><a id="more"></a><h2 id="假名歌词"><a href="#假名歌词" class="headerlink" title="假名歌词"></a>假名歌词</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">衝動（しょうどう）から　幕開（まくあ）ける運命（うんめい）たち</span><br><span class="line">待（ま）つのは　希望（きぼう）か　絶望（ぜつぼう）か</span><br><span class="line">紅（あか）く錆（さ）びた　時世（ときよ）の歯車（はぐるま）が今（いま）</span><br><span class="line">軋（きし）んで　嘲笑（あざわら）う</span><br><span class="line"></span><br><span class="line">静寂（せいじゃく）を掻（か）き消（け）す慟哭（どうこく）</span><br><span class="line">この胸（むね）を引（ひ）き裂（さ）く哀歌（エレジー）</span><br><span class="line">身体中（からだじゅう）　暴（あば）れ出（だ）す</span><br><span class="line">血潮（ちしお）が叫（さけ）ぶ想（おも）いは　「君（きみ）よ、止（と）まるな」</span><br><span class="line"></span><br><span class="line">立（た）ち向（む）かえ　幾千（いくせん）芽吹（めぶ）くその困難（こんなん）に</span><br><span class="line">白（しろ）か　黒（くろ）か　暴（あば）くその宿命（しゅくめい）に</span><br><span class="line">生（い）きとし　生（い）けるものすべて</span><br><span class="line">心臓（しんぞう）を叩（たた）く理由（わけ）がある　そして　Cry for the truth</span><br><span class="line"></span><br><span class="line">「何故（なぜ）こんなに　心（こころ）は傷付（きずつ）いてるの？」</span><br><span class="line">記憶（きおく）に　響（ひび）いた　幼（おさな）い声（こえ）</span><br><span class="line">白（しろ）い闇（やみ）に　ぼんやりと浮（う）かび上（あ）がる</span><br><span class="line">誓（ちか）いと　理想郷（ユートピア）</span><br><span class="line"></span><br><span class="line">水泡（あわ）のように消（き）えてく望郷（ぼうきょう）</span><br><span class="line">揺（ゆ）れ惑（まど）う存在証明（そんざいしょうめい）</span><br><span class="line">憂（うれ）いさえ　引（ひ）き連（つ）れて</span><br><span class="line">戦（たたか）うその眼差（まなざ）しで　明日（あす）を　貫（つらぬ）け</span><br><span class="line"></span><br><span class="line">掴（つか）み取（と）れ　生命（いのち）果（は）てるまで何度（なんど）でも</span><br><span class="line">熱（あつ）き　願（ねが）い　それぞれの空（そら）の下（した）</span><br><span class="line">宵空（よいぞら）を　隠（かく）す銀（ぎん）の雨（あめ）</span><br><span class="line">拭（ぬぐ）い去（さ）ってまた駆（か）け抜（ぬ）けろ　きっと　Life is a fate</span><br><span class="line"></span><br><span class="line">仕組（しく）まれたラビリンスで　三日月（みかづき）胸（むね）を刺（さ）す</span><br><span class="line">「君（きみ）は誰（だれ）？」　「私（わたし）は誰（だれ）？」　リフレインする</span><br><span class="line">信（しん）じあうただその為（ため）に　誰（だれ）も皆（みんな）産（う）まれた</span><br><span class="line">花（はな）も　鳥（とり）も　風（かぜ）も　月（つき）さえ　この夜（よる）</span><br><span class="line"></span><br><span class="line">立（た）ち向（む）かえ　幾千（いくせん）芽吹（めぶ）くその困難（こんなん）に</span><br><span class="line">白（しろ）か　黒（くろ）か　暴（あば）くその宿命（しゅくめい）に</span><br><span class="line">生（い）きとし　生（い）けるものすべて</span><br><span class="line">心臓（しんぞう）を叩（たた）く理由（わけ）がある　そして　Cry for the truth</span><br></pre></td></tr></table></figure><h2 id="其他感想"><a href="#其他感想" class="headerlink" title="其他感想"></a>其他感想</h2><p>希望通过这个系列记录一些曾经听过的非常好听但是比较冷门的日语歌。<br>同时利用Word的拼音指南功能，将歌词用假名注音校对后用于学唱。<br>MICHI还有一首更加冷门却非常好听的歌叫「Journey」，有机会做一篇这首歌的鉴赏。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;歌曲信息&quot;&gt;&lt;a href=&quot;#歌曲信息&quot; class=&quot;headerlink&quot; title=&quot;歌曲信息&quot;&gt;&lt;/a&gt;歌曲信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;歌曲：Cry for the Truth&lt;/li&gt;
&lt;li&gt;歌手：MICHI&lt;/li&gt;
&lt;li&gt;作词：RUCCA&lt;/li&gt;
&lt;li&gt;作曲：藤田淳平（Elements Garden）&lt;/li&gt;
&lt;li&gt;编曲：岩橋星実&lt;/li&gt;
&lt;li&gt;专辑：Cry for the Truth/Secret Sky（2015年7月22日发行）&lt;/li&gt;
&lt;li&gt;其他：六花的勇者（六花の勇者）OP&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;当年在音悦Tai看MV时不经意间瞄到这首歌，意外的caught my heart。&lt;br&gt;这首歌算是MICHI这位冷门歌手最知名的歌了，大概因为是「六花的勇者」的OP吧。&lt;br&gt;不过这部冷门的动漫也没有看过，据说是一部根据轻小说改编的推理番。&lt;br&gt;很少有这么一首动漫主题曲不是因为其动漫或者歌手本身而具有这么强大的吸引力。&lt;br&gt;歌里面将「哀歌」唱成「エレジー」，将「理想郷」唱成「ユートピア」也是非常的有feeling。&lt;/p&gt;
    
    </summary>
    
      <category term="ニホンゴ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/"/>
    
      <category term="ウタ" scheme="http://tashi711.xyz/categories/%E3%83%8B%E3%83%9B%E3%83%B3%E3%82%B4/%E3%82%A6%E3%82%BF/"/>
    
    
      <category term="MICHI" scheme="http://tashi711.xyz/tags/MICHI/"/>
    
      <category term="六花の勇者" scheme="http://tashi711.xyz/tags/%E5%85%AD%E8%8A%B1%E3%81%AE%E5%8B%87%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>「Codeforces 955 - C. Sad powers」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/codeforces/codeforces-955-C/"/>
    <id>http://tashi711.xyz/programming/reports/codeforces/codeforces-955-C/</id>
    <published>2018-04-02T16:11:04.000Z</published>
    <updated>2018-04-06T18:19:08.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="http://codeforces.com/problemset/problem/955/C" target="_blank" rel="noopener">Codeforces 955 - C. Sad powers</a></li><li>来源：Codeforces</li><li>场次：<a href="http://codeforces.com/contest/955" target="_blank" rel="noopener">Round #471 (Div. 2) - C</a></li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定 $Q$ $(1≤Q≤10^5)$ 组询问 $(L,R)$ $(1≤L≤R≤10^{18})$。<br>对每组询问回答有多少个 $x$ $(L≤x≤R)$ 满足存在 $a&gt;0,$ $p&gt;1$ 使得 $x=a^p$。<br>比如样例询问 $(1,4)$，结果为 $2$ $(1=1^2,$ $4=2^2)$。<br>时间限制：2s。<br>空间限制：256M。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先看到是个多组独立的区间询问问题，第一反应是看看能不能做预处理+离线询问。<br>然而看到数据范围已经达到了long long的量级，就还是只能考虑在线算法。<br>于是这就要求用非常高效的做法解决每一次询问，初步的想法是可以枚举a或者p。<br>a可能的范围从1到 $\sqrt{10^{18}}=10^9$，而p可能的范围从2到 $\log_2 10^{18} \approx 60$。<br>当然a为1的时候p理论上可以达到无穷大，但这种情况只可能在判断x为1的时候，也就是L必须为1。<br>因此只需要在L为1的时候特判一下，x为1显然满足，除此之外的情况下p不可能超过60。<br>那么显然枚举p比枚举a更可行，对每个枚举的p来说：<br>最小满足的a为 $a_\min = \lceil \sqrt[p]{L} \rceil$，最大满足的a为 $a_\max = \lfloor \sqrt[p]{R} \rfloor$。<br>$a_\min$ 与 $a_\max$ 中间包含的a一定都满足要求，只需注意一点：<br>L、R靠的太近时可能出现 $a_\min&gt;a_\max$，那么对这个p来说就没有a满足要求。<br>此时考虑重复统计的问题，首先能想到的是只需要枚举质数p就好。<br>因为满足要求的x如果在某个合数p中能统计到，那么在p的质因数上也能统计到。<br>但此时还有一个问题，如果某个满足要求的x是某个a的合数p次方，这个p有大于等于2个质因数。<br>那么这个x还是会在枚举p的这几个质因数时分别统计到，比如 $64=8^2=4^3$。<br>因此还需要对60以内的质数做一下容斥，因为范围比较小，最多算到第三重。<br>稍微笔算一下就能把需要考虑减去的两两相乘与需要再加上的3个质因数相乘的结果预处理好。<br>这个问题理论上也就完美解决啦。</p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><p>求 $a_\min$ 与 $a_\max$ 时需要求p次方根，能想到的方法是利用cmath库的pow函数求$1 \over p$次方。<br>但是pow的精度非常有限，在处理long long级别的数值时候会出现精度问题。<br>此时有两个解决方法，一是用二分的方法找到精确的整数解：<br>对每个枚举的p，这种方法的时间复杂度为二分复杂度×求幂复杂度。<br>假设数值范围（L、R的范围）为M（即 $1≤M≤10^{18}$），并且考虑使用快速幂。<br>则每次询问p的时间复杂度为 $O(\log M \cdot \log \log M)$。尝试此方法后发现TLE了。<br>第二种方法是依旧使用pow，但是需要手动矫正因精度误差带来的问题。<br>据<strong>不负责任的</strong>尝试，发现在这道题目的数据范围约束下pow结果的误差在±1以内。<br>于是就有了以下的做法（当然实际中是通过以下的做法发现了其误差范围）：<br>算出pow的结果按指定方向取整得到的a备选值res后，计算res-1与res+1作为返回的a是否满足要求。<br>最终返回调整之后相应的a，计算是否满足要求的时候也考虑使用快速幂。<br>此时每次询问p的时间复杂度为 $O(\log M + \log \log M)$。<br>虽然后者项已经算是前者项的低阶项了，不过这道题目确实很卡时间，还是将所有影响时间的因素都考虑进去。<br>显然这样做会比之前第一种方法快，也在2s的时限内用1s+惊险的AC了。<br>此外，计算快速幂时可能会溢出，因为范围已经是long long级别的了，只能通过符号的变换来判断是否溢出。<br>如果每次倍增的辅助数或者中间结果中的任一个算出来小于等于0就说明已经溢出了。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>假设数值范围为M，上面分析了每次询问p的时间复杂度，p的枚举量是 $\log M$ 的。<br>因此总的时间复杂度为 $O(N(\log M + \log \log M)\log M) \Rightarrow O(N \log^2 M)$。<br>空间复杂度为 $O(\log M)$。<br>其实理论上空间复杂度只需 $O(1)$，这里考虑了存放通过容斥原理预处理的需要枚举的p值。</p><h2 id="AC代码（Microsoft-Visual-C-2010）"><a href="#AC代码（Microsoft-Visual-C-2010）" class="headerlink" title="AC代码（Microsoft Visual C++ 2010）"></a>AC代码（Microsoft Visual C++ 2010）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_P = <span class="number">19</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_M = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> MAXLL = <span class="number">0x7FFFFFFFFFFFFFFF</span>LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> plus_p[N_P] = &#123;</span><br><span class="line"><span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>,</span><br><span class="line"><span class="number">30</span>, <span class="number">42</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> minus_p[N_M] = &#123;</span><br><span class="line"><span class="number">6</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">22</span>, <span class="number">26</span>, <span class="number">34</span>, <span class="number">38</span>, <span class="number">46</span>, <span class="number">58</span>,</span><br><span class="line"><span class="number">15</span>, <span class="number">21</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">51</span>, <span class="number">57</span>,</span><br><span class="line"><span class="number">35</span>, <span class="number">55</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">my_pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>, h = a;</span><br><span class="line"><span class="keyword">while</span> (k) &#123;</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span>) &#123;</span><br><span class="line">res *= h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (h &lt;= <span class="number">0</span> || res &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> MAXLL;</span><br><span class="line">&#125;</span><br><span class="line">h *= h;</span><br><span class="line">k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">find_left</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = (<span class="keyword">long</span> <span class="keyword">long</span>)<span class="built_in">ceil</span>(<span class="built_in">pow</span>(l, <span class="number">1.0</span> / k)) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (my_pow(res - <span class="number">1</span>, k) &gt;= l) &#123;</span><br><span class="line">res--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">find_right</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> r, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = (<span class="keyword">long</span> <span class="keyword">long</span>)<span class="built_in">floor</span>(<span class="built_in">pow</span>(r, <span class="number">1.0</span> / k)) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (my_pow(res + <span class="number">1</span>, k) &lt;= r) &#123;</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> l, <span class="keyword">long</span> <span class="keyword">long</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (l == <span class="number">1</span>) &#123;</span><br><span class="line">ans++;</span><br><span class="line">l++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N_P; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> p = plus_p[i];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> min_a = find_left(l, p);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> max_a = find_right(r, p);</span><br><span class="line"><span class="keyword">if</span> (min_a &lt;= max_a) &#123;</span><br><span class="line">ans += max_a - min_a + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "+: " &lt;&lt; p &lt;&lt; ' ' &lt;&lt; min_a &lt;&lt; ' ' &lt;&lt; max_a &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N_M; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> p = minus_p[i];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> min_a = find_left(l, p);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> max_a = find_right(r, p);</span><br><span class="line"><span class="keyword">if</span> (min_a &lt;= max_a) &#123;</span><br><span class="line">ans -= max_a - min_a + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; "-: " &lt;&lt; p &lt;&lt; ' ' &lt;&lt; min_a &lt;&lt; ' ' &lt;&lt; max_a &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> l, r;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>, &amp;l, &amp;r);</span><br><span class="line">calc(l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解题心得"><a href="#解题心得" class="headerlink" title="解题心得"></a>解题心得</h2><p>在比赛之外做的，花了很久时间才做到AC，如果是比赛当场做估计是做不出来的。<br>这道题难度不是很大，但是会造成WA的细节非常多。<br>如果放宽时间的限制，笔者认为用二分寻找 $a_\min$ 与 $a_\max$ 才是这道题最优雅的解法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;http://codeforces.com/problemset/problem/955/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 955 - C. Sad powers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：Codeforces&lt;/li&gt;
&lt;li&gt;场次：&lt;a href=&quot;http://codeforces.com/contest/955&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Round #471 (Div. 2) - C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;给定 $Q$ $(1≤Q≤10^5)$ 组询问 $(L,R)$ $(1≤L≤R≤10^{18})$。&lt;br&gt;对每组询问回答有多少个 $x$ $(L≤x≤R)$ 满足存在 $a&amp;gt;0,$ $p&amp;gt;1$ 使得 $x=a^p$。&lt;br&gt;比如样例询问 $(1,4)$，结果为 $2$ $(1=1^2,$ $4=2^2)$。&lt;br&gt;时间限制：2s。&lt;br&gt;空间限制：256M。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="Codeforces" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/Codeforces/"/>
    
    
      <category term="快速幂" scheme="http://tashi711.xyz/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
      <category term="容斥原理" scheme="http://tashi711.xyz/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 805. Split Array With Same Average」解题报告</title>
    <link href="http://tashi711.xyz/programming/reports/leetcode/leetcode-805/"/>
    <id>http://tashi711.xyz/programming/reports/leetcode/leetcode-805/</id>
    <published>2018-04-01T16:25:42.000Z</published>
    <updated>2018-04-13T11:29:13.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/split-array-with-same-average/description/" target="_blank" rel="noopener">LeetCode 805. Split Array With Same Average</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定N个整数，判断是否能分成均值相同的两堆（非空），N范围为1到30，数值范围为0到10000。<br>比如样例 [1,2,3,4,5,6,7,8] 可以分成 [1,4,5,8] 和 [2,3,6,7] 两组，均值为4.5。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>初看题目直觉是NP的，看完数据范围更加确定了这一点，暴搜复杂度 $2^{30}$，不好剪枝，显然会TLE。<br>首先N=1时一定返回false，因为无论怎么分总有一堆为空，于是只需考虑N≥2。<br>先将这组数字分成数量相同的两堆，N为奇数时任意一堆多放一个即可。<br>暴搜出两堆各自能产生的所有组合的均值，复杂度为 $2^{15}$。<br>如果存在一个合理的分法满足题目要求，那么最终结果的两堆数字的均值应该都等于整组数据的均值。<br>此时要么在某一堆里能计算出这个均值，要么从两堆里各取一组加权平均后等于这个均值。<br>如果尝试两两组合算出所有的可能性，那么复杂度依旧为 $(2^{15})^2=2^{30}$。<br>有一个直观的想法是，两个堆算出的均值结果进行排序。<br>用两个指针分别指向一个堆均值的最小值（小堆），以及另一个堆均值的最大值（大堆）。<br>若当前指针指向的两组数加权平均比总体均值要大，那么将大堆指针往小的方向移，否则将小堆指针往大的方向移。<br>这样就只需要线性的复杂度扫描了，但这样做的前提是指针移走后的值不会继续用到了。<br>实际实现这个算法提交后发现WA了，分析一波错的数据，发现这个做法会出现问题的原因在于，可能出现这种情况：<br>例如小堆中目前指向的那组数个数非常多，而大堆中目前以及往小方向的连续几组数个数都比较少。<br>在此时算出的加权均值小于总体均值，由于小堆的一方数量上的优势会使大堆的指针往小方向连续移好几个。<br>若此时算出的加权均值又大于了总体均值，且小堆中往大方向连续几组数个数都更少，<br>那么小堆的指针又会往大的方向移很多个，那么可能在两次连续移动的中间分别存在一组数能凑成最终的答案。<br>一个解决这个问题的方法是，一开始将数据都去均值化。<br>如果存在一个合理的分法，那么最终结果的两堆数字的均值应该都等于0，等价于和为0。<br>如果将均值考虑成求和，那么上面说到的问题就不存在了，因为数量只对加权平均有影响，而对求和没有影响。<br>可以简单的证明，一旦指针移走，前面的值就不会再考虑到了。<br>因此上面的算法，将所有求平均的地方换成求和，这个问题就可以圆满解决了。</p><h3 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h3><ol><li>虽然浮点数在乘除法上的迭代不多，但是还是要用相差在一定精度范围来判断两个浮点数是否相等。</li><li>在考虑从两堆和里面各取一部分时，可能出现在两堆中都取了全部的数字，此时形成的另一堆会是空集。<br>要解决这个问题还是要记录组成当前和的元素个数，若求和的两组数的数量之和等于N了就跳过。</li></ol><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>考虑排序在内，时间复杂度为 $O(2^{N/2}\log 2^{N/2})=O(\frac{N}{2}\cdot2^{N/2})$。<br>N为数组长度，在N≤30时是可以接受的。<br>空间复杂度为 $O(2^{N/2})$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> a[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">splitArraySameAverage</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">n = (<span class="keyword">int</span>)A.size();</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">res += A[i];</span><br><span class="line">&#125;</span><br><span class="line">res /= n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">a[i] = A[i - <span class="number">1</span>] - res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> work();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> sum;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line">node(<span class="keyword">double</span> _sum = <span class="number">0</span>, <span class="keyword">int</span> _cnt = <span class="number">0</span>) : sum(_sum), cnt(_cnt) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;r) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sum &lt; r.sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> ed, <span class="built_in">vector</span>&lt;node&gt; &amp;adj, <span class="keyword">double</span> sum, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == ed + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (cnt != <span class="number">0</span>) &#123;</span><br><span class="line">adj.emplace_back(sum, cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(p + <span class="number">1</span>, ed, adj, sum + a[p], cnt + <span class="number">1</span>);</span><br><span class="line">dfs(p + <span class="number">1</span>, ed, adj, sum, cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">my_equal</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">fabs</span>(x - y) &lt; EPS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = n / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; left, right;</span><br><span class="line">dfs(<span class="number">1</span>, m, left, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">dfs(m + <span class="number">1</span>, n, right, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">sort(left.begin(), left.end());</span><br><span class="line">sort(right.begin(), right.end());</span><br><span class="line"><span class="keyword">int</span> u = <span class="number">0</span>, v = (<span class="keyword">int</span>)right.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; left.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">double</span> avg = left[i].sum;</span><br><span class="line"><span class="keyword">if</span> (my_equal(avg, <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (u &lt; (<span class="keyword">int</span>)left.size() &amp;&amp; v &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> tot = left[u].cnt + right[v].cnt;</span><br><span class="line"><span class="keyword">double</span> avg = left[u].sum + right[v].sum;</span><br><span class="line"><span class="keyword">if</span> (my_equal(avg, <span class="number">0</span>) &amp;&amp; tot != n) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (avg &lt; <span class="number">0</span>) &#123;</span><br><span class="line">++u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">--v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解题心得"><a href="#解题心得" class="headerlink" title="解题心得"></a>解题心得</h2><p>最近在前室友的带领下刚入坑LeetCode，这种提交接口而不是整个程序的方式还是第一次尝试。<br>当然刚开始也踩了许多坑，比如全局变量的使用。<br>看了官方文档才发现，实际测试时，同一个全局变量是会被多个实例反复调用的。<br>因此全局变量必须每次都初始化，根据文档的提醒最好的方式是不要使用全局变量。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/split-array-with-same-average/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 805. Split Array With Same Average&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;给定N个整数，判断是否能分成均值相同的两堆（非空），N范围为1到30，数值范围为0到10000。&lt;br&gt;比如样例 [1,2,3,4,5,6,7,8] 可以分成 [1,4,5,8] 和 [2,3,6,7] 两组，均值为4.5。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.xyz/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="搜索" scheme="http://tashi711.xyz/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
</feed>
