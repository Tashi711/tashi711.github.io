<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tashi711的博客</title>
  
  <subtitle>過去（きのう）に傷付きながらも、信じ続ける理想（ゆめ）を求める。いつか無限（なないろ）に輝き放って、青空（そら）に橋を描く。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tashi711.top/"/>
  <updated>2019-04-03T16:25:53.732Z</updated>
  <id>http://tashi711.top/</id>
  
  <author>
    <name>Tashi711</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「LeetCode 2. Add Two Numbers」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-2/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-2/</id>
    <published>2019-04-03T03:57:02.000Z</published>
    <updated>2019-04-03T16:25:53.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/add-two-numbers/" target="_blank" rel="noopener">LeetCode 2. Add Two Numbers</a></li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>看了题解发现自己写的很痴系列，注意细节即可。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(N)$。<br>空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">ListNode * <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    ListNode *res = <span class="literal">nullptr</span>, *tail = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line">      <span class="keyword">int</span> cur = l1-&gt;val + l2-&gt;val + carry;</span><br><span class="line">      <span class="keyword">int</span> rem = cur % <span class="number">10</span>;</span><br><span class="line">      carry = cur / <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">auto</span> *now = <span class="keyword">new</span> ListNode(rem);</span><br><span class="line">      <span class="keyword">if</span> (tail) &#123;</span><br><span class="line">        tail-&gt;next = now;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res = now;</span><br><span class="line">      &#125;</span><br><span class="line">      tail = now;</span><br><span class="line">      l1 = l1-&gt;next;</span><br><span class="line">      l2 = l2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (l1) &#123;</span><br><span class="line">      <span class="keyword">int</span> cur = l1-&gt;val + carry;</span><br><span class="line">      <span class="keyword">int</span> rem = cur % <span class="number">10</span>;</span><br><span class="line">      carry = cur / <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">auto</span> *now = <span class="keyword">new</span> ListNode(rem);</span><br><span class="line">      <span class="keyword">if</span> (tail) &#123;</span><br><span class="line">        tail-&gt;next = now;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res = now;</span><br><span class="line">      &#125;</span><br><span class="line">      tail = now;</span><br><span class="line">      l1 = l1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (l2) &#123;</span><br><span class="line">      <span class="keyword">int</span> cur = l2-&gt;val + carry;</span><br><span class="line">      <span class="keyword">int</span> rem = cur % <span class="number">10</span>;</span><br><span class="line">      carry = cur / <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">auto</span> *now = <span class="keyword">new</span> ListNode(rem);</span><br><span class="line">      <span class="keyword">if</span> (tail) &#123;</span><br><span class="line">        tail-&gt;next = now;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res = now;</span><br><span class="line">      &#125;</span><br><span class="line">      tail = now;</span><br><span class="line">      l2 = l2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry) &#123;</span><br><span class="line">      <span class="keyword">auto</span> *now = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">      tail-&gt;next = now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/add-two-numbers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 2. Add Two Numbers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;看了题解发现自己写的很痴系列，注意细节即可。&lt;/p&gt;
&lt;h3 id=&quot;复杂度分析&quot;&gt;&lt;a href=&quot;#复杂度分析&quot; class=&quot;headerlink&quot; title=&quot;复杂度分析&quot;&gt;&lt;/a&gt;复杂度分析&lt;/h3&gt;&lt;p&gt;时间复杂度为$O(N)$。&lt;br&gt;空间复杂度为$O(N)$。&lt;/p&gt;
&lt;h2 id=&quot;AC代码（C-）&quot;&gt;&lt;a href=&quot;#AC代码（C-）&quot; class=&quot;headerlink&quot; title=&quot;AC代码（C++）&quot;&gt;&lt;/a&gt;AC代码（C++）&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="链表" scheme="http://tashi711.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 1. Two Sum」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-1/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-1/</id>
    <published>2019-04-02T03:57:02.000Z</published>
    <updated>2019-04-03T16:26:11.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">LeetCode 1. Two Sum</a></li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>哈希，依次检查每个数k有没有target-k存在。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(N)$。<br>空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalTest</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">const</span> T&amp; ans)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">    ostream_iterator&lt;T&gt; out_it(<span class="built_in">cout</span>, <span class="string">" "</span>);</span><br><span class="line">    copy(ans.cbegin(), ans.cend(), out_it);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; f;</span><br><span class="line">    <span class="keyword">int</span> n = nums.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">auto</span> it = f.find(target - nums[i]);</span><br><span class="line">      <span class="keyword">if</span> (it != f.end()) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;it-&gt;second, i&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      f[nums[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unique_ptr</span>&lt;Solution&gt; solution(<span class="keyword">new</span> Solution);</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; input = &#123;<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>&#125;;</span><br><span class="line">  LocalTest::Print(solution-&gt;twoSum(input, <span class="number">9</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/two-sum/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 1. Two Sum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;哈希，依次检查每个数k有没有target-k存在。&lt;/p&gt;
&lt;h3 id=&quot;复杂度分析&quot;&gt;&lt;a href=&quot;#复杂度分析&quot; class=&quot;headerlink&quot; title=&quot;复杂度分析&quot;&gt;&lt;/a&gt;复杂度分析&lt;/h3&gt;&lt;p&gt;时间复杂度为$O(N)$。&lt;br&gt;空间复杂度为$O(N)$。&lt;/p&gt;
&lt;h2 id=&quot;AC代码（C-）&quot;&gt;&lt;a href=&quot;#AC代码（C-）&quot; class=&quot;headerlink&quot; title=&quot;AC代码（C++）&quot;&gt;&lt;/a&gt;AC代码（C++）&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="哈希" scheme="http://tashi711.top/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 730. Count Different Palindromic Subsequences」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-730/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-730/</id>
    <published>2019-04-01T03:57:03.000Z</published>
    <updated>2019-03-31T08:27:44.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/count-different-palindromic-subsequences/" target="_blank" rel="noopener">LeetCode 730. Count Different Palindromic Subsequences</a></li><li>来源：LeetCode</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定一个字符串 S，找出 S 中不同的非空回文子序列个数，并返回该数字与 10^9 + 7 的模。<br>通过从 S 中删除 0 个或多个字符来获得子字符序列。<br>如果一个字符序列与它反转后的字符序列一致，那么它是回文字符序列。<br>如果对于某个  i，A_i != B_i，那么 A_1, A_2, … 和 B_1, B_2, … 这两个字符序列是不同的。</p><p><strong>示例 1：</strong><br>输入：<br>S = ‘bccb’<br>输出：6<br>解释：<br>6 个不同的非空回文子字符序列分别为：’b’, ‘c’, ‘bb’, ‘cc’, ‘bcb’, ‘bccb’。<br>注意：’bcb’ 虽然出现两次但仅计数一次。</p><p><strong>示例 2：</strong><br>输入：<br>S = ‘abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba’<br>输出：104860361<br>解释：<br>共有 3104860382 个不同的非空回文子字符序列，对 10^9 + 7 取模为 104860361。</p><p><strong>提示：</strong><br>字符串 S 的长度将在[1, 1000]范围内。<br>每个字符 S[i] 将会是集合 {‘a’, ‘b’, ‘c’, ‘d’} 中的某一个。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>非常巧妙的解法，从最高赞答案搬运过来的，并且这个解法可以无视每个字符必须是规定集合中的某一个这个约束。<br>当然下面的代码写出来应该认为是一个n3方的解法，如果先预处理出low与high，其实还是一个平方的算法。<br>稍微解释DP的思路，dp[i][j]就是i到j的解，第一重循环是长度，从小到大枚举，第二层是起点，从左往右。<br>如果当前考虑段（i到j=i+len）的首尾（S[i]、S[j]）不一样时，显然是dp[i][j] = dp[i][j - 1] + dp[i + 1][j] - dp[i + 1][j - 1]。<br>如果首尾一样了（c=S[i]=S[j]），分以下3种情况：<br>1、中间没有c，那么dp[i][j] = dp[i + 1][j - 1] * 2 + 2，原因是任何dp[i + 1][j - 1]中的回文串si、都有c(si)c、加上c、加上cc<br>2、中间有一个c，那么dp[i][j] = dp[i + 1][j - 1] * 2 + 1，比上一种情况少个外加的c（原来就有c）<br>3、中间有至少两个c，设它们的位置在low和high，那么dp[i][j] = dp[i + 1][j - 1] * 2 - dp[low + 1][high - 1]，因为重复的就是任何dp[low + 1][high - 1]中的si与low、high的c组合以及与i、j的c组合都算了一遍。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(N^2)$。<br>空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> kModulus = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">countPalindromicSubsequences</span><span class="params">(<span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = S.size();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; dp(n, <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(n));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      dp[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt; n; ++len) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - len; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i + len;</span><br><span class="line">        <span class="keyword">if</span> (S[i] == S[j]) &#123;</span><br><span class="line">          <span class="keyword">int</span> low = i + <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">int</span> high = j - <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">while</span> (low &lt;= high &amp;&amp; S[low] != S[j]) &#123;</span><br><span class="line">            ++low;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> (low &lt;= high &amp;&amp; S[high] != S[j]) &#123;</span><br><span class="line">            --high;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (low &gt; high) &#123;</span><br><span class="line">            dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (low == high) &#123;</span><br><span class="line">            dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] * <span class="number">2</span> - dp[low + <span class="number">1</span>][high - <span class="number">1</span>];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          dp[i][j] = dp[i][j - <span class="number">1</span>] + dp[i + <span class="number">1</span>][j] - dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i][j] = (dp[i][j] + kModulus) % kModulus;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(dp[<span class="number">0</span>][n - <span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAns</span><span class="params">(<span class="keyword">int</span> ans)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unique_ptr</span>&lt;Solution&gt; solution(<span class="keyword">new</span> Solution);</span><br><span class="line">  PrintAns(solution-&gt;countPalindromicSubsequences(<span class="string">"bccb"</span>));</span><br><span class="line">  PrintAns(solution-&gt;countPalindromicSubsequences(</span><br><span class="line">    <span class="string">"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba"</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/count-different-palindromic-subsequences/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 730. Count Different Palindromic Subsequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;给定一个字符串 S，找出 S 中不同的非空回文子序列个数，并返回该数字与 10^9 + 7 的模。&lt;br&gt;通过从 S 中删除 0 个或多个字符来获得子字符序列。&lt;br&gt;如果一个字符序列与它反转后的字符序列一致，那么它是回文字符序列。&lt;br&gt;如果对于某个  i，A_i != B_i，那么 A_1, A_2, … 和 B_1, B_2, … 这两个字符序列是不同的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;br&gt;输入：&lt;br&gt;S = ‘bccb’&lt;br&gt;输出：6&lt;br&gt;解释：&lt;br&gt;6 个不同的非空回文子字符序列分别为：’b’, ‘c’, ‘bb’, ‘cc’, ‘bcb’, ‘bccb’。&lt;br&gt;注意：’bcb’ 虽然出现两次但仅计数一次。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;br&gt;输入：&lt;br&gt;S = ‘abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba’&lt;br&gt;输出：104860361&lt;br&gt;解释：&lt;br&gt;共有 3104860382 个不同的非空回文子字符序列，对 10^9 + 7 取模为 104860361。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;br&gt;字符串 S 的长度将在[1, 1000]范围内。&lt;br&gt;每个字符 S[i] 将会是集合 {‘a’, ‘b’, ‘c’, ‘d’} 中的某一个。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="动态规划" scheme="http://tashi711.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="回文串" scheme="http://tashi711.top/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 5. Longest Palindromic Substring」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-5/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-5/</id>
    <published>2019-03-31T03:57:03.000Z</published>
    <updated>2019-03-31T05:37:25.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">LeetCode 591. Tag Validator</a></li><li>来源：LeetCode</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p><p><strong>示例 1：</strong><br>输入: “babad”<br>输出: “bab”<br>注意: “aba” 也是一个有效答案。</p><p><strong>示例 2：</strong><br>输入: “cbbd”<br>输出: “bb”</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>Manacher算法，在网上找找相关资料基本能知道原理，这里说下以下几点：<br>1、网上很多资料都是如下的代码格式，却解释说mx是目前求到的最右端的位置，而这样写mx的实际意义其实是最右端再往右一个位置（即id+p[id]）的位置；<br>2、其实也可以像网上一样加一些边界值使得代码更简洁，但是看到有很多代码都忘记检查右边界值了，其实加pivot不是必须的，如下代码；<br>3、线性复杂度并不是那么明显，因为其实表面看还是两重循环，有一篇文章提到一个证明思路，最坏的情况是整个字符串都是同一个字母组成的，此时平均每个字符最多被访问的次数是常数次，因此这就是一个线性复杂度的算法，还有就是考虑真正会进入内层循环的条件，一定是会增大mx的时候，均摊一下也能得到这个算法是个线性复杂度的。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(N)$。<br>空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">char</span> kSpetialChar = <span class="string">'#'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.size();</span><br><span class="line">    <span class="built_in">string</span> ms&#123;kSpetialChar&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : s) &#123;</span><br><span class="line">      ms += c;</span><br><span class="line">      ms += kSpetialChar;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = ms.size();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(m);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>, pos = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">-1</span>, id = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">      p[i] = mx &gt; i ? min(p[<span class="number">2</span> * id - i], mx - i) : <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (i - p[i] &gt;= <span class="number">0</span> &amp;&amp; i + p[i] &lt; m &amp;&amp; ms[i - p[i]] == ms[i + p[i]]) &#123;</span><br><span class="line">        ++p[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (mx &lt; i + p[i]) &#123;</span><br><span class="line">        mx = i + p[i];</span><br><span class="line">        id = i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (ans &lt; p[i]) &#123;</span><br><span class="line">        ans = p[i];</span><br><span class="line">        pos = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substr((pos - ans + <span class="number">1</span>) / <span class="number">2</span>, ans - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAns</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; ans)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unique_ptr</span>&lt;Solution&gt; solution(<span class="keyword">new</span> Solution);</span><br><span class="line">  PrintAns(solution-&gt;longestPalindrome(<span class="string">"babad"</span>));</span><br><span class="line">  PrintAns(solution-&gt;longestPalindrome(<span class="string">"cbbd"</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-substring/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 591. Tag Validator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;br&gt;输入: “babad”&lt;br&gt;输出: “bab”&lt;br&gt;注意: “aba” 也是一个有效答案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;br&gt;输入: “cbbd”&lt;br&gt;输出: “bb”&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="回文串" scheme="http://tashi711.top/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 132. Palindrome Partitioning II」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-132/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-132/</id>
    <published>2019-03-30T03:57:03.000Z</published>
    <updated>2019-03-31T07:10:57.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/palindrome-partitioning-ii/" target="_blank" rel="noopener">LeetCode 132. Palindrome Partitioning II</a></li><li>来源：LeetCode</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。<br>返回符合要求的最少分割次数。</p><p><strong>示例:</strong><br>输入: “aab”<br>输出: 1<br>解释: 进行一次分割就可将 s 分割成 [“aa”,”b”] 这样两个回文子串。</p><a id="more"></a><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>比较容易想到一个n方的DP，需要先用n方时间与空间的预处理任意首位是否回文。<br>在讨论区搬过来一个答案非常巧妙，可以不需要预处理，节省空间。<br>其中dp[i]表示前i个字符最少的次数（注意移出了一个边界值-1，与后面计算中的+1后等于0保持实际意义的一致）<br>内层循环j枚举回文串中点（或者偶数时靠右的中点），到边界或者不回文时停止。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(N^2)$。<br>空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">minCut</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.size();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(n + <span class="number">1</span>, numeric_limits&lt;<span class="keyword">int</span>&gt;::max());</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; i - j &gt;= <span class="number">0</span> &amp;&amp; i + j &lt; n &amp;&amp; s[i - j] == s[i + j]; ++j) &#123;</span><br><span class="line">        dp[i + j + <span class="number">1</span>] = min(dp[i + j + <span class="number">1</span>], <span class="number">1</span> + dp[i - j]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; i - j + <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; i + j &lt; n &amp;&amp; s[i - j + <span class="number">1</span>] == s[i + j];</span><br><span class="line">        ++j) &#123;</span><br><span class="line">        dp[i + j + <span class="number">1</span>] = min(dp[i + j + <span class="number">1</span>], <span class="number">1</span> + dp[i - j + <span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAns</span><span class="params">(<span class="keyword">int</span> ans)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unique_ptr</span>&lt;Solution&gt; solution(<span class="keyword">new</span> Solution);</span><br><span class="line">  PrintAns(solution-&gt;minCut(<span class="string">"aab"</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/palindrome-partitioning-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 132. Palindrome Partitioning II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。&lt;br&gt;返回符合要求的最少分割次数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;br&gt;输入: “aab”&lt;br&gt;输出: 1&lt;br&gt;解释: 进行一次分割就可将 s 分割成 [“aa”,”b”] 这样两个回文子串。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="动态规划" scheme="http://tashi711.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="回文串" scheme="http://tashi711.top/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>「POJ 3468 - A Simple Problem with Integers」解题报告</title>
    <link href="http://tashi711.top/programming/reports/others/poj-3468/"/>
    <id>http://tashi711.top/programming/reports/others/poj-3468/</id>
    <published>2019-03-28T16:11:04.000Z</published>
    <updated>2019-03-29T13:56:14.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="http://poj.org/problem?id=3468" target="_blank" rel="noopener">POJ 3468 - A Simple Problem with Integers</a></li><li>来源：POJ Monthly–2007.11.25, Yang Yi</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>N个整数（-1000000000 ≤ Ai ≤ 1000000000），Q次询问（1 ≤ N,Q ≤ 100000）。<br>每次询问要么是”C a b c”，表示区间[a, b]的每个数加c. -10000 ≤ c ≤ 10000。<br>要么是”Q a b”，表示询问区间[a, b]的和。</p><a id="more"></a><p><strong>输入样例：</strong><br>10 5<br>1 2 3 4 5 6 7 8 9 10<br>Q 4 4<br>Q 1 10<br>Q 2 4<br>C 3 6 3<br>Q 2 4</p><p><strong>输出样例：</strong><br>4<br>55<br>9<br>15</p><p><strong>时间限制：</strong><br>5s</p><p><strong>空间限制：</strong><br>128M</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>裸的线段树题，详见线段树浅析的那篇文章</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度均为$O((Q+N)\log N)$。<br>空间复杂度均为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  Node() : l(<span class="number">-1</span>), r(<span class="number">-1</span>), len(<span class="number">-1</span>), mid(<span class="number">-1</span>), pl(<span class="number">-1</span>), pr(<span class="number">-1</span>), add(<span class="number">0</span>), sum(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">int</span> l;</span><br><span class="line">  <span class="keyword">int</span> r;</span><br><span class="line">  <span class="keyword">int</span> len;</span><br><span class="line">  <span class="keyword">int</span> mid;</span><br><span class="line">  <span class="keyword">int</span> pl;</span><br><span class="line">  <span class="keyword">int</span> pr;</span><br><span class="line">  T add;</span><br><span class="line">  T sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  SegmentTree(<span class="keyword">int</span> n) : n_(n), tree_(n * <span class="number">4</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">    Build(<span class="number">1</span>, n_, vec);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T add, <span class="keyword">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= tree_[p].l &amp;&amp; v &gt;= tree_[p].r) &#123;</span><br><span class="line">      tree_[p].add += add;</span><br><span class="line">      tree_[p].sum += add * tree_[p].len;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    PushDown(p);</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= tree_[p].mid) &#123;</span><br><span class="line">      Update(u, v, add, tree_[p].pl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v &gt; tree_[p].mid) &#123;</span><br><span class="line">      Update(u, v, add, tree_[p].pr);</span><br><span class="line">    &#125;</span><br><span class="line">    PushUp(p);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">Query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= tree_[p].l &amp;&amp; v &gt;= tree_[p].r) &#123;</span><br><span class="line">      <span class="keyword">return</span> tree_[p].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    T res = <span class="number">0</span>;</span><br><span class="line">    PushDown(p);</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= tree_[p].mid) &#123;</span><br><span class="line">      res += Query(u, v, tree_[p].pl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v &gt; tree_[p].mid) &#123;</span><br><span class="line">      res += Query(u, v, tree_[p].pr);</span><br><span class="line">    &#125;</span><br><span class="line">    PushUp(p);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    tree_[p].sum = tree_[tree_[p].pl].sum + tree_[tree_[p].pr].sum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree_[p].add) &#123;</span><br><span class="line">      tree_[tree_[p].pl].add += tree_[p].add;</span><br><span class="line">      tree_[tree_[p].pr].add += tree_[p].add;</span><br><span class="line">      tree_[tree_[p].pl].sum += tree_[p].add * tree_[tree_[p].pl].len;</span><br><span class="line">      tree_[tree_[p].pr].sum += tree_[p].add * tree_[tree_[p].pr].len;</span><br><span class="line">      tree_[p].add = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; vec, <span class="keyword">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    tree_[p].l = l;</span><br><span class="line">    tree_[p].r = r;</span><br><span class="line">    tree_[p].len = r - l + <span class="number">1</span>;</span><br><span class="line">    tree_[p].mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">      tree_[p].sum = vec[l - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tree_[p].pl = p &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    tree_[p].pr = p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">    Build(l, tree_[p].mid, vec, tree_[p].pl);</span><br><span class="line">    Build(tree_[p].mid + <span class="number">1</span>, r, vec, tree_[p].pr);</span><br><span class="line">    PushUp(p);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">int</span> n_;</span><br><span class="line">  <span class="built_in">vector</span>&lt;Node&lt;T&gt;&gt; tree_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, q;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; vec(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;vec[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  SegmentTree&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; st(n);</span><br><span class="line">  st.Init(vec);</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> add;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">0</span>; i &lt; q; ++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'C'</span>) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;u, &amp;v, &amp;add);</span><br><span class="line">      st.Update(u, v, add);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, st.Query(u, v));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;http://poj.org/problem?id=3468&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;POJ 3468 - A Simple Problem with Integers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：POJ Monthly–2007.11.25, Yang Yi&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;N个整数（-1000000000 ≤ Ai ≤ 1000000000），Q次询问（1 ≤ N,Q ≤ 100000）。&lt;br&gt;每次询问要么是”C a b c”，表示区间[a, b]的每个数加c. -10000 ≤ c ≤ 10000。&lt;br&gt;要么是”Q a b”，表示询问区间[a, b]的和。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="其他" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="线段树" scheme="http://tashi711.top/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>「线段树」浅析</title>
    <link href="http://tashi711.top/programming/dsaa/segment-tree/"/>
    <id>http://tashi711.top/programming/dsaa/segment-tree/</id>
    <published>2019-03-28T03:15:34.000Z</published>
    <updated>2019-03-29T13:48:37.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h2><p>之前写过两篇关于树状数组的文章，提到了树状数组在区间操作上的不足，这篇文章以区间更新与求和为切入点简单介绍线段树。</p><h3 id="规定与细节"><a href="#规定与细节" class="headerlink" title="规定与细节"></a>规定与细节</h3><p>线段树的实现有很多种方式，为了统一细节，这里都遵守以下规则（这也是目前线段树比较大众化的写法）：</p><p>1、用连续一段数组存放结点，其中下标为1的结点为根结点，左右儿子结点（如果有）的下标分别为当前结点下标的2倍和2倍+1，下标范围不会超过4倍总线段长度（当然另一种做法是每次需要往下build的时候new一个新结点，这样会充分利用空间，但是不断地申请空间会比较慢）；</p><p>2、每段线段表示左闭右闭的区间，比如[1, 10]分成[1, 5]与[6, 10]，而不是等价用[1, 11)分成[1, 6)与[6, 11)；</p><p>3、分线段不均匀时优先将中间节点分到左边，比如[1, 3]分成[1, 2]与[3, 3]，而不是[1, 1]与[2, 3]；</p><p>4、区间操作的输入区间不改变（有一种现实是每次下放都将输入截断为不超过当前结点区间的范围）。</p><a id="more"></a><h2 id="懒标记"><a href="#懒标记" class="headerlink" title="懒标记"></a>懒标记</h2><p>线段树的精髓就在于懒标记了，考虑在某段区间加上一个数，要是每次都下放到每个单独结点，时间会非常慢，如果判断出对当前结点的区间做的操作统一时，可以将下放停在这个地方，表示下面的区间都要做同样的操作，当后面的操作不是作用于整个当前区间时，再把前面累积的操作一起下放。当然不光是求和，基本所有区间操作都可以用到这个trick。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  Node() : l(<span class="number">-1</span>), r(<span class="number">-1</span>), len(<span class="number">-1</span>), mid(<span class="number">-1</span>), pl(<span class="number">-1</span>), pr(<span class="number">-1</span>), add(<span class="number">0</span>), sum(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">int</span> l;</span><br><span class="line">  <span class="keyword">int</span> r;</span><br><span class="line">  <span class="keyword">int</span> len;</span><br><span class="line">  <span class="keyword">int</span> mid;</span><br><span class="line">  <span class="keyword">int</span> pl;</span><br><span class="line">  <span class="keyword">int</span> pr;</span><br><span class="line">  T add;</span><br><span class="line">  T sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  SegmentTree(<span class="keyword">int</span> n) : n_(n), tree_(n * <span class="number">4</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">    Build(<span class="number">1</span>, n_, vec);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T add, <span class="keyword">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= tree_[p].l &amp;&amp; v &gt;= tree_[p].r) &#123;</span><br><span class="line">      tree_[p].add += add;</span><br><span class="line">      tree_[p].sum += add * tree_[p].len;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    PushDown(p);</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= tree_[p].mid) &#123;</span><br><span class="line">      Update(u, v, add, tree_[p].pl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v &gt; tree_[p].mid) &#123;</span><br><span class="line">      Update(u, v, add, tree_[p].pr);</span><br><span class="line">    &#125;</span><br><span class="line">    PushUp(p);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">Query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= tree_[p].l &amp;&amp; v &gt;= tree_[p].r) &#123;</span><br><span class="line">      <span class="keyword">return</span> tree_[p].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    T res = <span class="number">0</span>;</span><br><span class="line">    PushDown(p);</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= tree_[p].mid) &#123;</span><br><span class="line">      res += Query(u, v, tree_[p].pl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v &gt; tree_[p].mid) &#123;</span><br><span class="line">      res += Query(u, v, tree_[p].pr);</span><br><span class="line">    &#125;</span><br><span class="line">    PushUp(p);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">PushUp</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    tree_[p].sum = tree_[tree_[p].pl].sum + tree_[tree_[p].pr].sum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">PushDown</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree_[p].add) &#123;</span><br><span class="line">      tree_[tree_[p].pl].add += tree_[p].add;</span><br><span class="line">      tree_[tree_[p].pr].add += tree_[p].add;</span><br><span class="line">      tree_[tree_[p].pl].sum += tree_[p].add * tree_[tree_[p].pl].len;</span><br><span class="line">      tree_[tree_[p].pr].sum += tree_[p].add * tree_[tree_[p].pr].len;</span><br><span class="line">      tree_[p].add = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; vec, <span class="keyword">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    tree_[p].l = l;</span><br><span class="line">    tree_[p].r = r;</span><br><span class="line">    tree_[p].len = r - l + <span class="number">1</span>;</span><br><span class="line">    tree_[p].mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">      tree_[p].sum = vec[l - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tree_[p].pl = p &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    tree_[p].pr = p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">    Build(l, tree_[p].mid, vec, tree_[p].pl);</span><br><span class="line">    Build(tree_[p].mid + <span class="number">1</span>, r, vec, tree_[p].pr);</span><br><span class="line">    PushUp(p);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">int</span> n_;</span><br><span class="line">  <span class="built_in">vector</span>&lt;Node&lt;T&gt;&gt; tree_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="复杂度分析与拓展"><a href="#复杂度分析与拓展" class="headerlink" title="复杂度分析与拓展"></a>复杂度分析与拓展</h2><p>在使用懒标记的情况下（上面程序的add），区间的更新与询问操作都是总长度的log级。</p><p>对于线段树，有许多种拓展方式，各种区间操作都可以巧妙地通过修改Update与Query函数来实现（例如区间都设为某个数，或者设为某个数与加上某个数两种操作交叉进行）。维度上，在二维树状数组那篇文章中也提到，线段树可以扩展到2维（四分树或者矩形树）甚至n维，且单次操作复杂度不发生改变（而树状数组随着维度的增加是会变为对数的多项式倍）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题提出&quot;&gt;&lt;a href=&quot;#问题提出&quot; class=&quot;headerlink&quot; title=&quot;问题提出&quot;&gt;&lt;/a&gt;问题提出&lt;/h2&gt;&lt;p&gt;之前写过两篇关于树状数组的文章，提到了树状数组在区间操作上的不足，这篇文章以区间更新与求和为切入点简单介绍线段树。&lt;/p&gt;
&lt;h3 id=&quot;规定与细节&quot;&gt;&lt;a href=&quot;#规定与细节&quot; class=&quot;headerlink&quot; title=&quot;规定与细节&quot;&gt;&lt;/a&gt;规定与细节&lt;/h3&gt;&lt;p&gt;线段树的实现有很多种方式，为了统一细节，这里都遵守以下规则（这也是目前线段树比较大众化的写法）：&lt;/p&gt;
&lt;p&gt;1、用连续一段数组存放结点，其中下标为1的结点为根结点，左右儿子结点（如果有）的下标分别为当前结点下标的2倍和2倍+1，下标范围不会超过4倍总线段长度（当然另一种做法是每次需要往下build的时候new一个新结点，这样会充分利用空间，但是不断地申请空间会比较慢）；&lt;/p&gt;
&lt;p&gt;2、每段线段表示左闭右闭的区间，比如[1, 10]分成[1, 5]与[6, 10]，而不是等价用[1, 11)分成[1, 6)与[6, 11)；&lt;/p&gt;
&lt;p&gt;3、分线段不均匀时优先将中间节点分到左边，比如[1, 3]分成[1, 2]与[3, 3]，而不是[1, 1]与[2, 3]；&lt;/p&gt;
&lt;p&gt;4、区间操作的输入区间不改变（有一种现实是每次下放都将输入截断为不超过当前结点区间的范围）。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="线段树" scheme="http://tashi711.top/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 591. Tag Validator」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-591/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-591/</id>
    <published>2019-03-21T03:57:03.000Z</published>
    <updated>2019-03-21T15:16:05.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/tag-validator/" target="_blank" rel="noopener">LeetCode 591. Tag Validator</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><a id="more"></a><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定一个表示代码片段的字符串，你需要实现一个验证器来解析这段代码，并返回它是否合法。合法的代码片段需要遵守以下的所有规则：<br>代码必须被合法的闭合标签包围。否则，代码是无效的。<br>闭合标签（不一定合法）要严格符合格式：&lt;TAG_NAME&gt;TAG_CONTENT&lt;/TAG_NAME&gt;。其中，&lt;TAG_NAME&gt;是起始标签，&lt;/TAG_NAME&gt;是结束标签。起始和结束标签中的 TAG_NAME 应当相同。当且仅当 TAG_NAME 和 TAG_CONTENT 都是合法的，闭合标签才是合法的。<br>合法的 TAG_NAME 仅含有大写字母，长度在范围 [1,9] 之间。否则，该 TAG_NAME 是不合法的。<br>合法的 TAG_CONTENT 可以包含其他合法的闭合标签，cdata （请参考规则7）和任意字符（注意参考规则1）除了不匹配的&lt;、不匹配的起始和结束标签、不匹配的或带有不合法 TAG_NAME 的闭合标签。否则，TAG_CONTENT 是不合法的。<br>一个起始标签，如果没有具有相同 TAG_NAME 的结束标签与之匹配，是不合法的。反之亦然。不过，你也需要考虑标签嵌套的问题。<br>一个&lt;，如果你找不到一个后续的&gt;与之匹配，是不合法的。并且当你找到一个&lt;或&lt;/时，所有直到下一个&gt;的前的字符，都应当被解析为 TAG_NAME（不一定合法）。<br>cdata 有如下格式：&lt;![CDATA[CDATA_CONTENT]]&gt;。CDATA_CONTENT 的范围被定义成 &lt;![CDATA[ 和后续的第一个 ]]&gt;之间的字符。<br>CDATA_CONTENT 可以包含任意字符。cdata 的功能是阻止验证器解析CDATA_CONTENT，所以即使其中有一些字符可以被解析为标签（无论合法还是不合法），也应该将它们视为常规字符。</p><p><strong>合法代码的例子:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;&lt;DIV&gt;This is the first line &lt;![CDATA[&lt;div&gt;]]&gt;&lt;/DIV&gt;&quot;</span><br><span class="line">输出: True</span><br><span class="line">解释: </span><br><span class="line">代码被包含在了闭合的标签内： &lt;DIV&gt; 和 &lt;/DIV&gt; 。</span><br><span class="line">TAG_NAME 是合法的，TAG_CONTENT 包含了一些字符和 cdata 。 </span><br><span class="line">即使 CDATA_CONTENT 含有不匹配的起始标签和不合法的 TAG_NAME，它应该被视为普通的文本，而不是标签。</span><br><span class="line">所以 TAG_CONTENT 是合法的，因此代码是合法的。最终返回True。</span><br><span class="line"></span><br><span class="line">输入: &quot;&lt;DIV&gt;&gt;&gt;  ![cdata[]] &lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&gt;]&lt;/DIV&gt;&quot;</span><br><span class="line">输出: True</span><br><span class="line">解释:</span><br><span class="line">我们首先将代码分割为： start_tag|tag_content|end_tag 。</span><br><span class="line">start_tag -&gt; &quot;&lt;DIV&gt;&quot;</span><br><span class="line">end_tag -&gt; &quot;&lt;/DIV&gt;&quot;</span><br><span class="line">tag_content 也可被分割为： text1|cdata|text2 。</span><br><span class="line">text1 -&gt; &quot;&gt;&gt;  ![cdata[]] &quot;</span><br><span class="line">cdata -&gt; &quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;&quot; ，其中 CDATA_CONTENT 为 &quot;&lt;div&gt;]&gt;&quot;</span><br><span class="line">text2 -&gt; &quot;]]&gt;&gt;]&quot;</span><br><span class="line">start_tag 不是 &quot;&lt;DIV&gt;&gt;&gt;&quot; 的原因参照规则 6 。</span><br><span class="line">cdata 不是 &quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&quot; 的原因参照规则 7 。</span><br></pre></td></tr></table></figure><p><strong>不合法代码的例子:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;&lt;A&gt;  &lt;B&gt; &lt;/A&gt;   &lt;/B&gt;&quot;</span><br><span class="line">输出: False</span><br><span class="line">解释: 不合法。如果 &quot;&lt;A&gt;&quot; 是闭合的，那么 &quot;&lt;B&gt;&quot; 一定是不匹配的，反之亦然。</span><br><span class="line"></span><br><span class="line">输入: &quot;&lt;DIV&gt;  div tag is not closed  &lt;DIV&gt;&quot;</span><br><span class="line">输出: False</span><br><span class="line"></span><br><span class="line">输入: &quot;&lt;DIV&gt;  unmatched &lt;  &lt;/DIV&gt;&quot;</span><br><span class="line">输出: False</span><br><span class="line"></span><br><span class="line">输入: &quot;&lt;DIV&gt; closed tags with invalid tag name  &lt;b&gt;123&lt;/b&gt; &lt;/DIV&gt;&quot;</span><br><span class="line">输出: False</span><br><span class="line"></span><br><span class="line">输入: &quot;&lt;DIV&gt; unmatched tags with invalid tag name  &lt;/1234567890&gt; and &lt;CDATA[[]]&gt;  &lt;/DIV&gt;&quot;</span><br><span class="line">输出: False</span><br><span class="line"></span><br><span class="line">输入: &quot;&lt;DIV&gt;  unmatched start tag &lt;B&gt;  and unmatched end tag &lt;/C&gt;  &lt;/DIV&gt;&quot;</span><br><span class="line">输出: False</span><br></pre></td></tr></table></figure><p><strong>注意:</strong><br>为简明起见，你可以假设输入的代码（包括提到的任意字符）只包含数字, 字母, ‘&lt;’,’&gt;’,’/‘,’!’,’[‘,’]’和’ ‘。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>纯模拟题，注意细节即可。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(N)$。<br>空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> code)</span> </span>&#123;</span><br><span class="line">    code_ = code;</span><br><span class="line">    n_ = code.size();</span><br><span class="line">    <span class="keyword">int</span> p = FindValidClosedTag(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> p == n_;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">FindValidClosedTag</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (code_[p++] != <span class="string">'&lt;'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> start_tag;</span><br><span class="line">    <span class="keyword">if</span> ((p = FindValidTagName(p, &amp;start_tag)) == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((p = FindValidTagContent(p)) == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> end_tag;</span><br><span class="line">    <span class="keyword">if</span> ((p = FindValidTagName(p, &amp;end_tag)) == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (start_tag != end_tag) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">FindValidTagName</span><span class="params">(<span class="keyword">int</span> p, <span class="built_in">string</span>* tag_name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; p &lt; n_; ++p) &#123;</span><br><span class="line">      <span class="keyword">if</span> (code_[p] == <span class="string">'&gt;'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isupper</span>(code_[p]) &amp;&amp; ++len &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">        *tag_name += code_[p];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">FindValidTagContent</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; p &lt; n_; ++p) &#123;</span><br><span class="line">      <span class="keyword">if</span> (code_[p] == <span class="string">'&lt;'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p + <span class="number">1</span> &lt; n_ &amp;&amp; code_[p + <span class="number">1</span>] == <span class="string">'/'</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> p + <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p + <span class="number">1</span> &lt; n_ &amp;&amp; code_[p + <span class="number">1</span>] == <span class="string">'!'</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> ((p = FindCdata(p + <span class="number">2</span>)) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          --p;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p + <span class="number">1</span> &lt; n_ &amp;&amp; <span class="built_in">isupper</span>(code_[p + <span class="number">1</span>])) &#123;</span><br><span class="line">          <span class="keyword">if</span> ((p = FindValidClosedTag(p)) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          --p;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">FindCdata</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(p &lt; n_ &amp;&amp; code_[p++] == <span class="string">'['</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(p &lt; n_ &amp;&amp; code_[p++] == <span class="string">'C'</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(p &lt; n_ &amp;&amp; code_[p++] == <span class="string">'D'</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(p &lt; n_ &amp;&amp; code_[p++] == <span class="string">'A'</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(p &lt; n_ &amp;&amp; code_[p++] == <span class="string">'T'</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(p &lt; n_ &amp;&amp; code_[p++] == <span class="string">'A'</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(p &lt; n_ &amp;&amp; code_[p++] == <span class="string">'['</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((p = FindCdataContent(p)) == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">FindCdataContent</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (p += <span class="number">2</span>; p &lt; n_; ++p) &#123;</span><br><span class="line">      <span class="keyword">if</span> (code_[p] == <span class="string">'&gt;'</span> &amp;&amp; code_[p - <span class="number">1</span>] == <span class="string">']'</span> &amp;&amp; code_[p - <span class="number">2</span>] == <span class="string">']'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> p + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">string</span> code_;</span><br><span class="line">  <span class="keyword">int</span> n_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAns</span><span class="params">(<span class="keyword">bool</span> ans)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unique_ptr</span>&lt;Solution&gt; solution(<span class="keyword">new</span> Solution);</span><br><span class="line">  PrintAns(solution-&gt;isValid(</span><br><span class="line">    <span class="string">"&lt;DIV&gt;This is the first line &lt;![CDATA[&lt;div&gt;]]&gt;&lt;/DIV&gt;"</span>));</span><br><span class="line">  PrintAns(solution-&gt;isValid(</span><br><span class="line">    <span class="string">"&lt;DIV&gt;&gt;&gt;  ![cdata[]] &lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&gt;]&lt;/DIV&gt;"</span>));</span><br><span class="line">  PrintAns(solution-&gt;isValid(<span class="string">"&lt;A&gt;  &lt;B&gt; &lt; / A&gt;   &lt; / B&gt;"</span>));</span><br><span class="line">  PrintAns(solution-&gt;isValid(<span class="string">"&lt;DIV&gt;  div tag is not closed  &lt;DIV&gt;"</span>));</span><br><span class="line">  PrintAns(solution-&gt;isValid(<span class="string">"&lt;DIV&gt;  unmatched &lt;  &lt;/DIV&gt;"</span>));</span><br><span class="line">  PrintAns(solution-&gt;isValid(</span><br><span class="line">    <span class="string">"&lt;DIV&gt; closed tags with invalid tag name  &lt;b&gt;123&lt;/b&gt; &lt;/DIV&gt;"</span>));</span><br><span class="line">  PrintAns(solution-&gt;isValid(</span><br><span class="line">    <span class="string">"&lt;DIV&gt; unmatched tags with invalid tag name  &lt;/1234567890&gt; and &lt;CDATA[[]]&gt; "</span></span><br><span class="line">    <span class="string">" &lt;/DIV&gt;"</span>));</span><br><span class="line">  PrintAns(solution-&gt;isValid(</span><br><span class="line">    <span class="string">"&lt;DIV&gt;  unmatched start tag &lt;B&gt;  and unmatched end tag &lt;/C&gt;  &lt;/DIV&gt;"</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/tag-validator/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 591. Tag Validator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="模拟" scheme="http://tashi711.top/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>「二维树状数组」浅析</title>
    <link href="http://tashi711.top/programming/dsaa/2d-bit/"/>
    <id>http://tashi711.top/programming/dsaa/2d-bit/</id>
    <published>2019-03-19T03:15:34.000Z</published>
    <updated>2019-03-19T15:00:43.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h2><p>之前写过一篇“「树状数组」浅析”，详述了一维树状数组，本文主要推广到二维树状数组，也可以类推到更高维。同样用一个问题引出，已知二维数组a[][]，元素个数为n*m，现在要求a数组中某个矩形区域的和。</p><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><a id="more"></a><p>与一维情况一样，我们完全可以存储sum(x, y)表示从左下角到(x, y)的矩形区域的和（注意这里表达的意思与另一篇文章的区别），然后对任意给定的查找区间[x1 ~ x2, y1 ~ y2]，返回sum(x2, y2) - sum(x1 - 1, y2) - sum(x2, y1 - 1) + sum(x1 - 1, y1 - 1)。同样的问题，这只是没有元素改变的情况下的比较优化的解法，那么对于对于数组中的元素随时变更的情况下是否也有像一维树状数组一样优秀的算法呢。</p><h2 id="二维树状数组的思想"><a href="#二维树状数组的思想" class="headerlink" title="二维树状数组的思想"></a>二维树状数组的思想</h2><p>回想一维树状数组，当前index上的值管理了它本身往前到index去掉lowbit后位置的后面一个位置间的数的和，而二维树状数组tree[i][j]其实管理的是x从i-lowbit(i)+1到i，y从j-lowbit(j)+1到j间的数的和，因此二维树状数组的算法也呼之欲出，用两层循环分别遍历i和j的lowbit即可。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoDimensionalBIT</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  TwoDimensionalBIT(<span class="keyword">int</span> len_x, <span class="keyword">int</span> len_y, <span class="keyword">int</span> x0 = <span class="number">1</span>, <span class="keyword">int</span> y0 = <span class="number">1</span>)</span><br><span class="line">    : len_x_(len_x), len_y_(len_y), x0_(x0), y0_(y0),</span><br><span class="line">    tree(len_x + <span class="number">1</span>, <span class="built_in">vector</span>&lt;T&gt;(len_y + <span class="number">1</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> px = x - x0_ + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (px &lt;= len_x_) &#123;</span><br><span class="line">      <span class="keyword">int</span> py = y - y0_ + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (py &lt;= len_y_) &#123;</span><br><span class="line">        tree[px][py] += k;</span><br><span class="line">        py += Lowbit(py);</span><br><span class="line">      &#125;</span><br><span class="line">      px += Lowbit(px);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">GetRange</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y1, <span class="keyword">int</span> y2)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GetSum(x2, y2) - GetSum(x1 - <span class="number">1</span>, y2) - GetSum(x2, y1 - <span class="number">1</span>) +</span><br><span class="line">      GetSum(x1 - <span class="number">1</span>, y1 - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Lowbit</span><span class="params">(<span class="keyword">int</span> p)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p &amp; -p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">GetSum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    T sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> px = x - x0_ + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (px) &#123;</span><br><span class="line">      <span class="keyword">int</span> py = y - y0_ + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (py) &#123;</span><br><span class="line">        sum += tree[px][py];</span><br><span class="line">        py ^= Lowbit(py);</span><br><span class="line">      &#125;</span><br><span class="line">      px ^= Lowbit(px);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> len_x_ = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">int</span> len_y_ = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">int</span> x0_ = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> y0_ = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;T&gt;&gt; tree;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><p>这段代码相比于一维的那个版本更加推广了几点：1、用模板可以实现各类别的和；2、可选择起点，一般树状数组都是1到n这样规定下标的，毕竟要满足lowbit的约束，有时候会遇到实际是0开始的下标甚至有负下标，可以直接在上面的代码中放进构造函数，内部会在计算时把实际坐标先对应到以1开头。</p><h2 id="复杂度分析与拓展"><a href="#复杂度分析与拓展" class="headerlink" title="复杂度分析与拓展"></a>复杂度分析与拓展</h2><p>这里看到两层循环，每层都遍历了一遍lowbit，因此复杂度为$O(\log n*\log m)$（对于单次更新和求和操作都是）。要注意的是很多处理高维的对数级复杂度的数据结构的复杂度中的对数是取在整体size上的（比如二维线段树的单次操作复杂度是$O(\log (nm))=O(\log n+\log m)$）。</p><p>按照一维到二维的推广思路，树状数组也很容易推广到更高维度，单次复杂度为每个维度对数的乘积，以线段树为比较，高维线段树单次复杂度为每个维度对数的和（高维情况下，线段树不再表现为线段，例如一般把二维线段树叫做矩形树或者四分树，这里姑且先这么叫），因此除了一维的情况，线段树都比树状数组复杂度低，并且线段树功能上更为强大，树状数组只能动态更新单点，线段树可以动态更新线段（或者高维中的矩形、长方体等），此外树状数组只能用于求前缀和，线段树可以解决非常多种类的区间操作问题。当然了，树状数组也有其优势，一是代码简单，二是常数小，在一般的size下，log级别其实也就是常数级别，线段树通常要承担比树状数组大的常数开销，因此最后的表现可能差不多。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题提出&quot;&gt;&lt;a href=&quot;#问题提出&quot; class=&quot;headerlink&quot; title=&quot;问题提出&quot;&gt;&lt;/a&gt;问题提出&lt;/h2&gt;&lt;p&gt;之前写过一篇“「树状数组」浅析”，详述了一维树状数组，本文主要推广到二维树状数组，也可以类推到更高维。同样用一个问题引出，已知二维数组a[][]，元素个数为n*m，现在要求a数组中某个矩形区域的和。&lt;/p&gt;
&lt;h3 id=&quot;前缀和&quot;&gt;&lt;a href=&quot;#前缀和&quot; class=&quot;headerlink&quot; title=&quot;前缀和&quot;&gt;&lt;/a&gt;前缀和&lt;/h3&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树状数组" scheme="http://tashi711.top/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 587. Erect the Fence」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-587/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-587/</id>
    <published>2019-03-05T03:57:03.000Z</published>
    <updated>2019-03-05T13:57:29.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/erect-the-fence/" target="_blank" rel="noopener">LeetCode 587. Erect the Fence</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><a id="more"></a><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>在一个二维的花园中，有一些用 (x, y) 坐标表示的树。由于安装费用十分昂贵，你的任务是先用最短的绳子围起所有的树。只有当所有的树都被绳子包围时，花园才能围好栅栏。你需要找到正好位于栅栏边界上的树的坐标。</p><p><strong>示例 1:</strong><br>输入: [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]<br>输出: [[1,1],[2,0],[4,2],[3,3],[2,4]]</p><p><strong>示例 2:</strong><br>输入: [[1,2],[2,2],[4,2]]<br>输出: [[1,2],[2,2],[4,2]]<br>即使树都在一条直线上，你也需要先用绳子包围它们。</p><p><strong>注意:</strong><br>所有的树应当被围在一起。你不能剪断绳子来包围树或者把树分成一组以上。<br>输入的整数在 0 到 100 之间。<br>花园至少有一棵树。<br>所有树的坐标都是不同的。<br>输入的点没有顺序。输出顺序也没有要求。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>其实就是个裸凸包题，可以参考我最近刚写的平面凸包详解的文章，对应稳重提到的第二种特殊情形。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(N \log N)$。<br>空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  <span class="keyword">int</span> y;</span><br><span class="line">  Point() : x(<span class="number">0</span>), y(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">  Point(<span class="keyword">int</span> a, <span class="keyword">int</span> b) : x(a), y(b) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConvexHull</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">GrahamScan</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point&gt;&amp; points, <span class="built_in">vector</span>&lt;Point&gt;* res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (points.empty()) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (points.size() == <span class="number">1u</span>) &#123;</span><br><span class="line">      res-&gt;push_back(points[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; temp(points);</span><br><span class="line">    <span class="keyword">auto</span> p_min = min_element(temp.begin(), temp.end(),</span><br><span class="line">      [](<span class="keyword">const</span> Point&amp; u, <span class="keyword">const</span> Point&amp; v) &#123;</span><br><span class="line">      <span class="keyword">return</span> make_pair(u.y, u.x) &lt; make_pair(v.y, v.x);</span><br><span class="line">    &#125;);</span><br><span class="line">    swap(*p_min, temp[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">auto</span> dist = [](<span class="keyword">const</span> Point&amp; a, <span class="keyword">const</span> Point&amp; b) &#123;</span><br><span class="line">      <span class="keyword">int</span> dx = b.x - a.x;</span><br><span class="line">      <span class="keyword">int</span> dy = b.y - a.y;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">abs</span>(dx) + <span class="built_in">abs</span>(dy);</span><br><span class="line">    &#125;;</span><br><span class="line">    sort(next(temp.begin()), temp.end(),</span><br><span class="line">      [&amp;temp, &amp;dist](<span class="keyword">const</span> Point&amp; u, <span class="keyword">const</span> Point&amp; v) -&gt; <span class="keyword">bool</span> &#123;</span><br><span class="line">      <span class="keyword">double</span> theta_u = <span class="built_in">atan2</span>(u.y - temp[<span class="number">0</span>].y, u.x - temp[<span class="number">0</span>].x);</span><br><span class="line">      <span class="keyword">double</span> theta_v = <span class="built_in">atan2</span>(v.y - temp[<span class="number">0</span>].y, v.x - temp[<span class="number">0</span>].x);</span><br><span class="line">      <span class="keyword">if</span> (theta_u == theta_v) &#123;</span><br><span class="line">        <span class="keyword">return</span> dist(u, temp[<span class="number">0</span>]) &lt; dist(v, temp[<span class="number">0</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> theta_u &lt; theta_v;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">auto</span> pos = temp.rend();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = next(temp.rbegin()); it != temp.rend(); ++it) &#123;</span><br><span class="line">      <span class="keyword">if</span> (Cross(temp[<span class="number">0</span>], *temp.crbegin(), *it) != <span class="number">0</span>) &#123;</span><br><span class="line">        pos = it;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(temp.rbegin(), pos);</span><br><span class="line">    res-&gt;push_back(<span class="built_in">std</span>::move(temp[<span class="number">0</span>]));</span><br><span class="line">    res-&gt;push_back(<span class="built_in">std</span>::move(temp[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">int</span> n = temp.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (Cross(*next(res-&gt;rbegin()), *res-&gt;rbegin(), temp[i]) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        res-&gt;push_back(<span class="built_in">std</span>::move(temp[i]));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res-&gt;pop_back();</span><br><span class="line">        --i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Cross</span><span class="params">(<span class="keyword">const</span> Point&amp; a, <span class="keyword">const</span> Point&amp; b, <span class="keyword">const</span> Point&amp; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ux = b.x - a.x;</span><br><span class="line">    <span class="keyword">int</span> uy = b.y - a.y;</span><br><span class="line">    <span class="keyword">int</span> vx = c.x - b.x;</span><br><span class="line">    <span class="keyword">int</span> vy = c.y - b.y;</span><br><span class="line">    <span class="keyword">return</span> ux * vy - uy * vx;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">vector</span>&lt;Point&gt; outerTrees(<span class="built_in">vector</span>&lt;Point&gt;&amp; points) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; ans;</span><br><span class="line">    ConvexHull convex_hull;</span><br><span class="line">    convex_hull.GrahamScan(points, &amp;ans);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAns</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : ans) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p.x &lt;&lt; <span class="string">' '</span> &lt;&lt; p.y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unique_ptr</span>&lt;Solution&gt; solution(<span class="keyword">new</span> Solution);</span><br><span class="line">  <span class="built_in">vector</span>&lt;Point&gt; points1&#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;,&#123;<span class="number">2</span>, <span class="number">2</span>&#125;,&#123;<span class="number">2</span>, <span class="number">0</span>&#125;,&#123;<span class="number">2</span>, <span class="number">4</span>&#125;,&#123;<span class="number">3</span>, <span class="number">3</span>&#125;,&#123;<span class="number">4</span>, <span class="number">2</span>&#125;&#125;;</span><br><span class="line">  <span class="built_in">vector</span>&lt;Point&gt; points2&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,&#123;<span class="number">2</span>, <span class="number">2</span>&#125;,&#123;<span class="number">4</span>, <span class="number">2</span>&#125;&#125;;</span><br><span class="line">  PrintAns(solution-&gt;outerTrees(points1));</span><br><span class="line">  PrintAns(solution-&gt;outerTrees(points2));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/erect-the-fence/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 587. Erect the Fence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="凸包" scheme="http://tashi711.top/tags/%E5%87%B8%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>「平面凸包」详解</title>
    <link href="http://tashi711.top/programming/dsaa/convex-hull/"/>
    <id>http://tashi711.top/programming/dsaa/convex-hull/</id>
    <published>2019-03-04T03:17:59.000Z</published>
    <updated>2019-03-04T15:19:03.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="平面凸包"><a href="#平面凸包" class="headerlink" title="平面凸包"></a>平面凸包</h2><p>Wiki上对平面凸包有一个直观的解释：在二维欧几里得空间中，凸包可想象为一条刚好包着所有点的橡皮圈。那么给定平面上的一组点集，如何求出其凸包就是本文讨论的内容。</p><h3 id="Jarvis步进法"><a href="#Jarvis步进法" class="headerlink" title="Jarvis步进法"></a>Jarvis步进法</h3><a id="more"></a><p>Jarvis步进法又叫包裹法，首先由一点必定在凸包的点开始，例如最左的一点A1。然后选择A2点使得所有点都在A1A2的右方，这步骤的时间复杂度是O(n)，要比较所有点以A1为原点的极坐标角度。以A2为原点，重复这个步骤，依次找到 A3,A4,…,Ak。这总共有k步。因此，时间复杂度为O(kn)。当然，最坏的情况下n个点全部在凸包上，复杂度为O(n^2)</p><h3 id="Graham扫描法"><a href="#Graham扫描法" class="headerlink" title="Graham扫描法"></a>Graham扫描法</h3><p>Graham扫描法基本是平面凸包最优的解法了，由最底的一点A1开始（如果有多个这样的点，那么选择最左边的），计算它跟其他各点的连线和x轴正向的角度，按小至大将这些点排序，称它们的对应点为A2,A3,…,An。这里的时间复杂度可达O(nlogn)，即排序的复杂度。考虑最小的角度对应的点A3。若由A2到A3的路径相对A1到A2的路径是向右转的（可以想象一个人沿A1走到A2，他站在A2时，是向哪边改变方向），表示A3不可能是凸包上的一点，考虑下一点由A2到A4的路径；否则就考虑A3到A4的路径是否向右转……直到回到A1。</p><p>若一个点在两边凸包点的连线上，考虑两种情况：一、认为这个点不是凸包上的点，这种情况最简单，只需注意保证每次都是严格的向左走（不可以走直线，即叉乘严格大于0）即可；二、认为这个点是凸包上的点，这种情况比较麻烦，首先每次只要不是向右走就好（可以走直线，即叉乘大于等于0），这个条件还不够，因为如果两个点在排序时是同一角度，遍历顺序也会影响结果，考虑某两个点在同一角度上，如果这两个点连线的两边都有点，那么这两个点无论遍历顺序，其中近的那个点一定会被忽略，远的那个点会正常进入考虑，如果连线的两边只有一边有点，那么这两个点一定是刚开始出去或者结束了回来，那么正确的遍历方式是出去的时候先遍历近的，再遍历远的，回来的时候相反（读者可以试着画图自证）。</p><p>以下为C++实现的考虑上面两种情况的第二种（第一种其实更为简单，这里略去），注意排序时当两个点角度相同时取更近的点在前（这里用|x|+|y|是等价的），然后在排好序的点集末尾把角度相同的顺序reverse成远的点在前。注意一点细节就是如果所有点集都在一条直线上，其实把他们当成出去或者回来都行，下面的代码会都reverse一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  <span class="keyword">int</span> y;</span><br><span class="line">  Point() : x(<span class="number">0</span>), y(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">  Point(<span class="keyword">int</span> a, <span class="keyword">int</span> b) : x(a), y(b) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConvexHull</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">GrahamScan</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point&gt;&amp; points, <span class="built_in">vector</span>&lt;Point&gt;* res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (points.empty()) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (points.size() == <span class="number">1u</span>) &#123;</span><br><span class="line">      res-&gt;push_back(points[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; temp(points);</span><br><span class="line">    <span class="keyword">auto</span> p_min = min_element(temp.begin(), temp.end(),</span><br><span class="line">      [](<span class="keyword">const</span> Point&amp; u, <span class="keyword">const</span> Point&amp; v) &#123;</span><br><span class="line">      <span class="keyword">return</span> make_pair(u.y, u.x) &lt; make_pair(v.y, v.x);</span><br><span class="line">    &#125;);</span><br><span class="line">    swap(*p_min, temp[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">auto</span> dist = [](<span class="keyword">const</span> Point&amp; a, <span class="keyword">const</span> Point&amp; b) &#123;</span><br><span class="line">      <span class="keyword">int</span> dx = b.x - a.x;</span><br><span class="line">      <span class="keyword">int</span> dy = b.y - a.y;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">abs</span>(dx) + <span class="built_in">abs</span>(dy);</span><br><span class="line">    &#125;;</span><br><span class="line">    sort(next(temp.begin()), temp.end(),</span><br><span class="line">      [&amp;temp, &amp;dist](<span class="keyword">const</span> Point&amp; u, <span class="keyword">const</span> Point&amp; v) -&gt; <span class="keyword">bool</span> &#123;</span><br><span class="line">      <span class="keyword">double</span> theta_u = <span class="built_in">atan2</span>(u.y - temp[<span class="number">0</span>].y, u.x - temp[<span class="number">0</span>].x);</span><br><span class="line">      <span class="keyword">double</span> theta_v = <span class="built_in">atan2</span>(v.y - temp[<span class="number">0</span>].y, v.x - temp[<span class="number">0</span>].x);</span><br><span class="line">      <span class="keyword">if</span> (theta_u == theta_v) &#123;</span><br><span class="line">        <span class="keyword">return</span> dist(u, temp[<span class="number">0</span>]) &lt; dist(v, temp[<span class="number">0</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> theta_u &lt; theta_v;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">auto</span> pos = temp.rend();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = next(temp.rbegin()); it != temp.rend(); ++it) &#123;</span><br><span class="line">      <span class="keyword">if</span> (Cross(temp[<span class="number">0</span>], *temp.crbegin(), *it) != <span class="number">0</span>) &#123;</span><br><span class="line">        pos = it;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(temp.rbegin(), pos);</span><br><span class="line">    res-&gt;push_back(<span class="built_in">std</span>::move(temp[<span class="number">0</span>]));</span><br><span class="line">    res-&gt;push_back(<span class="built_in">std</span>::move(temp[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">int</span> n = temp.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (Cross(*next(res-&gt;rbegin()), *res-&gt;rbegin(), temp[i]) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        res-&gt;push_back(<span class="built_in">std</span>::move(temp[i]));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res-&gt;pop_back();</span><br><span class="line">        --i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">Cross</span><span class="params">(<span class="keyword">const</span> Point&amp; a, <span class="keyword">const</span> Point&amp; b, <span class="keyword">const</span> Point&amp; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ux = b.x - a.x;</span><br><span class="line">    <span class="keyword">int</span> uy = b.y - a.y;</span><br><span class="line">    <span class="keyword">int</span> vx = c.x - b.x;</span><br><span class="line">    <span class="keyword">int</span> vy = c.y - b.y;</span><br><span class="line">    <span class="keyword">return</span> ux * vy - uy * vx;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%87%B8%E5%8C%85" target="_blank" rel="noopener">维基百科 - 凸包</a>.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;平面凸包&quot;&gt;&lt;a href=&quot;#平面凸包&quot; class=&quot;headerlink&quot; title=&quot;平面凸包&quot;&gt;&lt;/a&gt;平面凸包&lt;/h2&gt;&lt;p&gt;Wiki上对平面凸包有一个直观的解释：在二维欧几里得空间中，凸包可想象为一条刚好包着所有点的橡皮圈。那么给定平面上的一组点集，如何求出其凸包就是本文讨论的内容。&lt;/p&gt;
&lt;h3 id=&quot;Jarvis步进法&quot;&gt;&lt;a href=&quot;#Jarvis步进法&quot; class=&quot;headerlink&quot; title=&quot;Jarvis步进法&quot;&gt;&lt;/a&gt;Jarvis步进法&lt;/h3&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="凸包" scheme="http://tashi711.top/tags/%E5%87%B8%E5%8C%85/"/>
    
      <category term="Graham" scheme="http://tashi711.top/tags/Graham/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 564. Find the Closest Palindrome」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-564/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-564/</id>
    <published>2019-02-27T03:57:03.000Z</published>
    <updated>2019-03-06T14:34:00.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/find-the-closest-palindrome/" target="_blank" rel="noopener">LeetCode 564. Find the Closest Palindrome</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><a id="more"></a><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定一个整数 n ，你需要找到与它最近的回文数（不包括自身）。<br>“最近的”定义为两个整数差的绝对值最小。</p><p><strong>示例 1:</strong><br>输入: “123”<br>输出: “121”</p><p><strong>注意:</strong><br>n 是由字符串表示的正整数，其长度不超过18。<br>如果有多个结果，返回最小的那个。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>其实就是个细节题，注意考虑模拟到所有情况即可。基本思路就是取左边一半（奇数长度取到包括中间位置），这个数称为left，右边的数模仿left、left+1、left-1的对称形式（不包括奇数长度时的中间位置）。然后left-1可能减一位或变成0、left+1可能增加一位，这些时候分别考虑99…9和100…01即可。输入就是一位长度时判断不是0输出n+1否则输出1。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(\log N)$（即数的长度）。<br>空间复杂度为$O(\log N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">nearestPalindromic</span><span class="params">(<span class="built_in">string</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> num = stoll(n);</span><br><span class="line">    <span class="keyword">int</span> len = n.size();</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> to_string(num - <span class="number">1</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> ans = n;</span><br><span class="line">    <span class="keyword">int</span> half = (len + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = half; i &lt; len; ++i) &#123;</span><br><span class="line">      ans[i] = ans[len - i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans_val = stoll(ans);</span><br><span class="line">    <span class="keyword">if</span> (ans_val == num) &#123;</span><br><span class="line">      ans_val = <span class="number">0x7FFFFFFFFFFFFFFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> left = stoll(n.substr(<span class="number">0</span>, half));</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> u = left - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">string</span> su = to_string(u);</span><br><span class="line">    <span class="keyword">int</span> len_u = su.size();</span><br><span class="line">    <span class="keyword">bool</span> consider_minus_1 = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (len_u &lt; half || u == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="function"><span class="built_in">string</span> <span class="title">psb</span><span class="params">(len - <span class="number">1</span>, <span class="string">'9'</span>)</span></span>;</span><br><span class="line">      <span class="keyword">long</span> <span class="keyword">long</span> psb_val = stoll(psb);</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">abs</span>(psb_val - num) &lt;= <span class="built_in">abs</span>(ans_val - num) &amp;&amp; psb_val != num) &#123;</span><br><span class="line">        ans_val = psb_val;</span><br><span class="line">        ans = psb;</span><br><span class="line">      &#125;</span><br><span class="line">      consider_minus_1 = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (consider_minus_1) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = half; i &lt; len; ++i) &#123;</span><br><span class="line">        su += su[len - i - <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> u_val = stoll(su);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(u_val - num) &lt;= <span class="built_in">abs</span>(ans_val - num) &amp;&amp; u_val != num) &#123;</span><br><span class="line">      ans_val = u_val;</span><br><span class="line">      ans = su;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> v = left + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">string</span> sv = to_string(v);</span><br><span class="line">    <span class="keyword">int</span> len_v = sv.size();</span><br><span class="line">    <span class="keyword">bool</span> consider_add_1 = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (len_v &gt; half) &#123;</span><br><span class="line">      string psb("1" + string(len - 1, '0') + "1");</span><br><span class="line">      <span class="keyword">long</span> <span class="keyword">long</span> psb_val = stoll(psb);</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">abs</span>(psb_val - num) &lt;= <span class="built_in">abs</span>(ans_val - num) &amp;&amp; psb_val != num) &#123;</span><br><span class="line">        ans_val = psb_val;</span><br><span class="line">        ans = psb;</span><br><span class="line">      &#125;</span><br><span class="line">      consider_add_1 = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (consider_add_1) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = half; i &lt; len; ++i) &#123;</span><br><span class="line">        sv += sv[len - i - <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> v_val = stoll(sv);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(v_val - num) &lt; <span class="built_in">abs</span>(ans_val - num) &amp;&amp; v_val != num) &#123;</span><br><span class="line">      ans_val = v_val;</span><br><span class="line">      ans = sv;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAns</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; ans)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unique_ptr</span>&lt;Solution&gt; solution(<span class="keyword">new</span> Solution);</span><br><span class="line">  PrintAns(solution-&gt;nearestPalindromic(<span class="string">"123"</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/find-the-closest-palindrome/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 564. Find the Closest Palindrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="模拟" scheme="http://tashi711.top/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 493. Reverse Pairs」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-493/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-493/</id>
    <published>2019-02-26T03:57:03.000Z</published>
    <updated>2019-03-06T14:34:09.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/reverse-pairs/description/" target="_blank" rel="noopener">LeetCode 493. Reverse Pairs</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><a id="more"></a><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定一个数组 nums ，如果 i &lt; j 且 nums[i] &gt; 2*nums[j] 我们就将 (i, j) 称作一个重要翻转对。<br>你需要返回给定数组中的重要翻转对的数量。</p><p><strong>示例 1:</strong><br>输入: [1,3,2,3,1]<br>输出: 2</p><p><strong>示例 2:</strong><br>输入: [2,4,3,5,1]<br>输出: 3</p><p><strong>注意:</strong><br>给定数组的长度不会超过50000。<br>输入数组中的所有数字都在32位整数的表示范围内。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>逆序对变种，之前写过一篇树状数组和归并排序来求逆序对的，这道题也都适用，下面的代码是分治（归并排序改进）做的。其实就修改一点，当右边队首被归并时产生的逆序对不是单纯的左边队列剩余多少个，而是某个特定点从那个地方开始的数都大于右边队首元素的两倍，每次右边队首被归并后维护这个位置，均摊常数复杂度。</p><p>注意两个细节，一是假如左边队列归并完了不能单纯把右边队列全部归并过去，而是也要一步一步计算可能产生的逆序对，例如左边是-5，右边是-3、-2，那么-5归并后依旧能对-3产生“逆序对”。二是注意int×2可能爆掉，写成×2LL即可。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(N \log N)$。<br>空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">reversePairs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    ans_ = <span class="number">0</span>;</span><br><span class="line">    n_= nums.size();</span><br><span class="line">    MergeSort(nums, <span class="number">0</span>, n_ - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans_;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &gt;= v) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">int</span> mid = u + (v - u) / <span class="number">2</span>;</span><br><span class="line">      MergeSort(nums, u, mid);</span><br><span class="line">      MergeSort(nums, mid + <span class="number">1</span>, v);</span><br><span class="line">      Merge(nums, u, mid, v);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> u, <span class="keyword">int</span> mid, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">    <span class="keyword">int</span> l = u, r = mid + <span class="number">1</span>, p = u;</span><br><span class="line">    <span class="keyword">while</span> (p &lt;= mid &amp;&amp; r &lt;= v &amp;&amp; nums[p] &lt;= nums[r] * <span class="number">2L</span>L) &#123;</span><br><span class="line">      ++p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= mid &amp;&amp; r &lt;= v) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[l] &lt;= nums[r]) &#123;</span><br><span class="line">        temp.push_back(nums[l++]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ans_ += mid - p + <span class="number">1</span>;</span><br><span class="line">        temp.push_back(nums[r++]);</span><br><span class="line">        <span class="keyword">while</span> (p &lt;= mid &amp;&amp; r &lt;= v &amp;&amp; nums[p] &lt;= nums[r] * <span class="number">2L</span>L) &#123;</span><br><span class="line">          ++p;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> it = back_inserter(temp);</span><br><span class="line">    copy(nums.cbegin() + l, nums.cbegin() + mid + <span class="number">1</span>, it);</span><br><span class="line">    <span class="keyword">while</span> (r &lt;= v) &#123;</span><br><span class="line">      ans_ += mid - p + <span class="number">1</span>;</span><br><span class="line">      temp.push_back(nums[r++]);</span><br><span class="line">      <span class="keyword">while</span> (p &lt;= mid &amp;&amp; r &lt;= v &amp;&amp; nums[p] &lt;= nums[r] * <span class="number">2L</span>L) &#123;</span><br><span class="line">        ++p;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    copy(temp.cbegin(), temp.cend(), nums.begin() + u);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n_ = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">int</span> ans_ = <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAns</span><span class="params">(<span class="keyword">int</span> ans)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unique_ptr</span>&lt;Solution&gt; solution(<span class="keyword">new</span> Solution);</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums1 = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums2 = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>&#125;;</span><br><span class="line">  PrintAns(solution-&gt;reversePairs(nums1));</span><br><span class="line">  PrintAns(solution-&gt;reversePairs(nums2));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/reverse-pairs/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 493. Reverse Pairs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="分治" scheme="http://tashi711.top/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 480. Sliding Window Median」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-480/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-480/</id>
    <published>2019-02-25T03:57:03.000Z</published>
    <updated>2019-03-06T14:34:26.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/sliding-window-median/solution/" target="_blank" rel="noopener">LeetCode 480. Sliding Window Median</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><a id="more"></a><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>中位数是有序序列最中间的那个数。如果序列的大小是偶数，则没有最中间的数；此时中位数是最中间的两个数的平均数。<br>例如：<br>[2,3,4]，中位数是 3<br>[2,3]，中位数是 (2 + 3) / 2 = 2.5<br>给出一个数组 nums，有一个大小为 k 的窗口从最左端滑动到最右端。窗口中有 k 个数，每次窗口移动 1 位。你的任务是找出每次窗口移动后得到的新窗口中元素的中位数，并输出由它们组成的数组。<br>例如：<br>给出 nums = [1,3,-1,-3,5,3,6,7]，以及 k = 3。<br>窗口位置                      中位数<br>[1  3  -1] -3  5  3  6  7       1<br> 1 [3  -1  -3] 5  3  6  7       -1<br> 1  3 [-1  -3  5] 3  6  7       -1<br> 1  3  -1 [-3  5  3] 6  7       3<br> 1  3  -1  -3 [5  3  6] 7       5<br> 1  3  -1  -3  5 [3  6  7]      6<br> 因此，返回该滑动窗口的中位数数组 [1,-1,-1,3,5,6]。</p><p><strong>提示：</strong><br>假设k是合法的，即：k 始终小于输入的非空数组的元素个数.</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>没有题解，跟之前做的有一道在线求中位数比较像（295），可以借鉴思路，不过由于用记录中间迭代器的做法比较不直观，并且会删除元素，很可能就删掉记录的那个元素，因此考虑用两个平衡树（小根大根）实现，不用堆是因为有删除随机位置的操作。平衡树可以用STL的multiset做，单次操作复杂度都是log级。注意一点就是两个整数相加（在求平均值的时候）可能爆掉，因此我是直接用double存的。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(N \log N)$。<br>空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; medianSlidingWindow(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; ans;</span><br><span class="line">    <span class="keyword">int</span> n = nums.size();</span><br><span class="line">    <span class="built_in">multiset</span>&lt;<span class="keyword">double</span>, greater&lt;<span class="keyword">double</span>&gt;&gt; small;</span><br><span class="line">    <span class="built_in">multiset</span>&lt;<span class="keyword">double</span>&gt; big;</span><br><span class="line">    <span class="keyword">int</span> ns = (k + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">      small.insert(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ns; i &lt; k; ++i) &#123;</span><br><span class="line">      big.insert(*small.cbegin());</span><br><span class="line">      small.erase(small.cbegin());</span><br><span class="line">    &#125;</span><br><span class="line">    ans.push_back(k &amp; <span class="number">1</span> ?</span><br><span class="line">      *small.cbegin() : (*small.cbegin() + *big.cbegin()) / <span class="number">2.0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">auto</span> it = small.find(nums[i - k]);</span><br><span class="line">      <span class="keyword">if</span> (it != small.end()) &#123;</span><br><span class="line">        small.erase(it);</span><br><span class="line">        <span class="keyword">if</span> (big.empty() || nums[i] &lt;= *big.cbegin()) &#123;</span><br><span class="line">          small.insert(nums[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          small.insert(*big.cbegin());</span><br><span class="line">          big.erase(big.cbegin());</span><br><span class="line">          big.insert(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        it = big.find(nums[i - k]);</span><br><span class="line">        big.erase(it);</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt;= *small.cbegin()) &#123;</span><br><span class="line">          big.insert(nums[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          big.insert(*small.cbegin());</span><br><span class="line">          small.erase(small.cbegin());</span><br><span class="line">          small.insert(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ans.push_back(k &amp; <span class="number">1</span> ?</span><br><span class="line">        *small.cbegin() : (*small.cbegin() + *big.cbegin()) / <span class="number">2.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAns</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">  ostream_iterator&lt;<span class="keyword">double</span>&gt; it(<span class="built_in">cout</span>, <span class="string">" "</span>);</span><br><span class="line">  copy(ans.cbegin(), ans.cend(), it);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unique_ptr</span>&lt;Solution&gt; solution(<span class="keyword">new</span> Solution);</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="number">-3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">  PrintAns(solution-&gt;medianSlidingWindow(nums, <span class="number">3</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/sliding-window-median/solution/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 480. Sliding Window Median&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="平衡树" scheme="http://tashi711.top/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 466. Count The Repetitions」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-466/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-466/</id>
    <published>2019-02-24T03:57:03.000Z</published>
    <updated>2019-02-24T16:37:04.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/count-the-repetitions/description/" target="_blank" rel="noopener">LeetCode 466. Count The Repetitions</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><a id="more"></a><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>定义由 n 个连接的字符串 s 组成字符串 S，即 S = [s,n]。例如，[“abc”, 3]=“abcabcabc”。<br>另一方面，如果我们可以从 s2 中删除某些字符使其变为 s1，我们称字符串 s1 可以从字符串 s2 获得。例如，“abc” 可以根据我们的定义从 “abdbec” 获得，但不能从 “acbbe” 获得。<br>现在给出两个非空字符串 S1 和 S2（每个最多 100 个字符长）和两个整数 0 ≤ N1 ≤ 10^6 和 1 ≤ N2 ≤ 10^6。现在考虑字符串 S1 和 S2，其中S1=[s1,n1]和S2=[s2,n2]。找出可以使[S2,M]从 S1 获得的最大整数 M。</p><p><strong>示例：</strong><br>输入：<br>s1 =”acb”,n1 = 4<br>s2 =”ab”,n2 = 2<br>返回：<br>2</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>比较麻烦的一道题，注意细节即可，先从头开始遍历匹配，直到遇到s1末尾匹配到s2相同的位置，此时能得到几个s1完全匹配几个s2（当然如果在找到这个之前n1就消耗完了就直接返回了），然后用一个除法取模，一下子能把绝大部分匹配完，最后再做少量遍历匹配结尾即可。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(N^2)$，其中N为字符串长度规模，因为n1结尾最多把n2的每个位置都匹配一遍就能找到重复的。<br>空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getMaxRepetitions</span><span class="params">(<span class="built_in">string</span> s1, <span class="keyword">int</span> n1, <span class="built_in">string</span> s2, <span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sz1 = s1.size(), sz2 = s2.size();</span><br><span class="line">    <span class="keyword">int</span> p2 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; f1, f2;</span><br><span class="line">    <span class="keyword">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>, last1 = <span class="number">-1</span>, last2 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (cnt1 == n1) &#123;</span><br><span class="line">        <span class="keyword">return</span> cnt2 / n2;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz1; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[i] == s2[p2]) &#123;</span><br><span class="line">          ++p2;</span><br><span class="line">          <span class="keyword">if</span> (p2 == sz2) &#123;</span><br><span class="line">            ++cnt2;</span><br><span class="line">            p2 = <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ++cnt1;</span><br><span class="line">      <span class="keyword">if</span> (f1.find(p2) == f1.end()) &#123;</span><br><span class="line">        f1[p2] = cnt1;</span><br><span class="line">        f2[p2] = cnt2;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        last1 = f1[p2];</span><br><span class="line">        last2 = f2[p2];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> delta1 = cnt1 - last1;</span><br><span class="line">    <span class="keyword">int</span> delta2 = cnt2 - last2;</span><br><span class="line">    n1 -= cnt1;</span><br><span class="line">    cnt2 += n1 / delta1 * delta2;</span><br><span class="line">    n1 %= delta1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n1; ++j) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz1; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[i] == s2[p2]) &#123;</span><br><span class="line">          ++p2;</span><br><span class="line">          <span class="keyword">if</span> (p2 == sz2) &#123;</span><br><span class="line">            ++cnt2;</span><br><span class="line">            p2 = <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt2 / n2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAns</span><span class="params">(<span class="keyword">int</span> ans)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unique_ptr</span>&lt;Solution&gt; solution(<span class="keyword">new</span> Solution);</span><br><span class="line">  PrintAns(solution-&gt;getMaxRepetitions(<span class="string">"acb"</span>, <span class="number">4</span>, <span class="string">"ab"</span>, <span class="number">2</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/count-the-repetitions/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 466. Count The Repetitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="模拟" scheme="http://tashi711.top/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 446. Arithmetic Slices II - Subsequence」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-446/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-446/</id>
    <published>2019-02-23T03:57:03.000Z</published>
    <updated>2019-02-23T05:32:00.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/arithmetic-slices-ii-subsequence/description/" target="_blank" rel="noopener">LeetCode 446. Arithmetic Slices II - Subsequence</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><a id="more"></a><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>如果一个数列至少有三个元素，并且任意两个相邻元素之差相同，则称该数列为等差数列。<br>例如，以下数列为等差数列:<br>1, 3, 5, 7, 9<br>7, 7, 7, 7<br>3, -1, -5, -9<br>以下数列不是等差数列。<br>1, 1, 2, 5, 7<br>数组 A 包含 N 个数，且索引从 0 开始。该数组子序列将划分为整数序列 (P0, P1, …, Pk)，P 与 Q 是整数且满足 0 ≤ P0 &lt; P1 &lt; … &lt; Pk &lt; N。<br>如果序列 A[P0]，A[P1]，…，A[Pk-1]，A[Pk] 是等差的，那么数组 A 的子序列 (P0，P1，…，PK) 称为等差序列。值得注意的是，这意味着 k ≥ 2。<br>函数要返回数组 A 中所有等差子序列的个数。<br>输入包含 N 个整数。每个整数都在 -231 和 231-1 之间，另外 0 ≤ N ≤ 1000。保证输出小于 231-1。</p><p><strong>示例：</strong><br>输入：[2, 4, 6, 8, 10]<br>输出：7<br>解释：<br>所有的等差子序列为：<br>[2,4,6]<br>[4,6,8]<br>[6,8,10]<br>[2,4,6,8]<br>[4,6,8,10]<br>[2,4,6,8,10]<br>[2,6,10]</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>比较简单的一道DP，只是要稍微绕一下，下标是离散的，需要用一个哈希转换一下。注意int - int可能得到int范围外的数，用long long保存差值即可。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(N^2)$。<br>空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = A.size();</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">unordered_map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt; cnt(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> dt = <span class="keyword">static_cast</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(A[i]) - A[j];</span><br><span class="line">        <span class="keyword">int</span> chd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (cnt[j].find(dt) != cnt[j].end()) &#123;</span><br><span class="line">          chd = cnt[j][dt];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt[i][dt] += chd + <span class="number">1</span>;</span><br><span class="line">        ans += chd;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAns</span><span class="params">(<span class="keyword">int</span> ans)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unique_ptr</span>&lt;Solution&gt; solution(<span class="keyword">new</span> Solution);</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;;</span><br><span class="line">  PrintAns(solution-&gt;numberOfArithmeticSlices(A));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/arithmetic-slices-ii-subsequence/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 446. Arithmetic Slices II - Subsequence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="动态规划" scheme="http://tashi711.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 996. Number of Squareful Arrays」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-996/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-996/</id>
    <published>2019-02-22T03:57:03.000Z</published>
    <updated>2019-02-20T08:04:12.862Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/number-of-squareful-arrays/description/" target="_blank" rel="noopener">LeetCode 996. Number of Squareful Arrays</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><a id="more"></a><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定一个非负整数数组 A，如果该数组每对相邻元素之和是一个完全平方数，则称这一数组为正方形数组。<br>返回 A 的正方形排列的数目。两个排列 A1 和 A2 不同的充要条件是存在某个索引 i，使得 A1[i] != A2[i]。</p><p><strong>示例 1：</strong><br>输入：[1,17,8]<br>输出：2<br>解释：<br>[1,8,17] 和 [17,8,1] 都是有效的排列。</p><p><strong>示例 2：</strong><br>输入：[2,2,2]<br>输出：1</p><p><strong>提示：</strong><br>1 &lt;= A.length &lt;= 12<br>0 &lt;= A[i] &lt;= 1e9</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>其实应该是标准的状压DP，参考标解2，这里使用暴力枚举也做出来了，当然加了点优化。<br>一开始先建图，用纯暴力枚举所有哈密顿路径，然后分别除以每个重复数字个数的阶乘，TLE。<br>尝试直接在dfs时判断，当前走过某个数字时，不在同一步尝试走跟它相同数值的结点（两个结点完全等价），AC。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(N!)$。<br>空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">numSquarefulPerms</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    ans_ = <span class="number">0</span>;</span><br><span class="line">    n_ = A.size();</span><br><span class="line">    adj_.assign(n_ + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    vst_.assign(n_ + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    f_.clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k : A) &#123;</span><br><span class="line">      ++f_[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n_; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n_; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsSquare(A[i] + A[j])) &#123;</span><br><span class="line">          adj_[i].push_back(j);</span><br><span class="line">          adj_[j].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n_; ++i) &#123;</span><br><span class="line">      adj_[n_].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    Dfs(<span class="number">0</span>, n_, A);</span><br><span class="line">    <span class="keyword">return</span> ans_;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">IsSquare</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">sqrt</span>(k) + <span class="number">0.5</span>);</span><br><span class="line">    <span class="keyword">if</span> (rt * rt == k) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> u, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">    vst_[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (p == n_) &#123;</span><br><span class="line">      ++ans_;</span><br><span class="line">      vst_[u] = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : adj_[u]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!vst_[v] &amp;&amp; s.find(A[v]) == s.end()) &#123;</span><br><span class="line">        Dfs(p + <span class="number">1</span>, v, A);</span><br><span class="line">        s.insert(A[v]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vst_[u] = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n_;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; adj_;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vst_;</span><br><span class="line">  <span class="keyword">int</span> ans_;</span><br><span class="line">  <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; f_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAns</span><span class="params">(<span class="keyword">int</span> ans)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unique_ptr</span>&lt;Solution&gt; solution(<span class="keyword">new</span> Solution);</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; input1 = &#123;<span class="number">1</span>, <span class="number">17</span>, <span class="number">8</span>&#125;;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; input2 = &#123;<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>&#125;;</span><br><span class="line">  PrintAns(solution-&gt;numSquarefulPerms(input1));</span><br><span class="line">  PrintAns(solution-&gt;numSquarefulPerms(input2));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/number-of-squareful-arrays/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 996. Number of Squareful Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="状态压缩DP" scheme="http://tashi711.top/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9DP/"/>
    
      <category term="TSP问题" scheme="http://tashi711.top/tags/TSP%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 995. Minimum Number of K Consecutive Bit Flips」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-995/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-995/</id>
    <published>2019-02-21T03:57:03.000Z</published>
    <updated>2019-02-20T08:03:55.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips/description/" target="_blank" rel="noopener">LeetCode 995. Minimum Number of K Consecutive Bit Flips</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><a id="more"></a><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>在仅包含 0 和 1 的数组 A 中，一次 K 位翻转包括选择一个长度为 K 的（连续）子数组，同时将子数组中的每个 0 更改为 1，而每个 1 更改为 0。<br>返回所需的 K 位翻转的次数，以便数组没有值为 0 的元素。如果不可能，返回 -1。</p><p><strong>示例 1：</strong><br>输入：A = [0,1,0], K = 1<br>输出：2<br>解释：先翻转 A[0]，然后翻转 A[2]。</p><p><strong>示例 2：</strong><br>输入：A = [1,1,0], K = 2<br>输出：-1<br>解释：无论我们怎样翻转大小为 2 的子数组，我们都不能使数组变为 [1,1,1]。</p><p><strong>示例 3：</strong><br>输入：A = [0,0,0,1,0,1,1,0], K = 3<br>输出：3<br>解释：<br>翻转 A[0],A[1],A[2]: A变成 [1,1,1,1,0,1,1,0]<br>翻转 A[4],A[5],A[6]: A变成 [1,1,1,1,1,0,0,0]<br>翻转 A[5],A[6],A[7]: A变成 [1,1,1,1,1,1,1,1]</p><p><strong>提示：</strong><br>1 &lt;= A.length &lt;= 30000<br>1 &lt;= K &lt;= A.length</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>很容易想到一个n方的贪心，从左扫到右，如果当前是0，就一定要变成1。<br>可以参考下题解的“开关事件”思路，非常巧妙，可以优化一维复杂度。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(N)$。<br>空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">minKBitFlips</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = A.size();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; flag(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      cur ^= flag[i];</span><br><span class="line">      <span class="keyword">if</span> (A[i] == cur) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i + K &gt; n) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++ans;</span><br><span class="line">        flag[i + K] = <span class="number">1</span>;</span><br><span class="line">        cur ^= <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAns</span><span class="params">(<span class="keyword">int</span> ans)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unique_ptr</span>&lt;Solution&gt; solution(<span class="keyword">new</span> Solution);</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a1 = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a2 = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a3 = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">  PrintAns(solution-&gt;minKBitFlips(a1, <span class="number">1</span>));</span><br><span class="line">  PrintAns(solution-&gt;minKBitFlips(a2, <span class="number">2</span>));</span><br><span class="line">  PrintAns(solution-&gt;minKBitFlips(a3, <span class="number">3</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 995. Minimum Number of K Consecutive Bit Flips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="巧妙" scheme="http://tashi711.top/tags/%E5%B7%A7%E5%A6%99/"/>
    
      <category term="贪心" scheme="http://tashi711.top/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 301. Remove Invalid Parentheses」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-301/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-301/</id>
    <published>2019-02-20T03:57:03.000Z</published>
    <updated>2019-02-20T07:29:06.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/remove-invalid-parentheses/description/" target="_blank" rel="noopener">LeetCode 301. Remove Invalid Parentheses</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><a id="more"></a><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>删除最小数量的无效括号，使得输入的字符串有效，返回所有可能的结果。<br>说明: 输入可能包含了除 ( 和 ) 以外的字符。</p><p><strong>示例 1:</strong><br>输入: “()())()”<br>输出: [“()()()”, “(())()”]</p><p><strong>示例 2:</strong><br>输入: “(a)())()”<br>输出: [“(a)()()”, “(a())()”]</p><p><strong>示例 3:</strong><br>输入: “)(“<br>输出: [“”]</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>题解太长就没看了，但是看到复杂度还是放心去码了（所以题目不给数据规模真的有时候挺难受）。首先有一点，括号除外的字母一定不用删掉，因此只需着眼于括号。</p><p>考虑纯暴力回溯，左括号多于右括号时才考虑添加，最坏2^N，记录答案时遇到更长的直接替换掉。我这里使用了一个小小的优化，先求出最优解的长度，然后用这个数据进行可行性剪枝。（或者这个属于最优化剪枝？看怎么理解。）当然了最坏复杂度还是2^N，比如一半左括号接一半右括号：(((…)))…。不过这个剪枝一般情况下可以节省大量时间（至少不用考虑长度了，因为经过可行性剪枝之后到达最后的一定是最长的）。</p><p>那么最优解的长度怎么求呢，其实很简单，线性的遍历一次即可，开一个计数器。遇到左括号计数器+1，遇到右括号如果计数器不为0则-1，最优解多匹配一组括号。</p><p>最后去重用unordered_set即可。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(2^N)$。<br>空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; removeInvalidParentheses(<span class="built_in">string</span> s) &#123;</span><br><span class="line">    ans_.clear();</span><br><span class="line">    s_ = s;</span><br><span class="line">    n_ = s_.size();</span><br><span class="line">    CalcLongestLen();</span><br><span class="line">    Dfs(<span class="number">0</span>, <span class="string">""</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;(ans_.begin(), ans_.end());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">CalcLongestLen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    len_ = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : s_) &#123;</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">'('</span>) &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">')'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt) &#123;</span><br><span class="line">          --cnt;</span><br><span class="line">          ++len_;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">const</span> <span class="built_in">string</span>&amp; cur, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == n_) &#123;</span><br><span class="line">      ans_.insert(cur);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s_[p] == <span class="string">'('</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (left &lt; len_) &#123;</span><br><span class="line">        Dfs(p + <span class="number">1</span>, cur + <span class="string">'('</span>, left + <span class="number">1</span>, right);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (n_ - <span class="number">1</span> - p &gt;= len_ * <span class="number">2</span> - left - right) &#123;</span><br><span class="line">        Dfs(p + <span class="number">1</span>, cur, left, right);</span><br><span class="line">      &#125; </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s_[p] == <span class="string">')'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">        Dfs(p + <span class="number">1</span>, cur + <span class="string">')'</span>, left, right + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (n_ - <span class="number">1</span> - p &gt;= len_ * <span class="number">2</span> - left - right) &#123;</span><br><span class="line">        Dfs(p + <span class="number">1</span>, cur, left, right);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n_ - <span class="number">1</span> - p &gt;= len_ * <span class="number">2</span> - left - right) &#123;</span><br><span class="line">      Dfs(p + <span class="number">1</span>, cur + s_[p], left, right);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; ans_;</span><br><span class="line">  <span class="built_in">string</span> s_;</span><br><span class="line">  <span class="keyword">int</span> n_ = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">int</span> len_ = <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAns</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">  ostream_iterator&lt;<span class="keyword">const</span> <span class="built_in">string</span>&amp;&gt; out_it(<span class="built_in">cout</span>, <span class="string">" "</span>);</span><br><span class="line">  copy(ans.cbegin(), ans.cend(), out_it);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unique_ptr</span>&lt;Solution&gt; solution(<span class="keyword">new</span> Solution);</span><br><span class="line">  PrintAns(solution-&gt;removeInvalidParentheses(<span class="string">"()())()"</span>));</span><br><span class="line">  PrintAns(solution-&gt;removeInvalidParentheses(<span class="string">"(a)())()"</span>));</span><br><span class="line">  PrintAns(solution-&gt;removeInvalidParentheses(<span class="string">")("</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/remove-invalid-parentheses/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 301. Remove Invalid Parentheses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="回溯" scheme="http://tashi711.top/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 295. Find Median from Data Stream」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-295/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-295/</id>
    <published>2019-02-19T03:57:03.000Z</published>
    <updated>2019-02-19T11:16:14.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/find-median-from-data-stream/description/" target="_blank" rel="noopener">LeetCode 295. Find Median from Data Stream</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><a id="more"></a><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。<br>例如，<br>[2,3,4] 的中位数是 3<br>[2,3] 的中位数是 (2 + 3) / 2 = 2.5<br>设计一个支持以下两种操作的数据结构：<br>void addNum(int num) - 从数据流中添加一个整数到数据结构中。<br>double findMedian() - 返回目前所有元素的中位数。</p><p><strong>示例：</strong><br>addNum(1)<br>addNum(2)<br>findMedian() -&gt; 1.5<br>addNum(3)<br>findMedian() -&gt; 2</p><p><strong>进阶:</strong><br>如果数据流中所有整数都在 0 到 100 范围内，你将如何优化你的算法？<br>如果数据流中 99% 的整数都在 0 到 100 范围内，你将如何优化你的算法？</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>不超时的算法，一是用两个堆（优先队列，题解方法3），插入是log时间，可能会移来移去，查找是常数时间，比较清晰。<br>这里主要说说第二种解法，其实就是裸的平衡树，单次插入都是log时间。<br>一般平衡树都可以实现求第k大数的功能，这样查找为log时间，可以优化，因为插入前后求第k大的位置相差不会超过1。<br>仅需判断插入后中间值往哪里移，（如果这个操作被认为是常数时间）插入操作仅需常数时间。<br>考虑使用STL的平衡树（multiset），代码基本与题解相同，使用一个迭代器。<br>要注意这段代码能够运行正确必须保证两点，一是插入操作不影响原先保存的迭代器位置（multiset满足）。<br>二是当插入重复元素时的位置是确定的，multiset在C++11之后是保证插入到相同元素的最后。<br>因此在C++11之前下面的代码其实是不保证正确的，需要注意。<br>至于进阶考虑的问题，如果整数值的规模只有100，可以开100个计数器。<br>维护前缀和在一半以前的位置，这样插入与查找的复杂度都是常数。<br>如果绝大部分数据满足这个，那么可以考虑绝大部分数据用计数器，其他数据再用平衡树。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(N \log N)$。<br>空间复杂度为$O(N)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MedianFinder</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  MedianFinder() : ptr_(data_.end()) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = data_.size();</span><br><span class="line">    data_.insert(num);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">      ptr_ = data_.begin();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; *ptr_) &#123;</span><br><span class="line">      ptr_ = (n &amp; <span class="number">1</span> ? ptr_ : prev(ptr_));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ptr_ = (n &amp; <span class="number">1</span> ? next(ptr_) : ptr_);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = data_.size();</span><br><span class="line">    <span class="keyword">return</span> (*ptr_ + *next(ptr_, n % <span class="number">2</span> - <span class="number">1</span>)) / <span class="number">2.0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; data_;</span><br><span class="line">  <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;::iterator ptr_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  MedianFinder obj;</span><br><span class="line">  obj.addNum(<span class="number">1</span>);</span><br><span class="line">  obj.addNum(<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; obj.findMedian() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  obj.addNum(<span class="number">3</span>);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; obj.findMedian() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/find-median-from-data-stream/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 295. Find Median from Data Stream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="平衡树" scheme="http://tashi711.top/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
</feed>
