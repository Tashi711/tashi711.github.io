<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tashi711的博客</title>
  
  <subtitle>過去（きのう）に傷付きながらも、信じ続ける理想（ゆめ）を求める。いつか無限（なないろ）に輝き放って、青空（そら）に橋を描く。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tashi711.top/"/>
  <updated>2019-07-09T14:05:48.733Z</updated>
  <id>http://tashi711.top/</id>
  
  <author>
    <name>Tashi711</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「树链剖分与动态树」详解</title>
    <link href="http://tashi711.top/programming/dsaa/qtree-and-lct/"/>
    <id>http://tashi711.top/programming/dsaa/qtree-and-lct/</id>
    <published>2019-07-10T03:15:34.000Z</published>
    <updated>2019-07-09T14:05:48.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><del>虽然是详解，然而并没有写代码。</del></p><p>前面有一篇文章简单提到树链剖分（简称树剖），这里详细介绍一波，另外与动态树做联系。</p><h2 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h2><h3 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h3><p>前面提到过，树剖可以操作以下四个步骤：将树从x到y结点最短路径上所有节点的值都加上z，求树从x到y结点最短路径上所有节点的值之和，将以x为根节点的子树内所有节点值都加上z，求以x为根节点的子树内所有节点值之和。其实这只是树剖的一个应用，完整地说，树剖用于解决树上的区间操作，包含两点之间的或者以某个点为根结点的子树。</p><h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><p>先是有以下的定义：</p><p>重儿子：对于每一个非叶子节点，它的儿子中以那个儿子为根的子树节点数最大的儿子为该节点的重儿子<br>轻儿子：对于每一个非叶子节点，它的儿子中非重儿子的剩下所有儿子即为轻儿子<br>重边：一个父亲连接他的重儿子的边称为重边<br>轻边：剩下的即为轻边<br>重链：相邻重边连起来的连接一条重儿子的链叫重链（对于叶子节点，若其为轻儿子，则有一条以自己为起点的长度为1的链，每一条重链以轻儿子为起点）</p><p>然后进行两个dfs操作，第一次分别求出deep、fa、size、重儿子编号，第二次标记每个点的新编号，维护每个点所在链的信息，要保证先处理重儿子再处理轻儿子，这样可以保证：1、每一条重链的新编号是连续的；2、每一个子树的新编号也是连续的。于是以上提到的操作就可以变成区间操作啦，区间可以用线段树维护。</p><p>对于两点之间路径：设所在链顶端的深度更深的那个点为x点，处理x点到x所在链顶端这一段区间，把x跳到x所在链顶端的那个点的上面一个点，然后不停执行这两个步骤，直到两个点处于一条链上，这时再处理此时两个点的区间即可。首先最多跳O(logN)次，因为轻边儿子size永远小于等于其父亲数量的一半，那么树中任意两个节点之间的路径中轻边的条数（也就是跳的次数）不会超过O(logN)，又每一段区间在线段树上的操作为O(logN)级别，因此单次操作复杂度为O((logN)^2)。</p><p>对于某点的子树：记录了每个非叶子节点的子树大小，并且每个子树的新编号都是连续的，于是直接线段树区间查询即可，时间复杂度为O(logN)。</p><a id="more"></a><h2 id="动态树"><a href="#动态树" class="headerlink" title="动态树"></a>动态树</h2><h3 id="问题提出-1"><a href="#问题提出-1" class="headerlink" title="问题提出"></a>问题提出</h3><p>支持树上的区间操作，<del>据说树剖能做的动态树都能做，</del>且支持边的连接与删除。</p><h3 id="算法概述-1"><a href="#算法概述-1" class="headerlink" title="算法概述"></a>算法概述</h3><p>首先一般来说动态树有很多种实现，LCT（Link-Cut Tree）是其中一种，现在一般说到动态树大概都是指LCT了吧。这里主要讲LCT。</p><p>LCT将某一个儿子的连边划分为实边，而连向其他子树的边划分为虚边（当然也有重边轻边的说法，在英文里是preferred）。一般使用splay来维护每一条由若干实边连接而成的实链。LCT维护的对象其实是一个森林，它支持查询、修改链上的信息（最值，总和等）、随意指定原树的根（即换根）、动态连边删边、合并两棵树、分离一棵树、动态维护连通性。</p><p>LCT的有以下性质：每一个splay维护的是一条从上到下按在原树中深度严格递增的路径（这点与树剖的重链一个道理），且中序遍历splay得到的每个点的深度序列严格递增；每个节点包含且仅包含于一个splay中；边分为实边和虚边，实边包含在splay中，而虚边总是由一棵splay指向另一个节点（指向该splay中中序遍历最靠前的点在原树中的父亲），当某点在原树中有多个儿子时，只能向其中一个儿子拉一条实链（只认一个儿子），而其它儿子是不能在这个splay中的，那么为了保持树的形状，我们要让到其它儿子的边变为虚边，由对应儿子所属的splay的根节点的父亲指向该点，而从该点并不能直接访问该儿子。</p><p>LCT主要有以下操作：</p><p>1、access，LCT的核心操作是，其它所有的操作都是在此基础上完成的。因为不能总是保证两个点之间的路径是直接连通的（在一个splay上），access即定义为打通根节点到指定节点的实链，使得一条中序遍历以根开始、以指定点结束的splay出现。<del>这个操作具体做法最好在网上找个带图的博客，对应流程走一遍，文字比较难讲清楚，总之知道有这个操作以及它的作用。</del></p><p>2、makeroot，access只是把根到某个节点的路径拉起来，更多时候要获取指定两个节点之间的路径信息。然而一定会出现路径不能满足按深度严格递增的要求的情况，因为这样的路径不能在一个splay中。makeroot定义为换根，让指定点成为原树的根。这时候就利用到access(x)和splay的翻转操作。access(x)后x在splay中一定是深度最大的点。splay(x)后，x在splay中将没有右子树。于是翻转整个splay（交换左右儿子），使得所有点的深度都倒过来了，x没了左子树，反倒成了深度最小的点（根节点），达到目的。</p><p>3、findroot，找某点所在原树的树根，主要用来判断两点之间的连通性（findroot(x) == findroot(y)表明x、y在同一棵树中），具体做法为不停找左儿子，因为其深度一定比当前点深度小。</p><p>4、split，split(x, y)定义为拉出x−y的路径成为一个splay，只需makeroot(x)、access(y)、splay(y)，即x成为了根，那么x到y的路径就可以用access(y)直接拉出来了，将y转到splay根后，我们就可以直接通过访问y来获取该路径的有关信息。</p><p>5、link，link(x, y)定义为连一条x−y的边，只需makeroot(x)再fa[x]=y即可（注意判断x、y是否本身就在同一条链上）。</p><p>6、cut，cut(x, y)定义为将x−y的边断开。使x为根后，y的父亲一定指向x，深度相差一定是1。当access(y)、splay(y)以后，x一定是y的左儿子，直接双向断开连接（注意判断x-y是否存在）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;del&gt;虽然是详解，然而并没有写代码。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;前面有一篇文章简单提到树链剖分（简称树剖），这里详细介绍一波，另外与动态树做联系。&lt;/p&gt;
&lt;h2 id=&quot;树链剖分&quot;&gt;&lt;a href=&quot;#树链剖分&quot; class=&quot;headerlink&quot; title=&quot;树链剖分&quot;&gt;&lt;/a&gt;树链剖分&lt;/h2&gt;&lt;h3 id=&quot;问题提出&quot;&gt;&lt;a href=&quot;#问题提出&quot; class=&quot;headerlink&quot; title=&quot;问题提出&quot;&gt;&lt;/a&gt;问题提出&lt;/h3&gt;&lt;p&gt;前面提到过，树剖可以操作以下四个步骤：将树从x到y结点最短路径上所有节点的值都加上z，求树从x到y结点最短路径上所有节点的值之和，将以x为根节点的子树内所有节点值都加上z，求以x为根节点的子树内所有节点值之和。其实这只是树剖的一个应用，完整地说，树剖用于解决树上的区间操作，包含两点之间的或者以某个点为根结点的子树。&lt;/p&gt;
&lt;h3 id=&quot;算法概述&quot;&gt;&lt;a href=&quot;#算法概述&quot; class=&quot;headerlink&quot; title=&quot;算法概述&quot;&gt;&lt;/a&gt;算法概述&lt;/h3&gt;&lt;p&gt;先是有以下的定义：&lt;/p&gt;
&lt;p&gt;重儿子：对于每一个非叶子节点，它的儿子中以那个儿子为根的子树节点数最大的儿子为该节点的重儿子&lt;br&gt;轻儿子：对于每一个非叶子节点，它的儿子中非重儿子的剩下所有儿子即为轻儿子&lt;br&gt;重边：一个父亲连接他的重儿子的边称为重边&lt;br&gt;轻边：剩下的即为轻边&lt;br&gt;重链：相邻重边连起来的连接一条重儿子的链叫重链（对于叶子节点，若其为轻儿子，则有一条以自己为起点的长度为1的链，每一条重链以轻儿子为起点）&lt;/p&gt;
&lt;p&gt;然后进行两个dfs操作，第一次分别求出deep、fa、size、重儿子编号，第二次标记每个点的新编号，维护每个点所在链的信息，要保证先处理重儿子再处理轻儿子，这样可以保证：1、每一条重链的新编号是连续的；2、每一个子树的新编号也是连续的。于是以上提到的操作就可以变成区间操作啦，区间可以用线段树维护。&lt;/p&gt;
&lt;p&gt;对于两点之间路径：设所在链顶端的深度更深的那个点为x点，处理x点到x所在链顶端这一段区间，把x跳到x所在链顶端的那个点的上面一个点，然后不停执行这两个步骤，直到两个点处于一条链上，这时再处理此时两个点的区间即可。首先最多跳O(logN)次，因为轻边儿子size永远小于等于其父亲数量的一半，那么树中任意两个节点之间的路径中轻边的条数（也就是跳的次数）不会超过O(logN)，又每一段区间在线段树上的操作为O(logN)级别，因此单次操作复杂度为O((logN)^2)。&lt;/p&gt;
&lt;p&gt;对于某点的子树：记录了每个非叶子节点的子树大小，并且每个子树的新编号都是连续的，于是直接线段树区间查询即可，时间复杂度为O(logN)。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树链剖分" scheme="http://tashi711.top/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
      <category term="动态树" scheme="http://tashi711.top/tags/%E5%8A%A8%E6%80%81%E6%A0%91/"/>
    
      <category term="LCT" scheme="http://tashi711.top/tags/LCT/"/>
    
  </entry>
  
  <entry>
    <title>「一些其他的数据结构与算法」简单小结（三）</title>
    <link href="http://tashi711.top/programming/dsaa/some-thoughts-3/"/>
    <id>http://tashi711.top/programming/dsaa/some-thoughts-3/</id>
    <published>2019-07-09T03:15:34.000Z</published>
    <updated>2019-07-09T13:15:34.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本篇作为本系列第三篇，简单介绍可持续化并查集、可持续化平衡树、后缀自动机、严格次小生成树、扩展BSGS算法与扩展Lucas定理。</p><p><del>预警，本篇水分大，写（看）完跟没写（看）一样。</del></p><h2 id="可持续化并查集"><a href="#可持续化并查集" class="headerlink" title="可持续化并查集"></a>可持续化并查集</h2><h3 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h3><p>n个集合、m个操作、操作包括：<br>1、合并a,b所在集合<br>2、k回到第k次操作之后的状态(查询算作操作)<br>3、询问a,b是否属于同一集合，是则输出1否则输出0</p><h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><p>结合之前一篇分析过可持久化数据结构的文章，运用用可持久化数据结构共用一些点来达到节省空间的效果。首先先是要用不带路径压缩的并查集，这样对于每一次合并只会改一个点的父亲，所以一个版本的相对于上一个版本只会改一个点。其次如果并查集退化成一条链，find复杂度会很高，因此使用启发式合并（深度或者子树结点个数）。</p><a id="more"></a><h2 id="可持续化平衡树"><a href="#可持续化平衡树" class="headerlink" title="可持续化平衡树"></a>可持续化平衡树</h2><h3 id="问题提出-1"><a href="#问题提出-1" class="headerlink" title="问题提出"></a>问题提出</h3><p>支持之前一篇谈到平衡树文章中的6个操作（插入、删除、查x排名、查排名为k、前驱、后驱），其中后4种要求在某个版本上进行。</p><h3 id="算法概述-1"><a href="#算法概述-1" class="headerlink" title="算法概述"></a>算法概述</h3><p><del>由于这些东西太难了根本学不来，</del>这里就给出几种可以解决的做法，感兴趣可以深究：<br>1、fhq treap<del>（范浩强迷弟一枚，12年冬令营有现场见到）</del><br>2、替罪羊树<br>3、可持续化线段树<del>（？）</del></p><h2 id="后缀自动机"><a href="#后缀自动机" class="headerlink" title="后缀自动机"></a>后缀自动机</h2><h3 id="问题提出-2"><a href="#问题提出-2" class="headerlink" title="问题提出"></a>问题提出</h3><p>各种字符串问题。</p><h3 id="算法概述-2"><a href="#算法概述-2" class="headerlink" title="算法概述"></a>算法概述</h3><p>字符串问题有一个强大的工具：后缀数组，之前写了一篇文章专门讲了一下，这篇简单<strong>介绍</strong>另一个叫后缀自动机的问题，复杂度为O(N)与最优的后缀数组解法DC3复杂度同阶，但也与DC3一样常数很大。现这个算法是在线算法，这意味着我们可以逐个加入字 符串中的每个字符，并且在每一步中对应地维护后缀自动机。能解决的问题与后缀数组有一些重叠，两者也有彼此解决不了的问题。</p><h2 id="严格次小生成树"><a href="#严格次小生成树" class="headerlink" title="严格次小生成树"></a>严格次小生成树</h2><h3 id="问题提出-3"><a href="#问题提出-3" class="headerlink" title="问题提出"></a>问题提出</h3><p>题如其名。</p><h3 id="算法概述-3"><a href="#算法概述-3" class="headerlink" title="算法概述"></a>算法概述</h3><p>首先非严格次小生成树很简单，遍历每条未选的边(u,v,d)，用它替换u和v之间的最大边即可（为什么应该比较容易想通），而如果要求严格则会将难度上升，<br>总的思路就是用Kruskal将最小生成树先找出来，然后替换次大边（用倍增LCA可以维护次大边）。</p><h2 id="扩展BSGS算法"><a href="#扩展BSGS算法" class="headerlink" title="扩展BSGS算法"></a>扩展BSGS算法</h2><h3 id="问题提出-4"><a href="#问题提出-4" class="headerlink" title="问题提出"></a>问题提出</h3><p>（离散对数问题：）已知数a,p,b，求满足a^x≡b(mod p)的最小自然数x。</p><h3 id="算法概述-4"><a href="#算法概述-4" class="headerlink" title="算法概述"></a>算法概述</h3><p>首先先说说原版BSGS（大步小步，baby steps giant steps）算法，解决这个问题的a与p保证互质的版本，根号p复杂度，枚举是O(p)。扩展BSGS就是先将原题递归到a、p互质，然后再用普通的BSGS。递归的级别是对数的。</p><h2 id="扩展Lucas定理"><a href="#扩展Lucas定理" class="headerlink" title="扩展Lucas定理"></a>扩展Lucas定理</h2><h3 id="问题提出-5"><a href="#问题提出-5" class="headerlink" title="问题提出"></a>问题提出</h3><p>求C(n, m) mod p，C为组合数。</p><h3 id="算法概述-5"><a href="#算法概述-5" class="headerlink" title="算法概述"></a>算法概述</h3><p>首先先说说原版Lucas定理，之前有写一篇文章专门讲过，即p为质数的版本，与上面的BSGS不同，扩展Lucas完全跟Lucas没关系，需要用到中国剩余定理、扩展欧几里得、乘法逆元这些东西，这些我都有文章写过。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;本篇作为本系列第三篇，简单介绍可持续化并查集、可持续化平衡树、后缀自动机、严格次小生成树、扩展BSGS算法与扩展Lucas定理。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;预警，本篇水分大，写（看）完跟没写（看）一样。&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;可持续化并查集&quot;&gt;&lt;a href=&quot;#可持续化并查集&quot; class=&quot;headerlink&quot; title=&quot;可持续化并查集&quot;&gt;&lt;/a&gt;可持续化并查集&lt;/h2&gt;&lt;h3 id=&quot;问题提出&quot;&gt;&lt;a href=&quot;#问题提出&quot; class=&quot;headerlink&quot; title=&quot;问题提出&quot;&gt;&lt;/a&gt;问题提出&lt;/h3&gt;&lt;p&gt;n个集合、m个操作、操作包括：&lt;br&gt;1、合并a,b所在集合&lt;br&gt;2、k回到第k次操作之后的状态(查询算作操作)&lt;br&gt;3、询问a,b是否属于同一集合，是则输出1否则输出0&lt;/p&gt;
&lt;h3 id=&quot;算法概述&quot;&gt;&lt;a href=&quot;#算法概述&quot; class=&quot;headerlink&quot; title=&quot;算法概述&quot;&gt;&lt;/a&gt;算法概述&lt;/h3&gt;&lt;p&gt;结合之前一篇分析过可持久化数据结构的文章，运用用可持久化数据结构共用一些点来达到节省空间的效果。首先先是要用不带路径压缩的并查集，这样对于每一次合并只会改一个点的父亲，所以一个版本的相对于上一个版本只会改一个点。其次如果并查集退化成一条链，find复杂度会很高，因此使用启发式合并（深度或者子树结点个数）。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="可持续化并查集" scheme="http://tashi711.top/tags/%E5%8F%AF%E6%8C%81%E7%BB%AD%E5%8C%96%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="可持续化平衡树" scheme="http://tashi711.top/tags/%E5%8F%AF%E6%8C%81%E7%BB%AD%E5%8C%96%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="后缀自动机" scheme="http://tashi711.top/tags/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
      <category term="严格次小生成树" scheme="http://tashi711.top/tags/%E4%B8%A5%E6%A0%BC%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="扩展BSGS算法" scheme="http://tashi711.top/tags/%E6%89%A9%E5%B1%95BSGS%E7%AE%97%E6%B3%95/"/>
    
      <category term="扩展Lucas定理" scheme="http://tashi711.top/tags/%E6%89%A9%E5%B1%95Lucas%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>「一些其他的数据结构与算法」简单小结（二）</title>
    <link href="http://tashi711.top/programming/dsaa/some-thoughts-2/"/>
    <id>http://tashi711.top/programming/dsaa/some-thoughts-2/</id>
    <published>2019-07-08T03:15:34.000Z</published>
    <updated>2019-07-07T15:16:46.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本篇作为本系列第二篇，简单介绍欧拉函数、CDQ分治、2-SAT。</p><h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><h3 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h3><p>给定三个正整数，a,m,b，需要求：a^b mod m。</p><h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><p>首先，<strong>欧拉定理</strong>：a与m互质，则a^phi(m) mod m = 1。<br>然后，<strong>扩展欧拉定理</strong>（对应这个问题，a与m不一定互质）：a^b mod m同余于<br>1、a^b（当b小于phi(m)）；<br>2、a^(b mod phi(m) + phi(m))（当b大于等于phi(m)）。</p><p>而phi(n)，即n的欧拉函数（小于等于n的质数个数），为n*(1-1/p1)*(1-1/p2)*…*(1-1/pn)，其中pi为n的质因数。</p><a id="more"></a><h2 id="CDQ分治"><a href="#CDQ分治" class="headerlink" title="CDQ分治"></a>CDQ分治</h2><h3 id="问题提出-1"><a href="#问题提出-1" class="headerlink" title="问题提出"></a>问题提出</h3><p>三维偏序：给定N个有序三元组(a,b,c)，求对于每个三元组(a,b,c)，有多少个三元组(a2,b2,c2)满足a2 &lt; a且b2 &lt; b且c2 &lt; c。</p><h3 id="算法概述-1"><a href="#算法概述-1" class="headerlink" title="算法概述"></a>算法概述</h3><p>自己比较弱渣，不太懂其算法精髓，因此只能通过这个例子来阐述。首先二维偏序运用归并排序或者树状数组的做法已经很熟悉了，三维就是将两者结合，先对a排序，再对b归并，归并当中对c做树状数组，复杂度O(Nlog^2N)，当然不用离散化就是O(NlogNlogM)，M为数的规模。</p><p>有一个扩展，就是平面上有N个点，每个点的横纵坐标在M范围之间，有N个询问，每个询问为查询在指定矩形之内有多少个点，矩形用(x1,y1,x2,y2)的方式给出，其中(x1,y1)为左下角坐标，(x2,y2)为右上角坐标。这个就是把每个点的位置变成一个修改操作，用三元组(时间，横坐标，纵坐标)来表示，把每个查询分解成4个前缀和查询，同样用三元组来表示。对于修改操作，每个三元组没有附加信息；对于查询操作，每个三元组的附加信息为第几个查询和对结果的影响是+还是-。操作到来的时间是默认有序的，分治过程中按照横坐标从小到大排序，用树状数组维护纵坐标的信息。</p><h2 id="2-SAT"><a href="#2-SAT" class="headerlink" title="2-SAT"></a>2-SAT</h2><h3 id="问题提出-2"><a href="#问题提出-2" class="headerlink" title="问题提出"></a>问题提出</h3><p>有n个布尔变量x1~xn，另有m个需要满足的条件，每个条件的形式都是“xi为true/false或xj为true/false”。2-SAT问题的目标是给每个变量赋值使得所有条件得到满足。</p><h3 id="算法概述-2"><a href="#算法概述-2" class="headerlink" title="算法概述"></a>算法概述</h3><p>n(n&gt;=3)-SAT都被证明是NP的。2-SAT可以用图论解决，使用强连通分量。 对于每个变量x，我们建立两个点x、¬x，分别表示变量x取true和取false。所以，图的节点个数是两倍的变量个数。对于要求(a∨b)，转换为¬a→b∧¬b→a。对于这个式子，可以理解为：「若a假则b必真，若b假则a必真」，然后按照箭头的方向建有向边就好了。同一强连通分量内的变量值一定是相等的。也就是说，如果x与¬x在同一强连通分量内部，一定无解。反之，就一定有解了。构造解的方法很简单，强连通块缩点之后形成拓扑图，拓扑图的边(u,v)的意义为如果u为真那么v一定为真，只需要当x所在的强连通分量的拓扑序在¬x所在的强连通分量的拓扑序之后取x为真就可以了（之前就取假）。总的复杂度为Tarjan算法复杂度，O(N+M)。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;本篇作为本系列第二篇，简单介绍欧拉函数、CDQ分治、2-SAT。&lt;/p&gt;
&lt;h2 id=&quot;欧拉函数&quot;&gt;&lt;a href=&quot;#欧拉函数&quot; class=&quot;headerlink&quot; title=&quot;欧拉函数&quot;&gt;&lt;/a&gt;欧拉函数&lt;/h2&gt;&lt;h3 id=&quot;问题提出&quot;&gt;&lt;a href=&quot;#问题提出&quot; class=&quot;headerlink&quot; title=&quot;问题提出&quot;&gt;&lt;/a&gt;问题提出&lt;/h3&gt;&lt;p&gt;给定三个正整数，a,m,b，需要求：a^b mod m。&lt;/p&gt;
&lt;h3 id=&quot;算法概述&quot;&gt;&lt;a href=&quot;#算法概述&quot; class=&quot;headerlink&quot; title=&quot;算法概述&quot;&gt;&lt;/a&gt;算法概述&lt;/h3&gt;&lt;p&gt;首先，&lt;strong&gt;欧拉定理&lt;/strong&gt;：a与m互质，则a^phi(m) mod m = 1。&lt;br&gt;然后，&lt;strong&gt;扩展欧拉定理&lt;/strong&gt;（对应这个问题，a与m不一定互质）：a^b mod m同余于&lt;br&gt;1、a^b（当b小于phi(m)）；&lt;br&gt;2、a^(b mod phi(m) + phi(m))（当b大于等于phi(m)）。&lt;/p&gt;
&lt;p&gt;而phi(n)，即n的欧拉函数（小于等于n的质数个数），为n*(1-1/p1)*(1-1/p2)*…*(1-1/pn)，其中pi为n的质因数。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="欧拉函数" scheme="http://tashi711.top/tags/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    
      <category term="CDQ分治" scheme="http://tashi711.top/tags/CDQ%E5%88%86%E6%B2%BB/"/>
    
      <category term="2-SAT" scheme="http://tashi711.top/tags/2-SAT/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 647、739、771」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-647-739-771/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-647-739-771/</id>
    <published>2019-07-07T03:57:02.000Z</published>
    <updated>2019-07-07T03:07:15.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="647-Palindromic-Substrings"><a href="#647-Palindromic-Substrings" class="headerlink" title="647. Palindromic Substrings"></a>647. Palindromic Substrings</h2><p>Given a string, your task is to count how many palindromic substrings in this string.</p><p>The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>水题一道，两个循环数一数奇数偶数的情况即可，标答用一个循环搞定，此外貌似马拉车也能做？感觉没必要。n方复杂度。</p><h3 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">countSubstrings</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.size();</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      ++res;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; <span class="literal">true</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = i - j, v = i + j;</span><br><span class="line">        <span class="keyword">if</span> (u &gt;= <span class="number">0</span> &amp;&amp; v &lt; n &amp;&amp; s[u] == s[v]) &#123;</span><br><span class="line">          ++res;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; <span class="literal">true</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = i - j + <span class="number">1</span>, v = i + j;</span><br><span class="line">        <span class="keyword">if</span> (u &gt;= <span class="number">0</span> &amp;&amp; v &lt; n &amp;&amp; s[u] == s[v]) &#123;</span><br><span class="line">          ++res;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="739-Daily-Temperatures"><a href="#739-Daily-Temperatures" class="headerlink" title="739. Daily Temperatures"></a>739. Daily Temperatures</h2><p>Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.</p><p>For example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].</p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>看了题解发现自己很蠢哈哈哈，以下我的代码想的是从后往前维护单调队列，基本跟题解一个思路了，然而自己还想的是用二分查找做寻找，其实并没有必要，当弹出操作结束后就是想要的答案了。所以只需要线性复杂度，而不需要多个二分查找的对数级。</p><h3 id="AC代码（C-）-1"><a href="#AC代码（C-）-1" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dailyTemperatures(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; T) &#123;</span><br><span class="line">    <span class="keyword">int</span> n = T.size();</span><br><span class="line">    <span class="built_in">deque</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; d;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(n);</span><br><span class="line">    res.reserve(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line">      <span class="keyword">auto</span> cur_it = lower_bound(d.begin(), d.end(), make_pair(T[i] + <span class="number">1</span>, i));</span><br><span class="line">      res[i] = cur_it == d.end() ? <span class="number">0</span> : cur_it-&gt;second - i;</span><br><span class="line">      <span class="keyword">while</span> (!d.empty() &amp;&amp; T[i] &gt;= d.front().first) &#123;</span><br><span class="line">        d.pop_front();</span><br><span class="line">      &#125;</span><br><span class="line">      d.emplace_front(T[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="771-Jewels-and-Stones"><a href="#771-Jewels-and-Stones" class="headerlink" title="771. Jewels and Stones"></a>771. Jewels and Stones</h2><p>You’re given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.</p><p>The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so “a” is considered a different type of stone from “A”.</p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>水题一道，哈希set记下J再数S，线性复杂度。</p><h3 id="AC代码（C-）-2"><a href="#AC代码（C-）-2" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">numJewelsInStones</span><span class="params">(<span class="built_in">string</span> J, <span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">unordered_set</span>&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : J) &#123;</span><br><span class="line">      s.insert(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : S) &#123;</span><br><span class="line">      <span class="keyword">if</span> (s.find(c) != s.end()) &#123;</span><br><span class="line">        ++res;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;647-Palindromic-Substrings&quot;&gt;&lt;a href=&quot;#647-Palindromic-Substrings&quot; class=&quot;headerlink&quot; title=&quot;647. Palindromic Substrings&quot;&gt;&lt;/a&gt;647. Palindromic Substrings&lt;/h2&gt;&lt;p&gt;Given a string, your task is to count how many palindromic substrings in this string.&lt;/p&gt;
&lt;p&gt;The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.&lt;/p&gt;
&lt;h3 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h3&gt;&lt;p&gt;水题一道，两个循环数一数奇数偶数的情况即可，标答用一个循环搞定，此外貌似马拉车也能做？感觉没必要。n方复杂度。&lt;/p&gt;
&lt;h3 id=&quot;AC代码（C-）&quot;&gt;&lt;a href=&quot;#AC代码（C-）&quot; class=&quot;headerlink&quot; title=&quot;AC代码（C++）&quot;&gt;&lt;/a&gt;AC代码（C++）&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;countSubstrings&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = s.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ++res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; u = i - j, v = i + j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (u &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; v &amp;lt; n &amp;amp;&amp;amp; s[u] == s[v]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ++res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; u = i - j + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, v = i + j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (u &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; v &amp;lt; n &amp;amp;&amp;amp; s[u] == s[v]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ++res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="LeetCode-top-100" scheme="http://tashi711.top/tags/LeetCode-top-100/"/>
    
  </entry>
  
  <entry>
    <title>「一些其他的数据结构与算法」简单小结（一）</title>
    <link href="http://tashi711.top/programming/dsaa/some-thoughts-1/"/>
    <id>http://tashi711.top/programming/dsaa/some-thoughts-1/</id>
    <published>2019-06-27T03:15:34.000Z</published>
    <updated>2019-06-27T15:29:57.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>逐渐将当年学的各算法与数据结构复习了一遍，模板题也刷到NOI难度，有点做不动了，因为之后也没有过硬的对比较稀有的数据结构与算法的OI需求了（而更需要一些解题能力），这里基本不再频繁更新模板库了，只是对这些数据结构与算法进行简单小结。<strong>（本系列不涉及任何实现细节，更没有模板代码，只讨论用什么样的东西解决什么样的问题，效率如何之类的。）</strong></p><p>本篇作为本系列第一篇，简单介绍FFT（快速傅里叶变换）、平衡树与树链剖分。</p><h2 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h2><a id="more"></a><h3 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h3><p>1、A*B Problem：给出两个n位10进制整数x和y，计算x*y。n可能很大，暴力n方可能超时。<br>2、多项式乘法：给定一个n次多项式F(x)（的各项系数），和一个m次多项式G(x)（的各项系数），求F(x)和G(x)的卷积（的各项系数）。</p><h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><p>两道题本质一样，都是转换到复域进行计算，需要一定的数学推导，时间复杂度为O(nlogn)（假设n、m同阶）。在这中间还有什么蝴蝶操作、蝴蝶定理之类的，比较有意思。</p><h2 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h2><p>平衡树应该不陌生，作为科班出身多少学了一两种平衡树（AVL之类的），作为C++er也应该多少知道红黑树用于STL的set与map实现，竞赛的时候我们要求掌握的就是splay，这种平衡树应该说是最“面向OI的”，有容易写出来功能全效率还OK之类的特性。</p><h3 id="splay"><a href="#splay" class="headerlink" title="splay"></a>splay</h3><p>splay以其各种旋转操作著称，虽然他拥有比一般平衡树更大的常数，但确实是功能齐全的平衡树中最好实现的了，并且各操作效率稳定。一般认为（手写）平衡树需要实现以下功能（当然，是在对数时间内）：</p><p>1、插入xx数<br>2、删除xx数<br>3、查询xx数的排名<br>4、查询排名为xx的数<br>5、求xx的前驱(前驱定义为小于xx，且最大的数)<br>6、求xx的后继(后继定义为大于xx，且最小的数)</p><p>如果只需要1、2、5、6，那么STL的set和map就可以直接上了（虽然常数也很大）。（另外treap貌似也能实现这些功能而且也不难写？不过自己没写过treap就不轻易评价了。）</p><h3 id="文艺平衡树"><a href="#文艺平衡树" class="headerlink" title="文艺平衡树"></a>文艺平衡树</h3><p>一般指支持序列操作的平衡树（尤其是splay，貌似treap也能上？），支持以下操作：维护一个有序数列，可以翻转一个区间，例如原有序序列是5 4 3 2 1，翻转区间是[2, 4]的话，结果是5 2 3 4 1。</p><p>做法是splay的变体，其不再对权值排序，而是现在按照的序列中的编号排序，具体做法可以去深入探究下，当然前提是搞懂splay。</p><h2 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h2><h3 id="问题提出-1"><a href="#问题提出-1" class="headerlink" title="问题提出"></a>问题提出</h3><p>已知一棵包含N个结点的树（连通且无环），每个节点上包含一个数值，需要支持以下操作（对数时间）：</p><p>1、将树从x到y结点最短路径上所有节点的值都加上z<br>2、求树从x到y结点最短路径上所有节点的值之和<br>3、将以x为根节点的子树内所有节点值都加上z<br>4、求以x为根节点的子树内所有节点值之和</p><h3 id="算法概述-1"><a href="#算法概述-1" class="headerlink" title="算法概述"></a>算法概述</h3><p>树链剖分的主题思想是对一棵树分成几条链，把树形变为线性，减少处理难度。其中涉及到重儿子轻儿子重边轻边之类的概念。之前竞赛还写过模板，不过应用的题目几乎没有接触。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;逐渐将当年学的各算法与数据结构复习了一遍，模板题也刷到NOI难度，有点做不动了，因为之后也没有过硬的对比较稀有的数据结构与算法的OI需求了（而更需要一些解题能力），这里基本不再频繁更新模板库了，只是对这些数据结构与算法进行简单小结。&lt;strong&gt;（本系列不涉及任何实现细节，更没有模板代码，只讨论用什么样的东西解决什么样的问题，效率如何之类的。）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本篇作为本系列第一篇，简单介绍FFT（快速傅里叶变换）、平衡树与树链剖分。&lt;/p&gt;
&lt;h2 id=&quot;FFT&quot;&gt;&lt;a href=&quot;#FFT&quot; class=&quot;headerlink&quot; title=&quot;FFT&quot;&gt;&lt;/a&gt;FFT&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树链剖分" scheme="http://tashi711.top/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
      <category term="FFT" scheme="http://tashi711.top/tags/FFT/"/>
    
      <category term="平衡树" scheme="http://tashi711.top/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>「康托展开」详解</title>
    <link href="http://tashi711.top/programming/dsaa/cantor-expansion/"/>
    <id>http://tashi711.top/programming/dsaa/cantor-expansion/</id>
    <published>2019-06-26T03:15:34.000Z</published>
    <updated>2019-06-26T13:21:24.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>这东西……emmm……名字很高大上，实则就是求全排列的名次。其实N方就好，不过用树状数组可以优化到O(NlogN)。</p><p>另外根据名次求全排列是逆展开，同样的思路，此处略。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题5367（康托展开）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXN = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAXN + <span class="number">1</span>];  <span class="comment">// input</span></span><br><span class="line"><span class="keyword">int</span> tree[MAXN + <span class="number">1</span>];  <span class="comment">// init 0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> MOD&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cantor_expansion</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">binary_indexed_tree</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    binary_indexed_tree(<span class="keyword">int</span> n) : n(n) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = p; i &lt;= n; i += lowbit(i)) &#123;</span><br><span class="line">        tree[i] += k;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> p)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = p; i; i ^= lowbit(i)) &#123;</span><br><span class="line">        sum += tree[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; bit;</span><br><span class="line"></span><br><span class="line">  cantor_expansion(<span class="keyword">int</span> n) : n(n), bit(n) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>, fact = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      <span class="keyword">int</span> cur = bit.get_sum(a[i] - <span class="number">1</span>);</span><br><span class="line">      res = (res + cur * fact) % MOD;</span><br><span class="line">      fact = fact * i % MOD;</span><br><span class="line">      bit.update(a[i], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5367</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  nyuuryoku(n);</span><br><span class="line">  cantor_expansion&lt;<span class="number">998244353</span>&gt; ce(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">    nyuuryoku(a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  shutsuryokul(ce.work());</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;这东西……emmm……名字很高大上，实则就是求全排列的名次。其实N方就好，不过用树状数组可以优化到O(NlogN)。&lt;/p&gt;
&lt;p&gt;另外根据名次求全排列是逆展开，同样的思路，此处略。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="康托展开" scheme="http://tashi711.top/tags/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/"/>
    
  </entry>
  
  <entry>
    <title>「后缀数组」深入理解</title>
    <link href="http://tashi711.top/programming/dsaa/suffix-array/"/>
    <id>http://tashi711.top/programming/dsaa/suffix-array/</id>
    <published>2019-06-25T03:15:34.000Z</published>
    <updated>2019-06-26T13:17:05.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>这东西每次看都能把自己绕晕。这里主要说倍增算法（O(NlogN)）。DC3算法（O(N)）常数比较大且编码难度大，此处略去<del>（当然也是因为本人太菜了根本学不动）</del>。</p><h3 id="后缀排序之倍增"><a href="#后缀排序之倍增" class="headerlink" title="后缀排序之倍增"></a>后缀排序之倍增</h3><p>先说说后缀排序，即求sa（大概是suffix array的简称）的过程，一般后缀数组都会先求出这个数组。sa[i]表示排名为i的后缀位置，另外还求一个sa的逆数组rk（rank），rk[i]表示第i个位置的后缀排名（为方便起见，这里sa和rk以及下面提到的桶数组cnt的下标i都是从1开始标号）。一般都知道sa和rk是互逆的，但这只是说最终求完的状态，在中间结果，sa始终是将1到n（n为字符串长度）映射到1到n，rk则是将1到n映射到某个值域，满足大小的相对顺序（包括相等关系）一定满足，一般是1到可能的排名个数（下面用m表示，其实只有第一轮是其字符值）。</p><p>倍增算法（简称da，doubling algorithm）其实实现细节不一定唯一，但一般思想差不多，且都涉及基数排序（这里的基数排序其实更趋向于说是每轮一个不同的桶排序）。先进行一个初始化过程，将初始字符串先入桶（下面的cnt数组）做一个基数排序，排序依据先是其前半段rk值，然后是后半段rk值（可能没有，就被认为是最小值），这里用了一个数组pre[i]表示后半段rk值为i的位置（n-w+1到n）设为rk为1到w（即pre[1…w]为[n-w+1…n]，这应该是整个算法最绕的两个部分之一），然后再基数排序时逆序枚举pre，就能保证正确排序的情况下，相等rk的位置保持原始的相对顺序（这是整个算法最绕的第二个部分），总归用下面的做法保证了这个性质。之后更新rk，看看如果rk个数达到n个就说明已经都有序了（小于n说明还有相等的rk，需要进一步判断）。</p><h3 id="height"><a href="#height" class="headerlink" title="height"></a>height</h3><p>后缀排序只是后缀数组的一个基本操作罢了，运用这个东西还能实现更强大的功能，比如height数组。</p><p>height[i]定义为排名为i的后缀（sa[i]）与排名为i−1的后缀（sa[i-1]）的最长公共前缀长度（简称lcp，后同），height数组可以线性求，需要用到一个证明，先令H[i]为height[rk[i]] ，即位置i的后缀与它前一名的后缀的lcp。有H[i]≥H[i−1]−1，首先H[i−1]≤1时显然成立，考虑H[i−1]&gt;1，令k为位置i-1的前一名位置，即H[i−1]为位置k与位置i-1后缀的lcp，那么因为H[i−1]&gt;1，位置k+1一定正好是位置i的前一名，则H[i]即为位置k+1与位置i后缀的lcp，显然大于等于H[i−1]-1。证毕。因此求height只需依次从1到n求H即可。</p><h3 id="DC3"><a href="#DC3" class="headerlink" title="DC3"></a>DC3</h3><p>不必过度迷信DC3，倍增除了有一点点时间劣势外，常数小、空间小、编码难度低。下面是罗穗骞的集训队论文：后缀数组——处理字符串的有力工具中的实验结果（后面的应用也是参考了这篇论文，值得一看）：</p><p>N的规模 ——- 倍增（ms） ——- DC3（ms）<br>200000 ——- 192 ——- 140<br>300000 ——- 367 ——- 244<br>500000 ——- 750 ——- 499<br>1000000 ——- 1693 ——- 1248</p><p>可见N足够大时，DC3算法所快的对数级复杂度也只有不到2的常数优化效果。在对算法效率要求极致，不在乎空间<del>（且自己不那么菜）</del>时再去考虑钻研DC3吧。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题3809（后缀排序）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXN = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">int</span> n;  <span class="comment">// cover</span></span><br><span class="line"><span class="keyword">int</span> sa[MAXN + <span class="number">1</span>];  <span class="comment">// cover</span></span><br><span class="line"><span class="keyword">int</span> space1[MAXN + <span class="number">1</span>], *rk = space1;  <span class="comment">// cover</span></span><br><span class="line"><span class="keyword">int</span> space2[MAXN + <span class="number">1</span>], *pre = space2;  <span class="comment">// cover</span></span><br><span class="line"><span class="keyword">int</span> cnt[MAXN + <span class="number">1</span>];  <span class="comment">// cover</span></span><br><span class="line"><span class="keyword">int</span> height[MAXN + <span class="number">1</span>];  <span class="comment">// cover</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> M = <span class="string">'z'</span>&gt;</span><br><span class="line">struct suffix_array &#123;</span><br><span class="line">  <span class="keyword">int</span> m;</span><br><span class="line"></span><br><span class="line">  suffix_array(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s) : m(M) &#123;</span><br><span class="line">    n = s.size();</span><br><span class="line">    suffix_sort(s);</span><br><span class="line">    calc_height(s);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">radix_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">      cnt[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      cnt[rk[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">      cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">      sa[cnt[rk[pre[i]]]--] = pre[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">suffix_sort</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      rk[i] = s[i - <span class="number">1</span>];  <span class="comment">// idx from 1 to n</span></span><br><span class="line">      pre[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    radix_sort();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">1</span>; <span class="literal">true</span>; w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= w; ++i) &#123;</span><br><span class="line">        pre[++p] = n - w + i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sa[i] &gt; w) &#123;</span><br><span class="line">          pre[++p] = sa[i] - w;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      radix_sort();</span><br><span class="line">      swap(rk, pre);</span><br><span class="line">      rk[sa[<span class="number">1</span>]] = m = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        rk[sa[i]] = (pre[sa[i - <span class="number">1</span>]] == pre[sa[i]] &amp;&amp;</span><br><span class="line">          pre[sa[i - <span class="number">1</span>] + w] == pre[sa[i] + w]) ? m : ++m;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (m == n) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">calc_height</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>, i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (k) &#123;</span><br><span class="line">        --k;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>]; s[i + k - <span class="number">1</span>] == s[j + k - <span class="number">1</span>];) &#123;</span><br><span class="line">        ++k;</span><br><span class="line">      &#125;</span><br><span class="line">      height[rk[i]] = k;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3809</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="built_in">string</span> s;</span><br><span class="line">  nyuuryoku(s);</span><br><span class="line">  suffix_array&lt;&gt; sarray(s);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    shutsuryokus(sa[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  shutsuryokul();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用分析"><a href="#应用分析" class="headerlink" title="应用分析"></a>应用分析</h2><p>为方便分析起见，以下问题均考虑sa（后缀排序数组）、rank（上面的rk）以及height（如上定义）已经求出来的情况。已经知道求sa和rank需要O(NlogN)（倍增）或者O(N)（DC3）的复杂度，求height需要O(N)的复杂度。</p><h3 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h3><p>给定一个字符串，询问某两个后缀的最长公共前缀。</p><p>求两个后缀的最长公共前缀可以转化为求某个区间上的最小值。对于这个RMQ问题可以用O(NlogN)的时间先预处理，以后每次回答询问的时间为O(1)。所以对于本问题，预处理时间为O(NlogN)，每次回答询问的时间为O(1)。如果RMQ问题用O(N)的时间预处理，那么本问题预处理的时间可以做到O(N)，比如线段树，当然每次询问需要O(logn)。</p><h3 id="重复子串"><a href="#重复子串" class="headerlink" title="重复子串"></a>重复子串</h3><p>定义：字符串R在字符串L中至少出现两次，则称R是L的重复子串。</p><h4 id="可重叠最长重复子串"><a href="#可重叠最长重复子串" class="headerlink" title="可重叠最长重复子串"></a>可重叠最长重复子串</h4><p>给定一个字符串，求最长重复子串，这两个子串可以有重叠部分。</p><p>求height数组的最大值即可。 因为求最长重复子串等价于求两个后缀的最长公共前缀的最大值。因为任意两个后缀的最长公共前缀都是height数组里某一段的最小值，那么这个值一定不大于height数组里的最大值。所以最长重复子串的长度就是height数组里的最大值。时间复杂度为O(N)。</p><h4 id="不可重叠最长重复子串"><a href="#不可重叠最长重复子串" class="headerlink" title="不可重叠最长重复子串"></a>不可重叠最长重复子串</h4><p>给定一个字符串，求最长重复子串，这两个子串不可以有重叠部分。</p><p>先二分答案，把题目变成判定性问题：判断是否存在两个长度为k的子串是相同的，且不重叠。解决这个问题的关键还是利用height数组。把排序后的后缀分成若干组<strong>（这种分组思想在后缀数组中很常用）</strong>，其中每组的后缀之间的height值都不小于k。例如，字符串为“aabaaaab”，当k=2时，后缀分成了4组，有希望成为最长公共前缀不小于k的两个后缀一定在同一组。然后对于每组后缀，只须判断每个后缀的sa值的最大值和最小值之差是否不小于k。如果有一组满足，则说明存在，否则不存在。整个做法的时间复杂度为O(NlogN)。</p><h4 id="可重叠的k次最长重复子串"><a href="#可重叠的k次最长重复子串" class="headerlink" title="可重叠的k次最长重复子串"></a>可重叠的k次最长重复子串</h4><p>给定一个字符串，求至少出现k次的最长重复子串，这k个子串可以有重叠部分。</p><p>先二分答案，然后将后缀分成若干组。 这里要判断的是有没有一个组的后缀个数不小于k。如果有，那么存在k个相同的子串满足条件，否则不存在。这个做法的时间复杂度为O(NlogN)。</p><h3 id="不相同的子串的个数"><a href="#不相同的子串的个数" class="headerlink" title="不相同的子串的个数"></a>不相同的子串的个数</h3><p>给定一个字符串，求不相同的子串的个数。</p><p>每个子串一定是某个后缀的前缀，那么原问题等价于求所有后缀之间的不相同的前缀的个数。如果所有的后缀按照suffix(sa[1]), suffix(sa[2]), suffix(sa[3]), ……, suffix(sa[n])的顺序计算，不难发现，对于每一次新加进来的后缀suffix(sa[k])，它将产生 n-sa[k]+1 个新的前缀。但是其中有height[k]个是和前面的字符串的前缀是相同的。所以suffix(sa[k])将贡献出n-sa[k]+1-height[k]个不同的子串。累加后便是原问题的答案。这个做法的时间复杂度为O(N)。</p><h3 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h3><p>给定一个字符串，求最长回文子串。</p><p>穷举每一位，然后计算以这个字符为中心的最长回文子串。 注意这里要分两种情况，一是回文子串的长度为奇数，二是长度为偶数。两种情况都可以转化为求一个后缀和一个反过来写的后缀的最长公共前缀。 具体的做法是： 将整个字符串反过来写在原字符串后面，中间用一个特殊的字符隔开。 这样就把问题变为了求这个新的字符串的某两个后缀的最长公共前缀。这个做法的时间复杂度为O(NlogN)。如果RMQ问题用时间为O(N)的方法预处理，那么本题的时间复杂度可以降为O(N)。<strong>（当然有更强大的O(N)马拉车算法）</strong></p><h3 id="连续重复子串"><a href="#连续重复子串" class="headerlink" title="连续重复子串"></a>连续重复子串</h3><p>定义：如果一个字符串L是由某个字符串S重复R次而得到的， 则称L是一个连续重复串。 R是这个字符串的重复次数。</p><h4 id="重复次数最大值"><a href="#重复次数最大值" class="headerlink" title="重复次数最大值"></a>重复次数最大值</h4><p>给定一个字符串L，已知这个字符串是由某个字符串S重复R次而得到的，求R的最大值。</p><p>穷举字符串S的长度k，然后判断是否满足。判断的时候，先看字符串L的长度能否被k整除，再看suffix(1)和suffix(k+1)的最长公共前缀是否等于n-k。在询问最长公共前缀的时候，suffix(1)是固定的，所以RMQ问题没有必要做所有的预处理，只需求出height数组中的每一个数到height[rank[1]]之间的最小值即可。整个做法的时间复杂度为O(N)。</p><h4 id="重复次数最多的连续重复子串"><a href="#重复次数最多的连续重复子串" class="headerlink" title="重复次数最多的连续重复子串"></a>重复次数最多的连续重复子串</h4><p>给定一个字符串，求重复次数最多的连续重复子串。</p><p>先穷举长度L，然后求长度为L的子串最多能连续出现几次。首先连续出现1次是肯定可以的，所以这里只考虑至少2次的情况。假设在原字符串中连续出现2次，记这个子字符串为S，那么S肯定包括了字符r[0], r[L], r[L*2], r[L*3], ……中的某相邻的两个。所以只须看字符r[L*i]和r[L*(i+1)]往前和往后各能匹配到多远，记这个总长度为K，那么这里连续出现了K/L+1次。最后看最大值是多少。穷举长度L的时间是n，每次计算的时间是n/L。所以整个做法的时间复杂度是O(n/1+n/2+n/3+……+n/n)=O(NlogN)。</p><h3 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h3><p>给定两个字符串A和B，求最长公共子串。</p><p>字符串的任何一个子串都是这个字符串的某个后缀的前缀。 求A和B的最长公共子串等价于求A的后缀和B的后缀的最长公共前缀的最大值。如果枚举A和B的所有的后缀，那么这样做显然效率低下。 由于要计算A的后缀和B的后缀的最长公共前缀，所以先将第二个字符串写在第一个字符串后面，中间用一个没有出现过的字符隔开，记字符串A和字符串B的长度分别为|A|和|B|。 求新的字符串的后缀数组和height数组，然后求排名相邻但原来不在同一个字符串中的两个后缀的height值的最大值，时间也是O(|A|+|B|)，所以整个做法的时间复杂度为O(|A|+|B|)。</p><h3 id="长度不小于k的公共子串的个数"><a href="#长度不小于k的公共子串的个数" class="headerlink" title="长度不小于k的公共子串的个数"></a>长度不小于k的公共子串的个数</h3><p>给定两个字符串A和B，求长度不小于k的公共子串的个数（可以相同）。<br>样例1:<br>A=“xx” ，B=“xx” ，k=1，长度不小于k的公共子串的个数是5。<br>样例2:<br>A=“aababaa”，B=“abaabaa”，k=2，长度不小于k的公共子串的个数是22。</p><p>基本思路是计算A的所有后缀和B的所有后缀之间的最长公共前缀的长度，把最长公共前缀长度不小于k的部分全部加起来。 先将两个字符串连起来， 中间用一个没有出现过的字符隔开。按height值分组后，接下来的工作便是快速的统计每组中后缀之间的最长公共前缀之和。 扫描一遍， 每遇到一个B的后缀就统计与前面的A的后缀能产生多少个长度不小于k的公共子串，这里A的后缀需要用一个单调的栈来高效的维护。 然后对A也这样做一次。 </p><h3 id="不小于k个字符的最长子串"><a href="#不小于k个字符的最长子串" class="headerlink" title="不小于k个字符的最长子串"></a>不小于k个字符的最长子串</h3><p>给定n个字符串，求出现在不小于k个字符串中的最长子串。</p><p>将n个字符串连起来，中间用不相同的且没有出现在字符串中的字符隔开，求后缀数组。然后二分答案，用和前面同样的方法将后缀分成若干组，判断每组的后缀是否出现在不小于k个的原串中。这个做法的时间复杂度为O(NlogN)。</p><h3 id="每个字符串至少出现两次且不重叠的最长子串"><a href="#每个字符串至少出现两次且不重叠的最长子串" class="headerlink" title="每个字符串至少出现两次且不重叠的最长子串"></a>每个字符串至少出现两次且不重叠的最长子串</h3><p>给定n个字符串，求在每个字符串中至少出现两次且不重叠的最长子串。</p><p>也是先将n个字符串连起来，中间用不相同的且没有出现在字符串中的字符隔开，求后缀数组。然后二分答案，再将后缀分组。判断的时候，要看是否有一组后缀在每个原来的字符串中至少出现两次，并且在每个原来的字符串中，后缀的起始位置的最大值与最小值之差是否不小于当前答案（判断能否做到不重叠，如果题目中没有不重叠的要求，那么不用做此判断）。这个做法的时间复杂度为O(NlogN)。</p><h3 id="出现或反转后出现在每个字符串中的最长子串"><a href="#出现或反转后出现在每个字符串中的最长子串" class="headerlink" title="出现或反转后出现在每个字符串中的最长子串"></a>出现或反转后出现在每个字符串中的最长子串</h3><p>给定n个字符串，求出现或反转后出现在每个字符串中的最长子串。</p><p>只需要先将每个字符串都反过来写一遍，中间用一个互不相同的且没有出现在字符串中的字符隔开，再将n个字符串全部连起来，中间也是用一个互不相同的且没有出现在字符串中的字符隔开，求后缀数组。然后二分答案，再将后缀分组。 判断的时候，要看是否有一组后缀在每个原来的字符串或反转后的字符串中出现。这个做法的时间复杂度为O(NlogN)。</p><h2 id="洛谷2852-牛奶模式题解"><a href="#洛谷2852-牛奶模式题解" class="headerlink" title="洛谷2852 - 牛奶模式题解"></a>洛谷2852 - 牛奶模式题解</h2><p>其实就是上面的可重叠的k次最长重复子串的应用</p><p>这里先将模板略微修改，支持任意类型数组的输入（比如这题就是int数组），外加一个离散化。另外这里可以有一个优化，用优先队列维护按rank顺序的连续k-1个height的最小值，比二分答案快个log级别。（当然了，这道题下限还是O(NlogN)，毕竟即使用DC3，离散化也需要O(NlogN)）。</p><h3 id="C-代码（AC）"><a href="#C-代码（AC）" class="headerlink" title="C++代码（AC）"></a>C++代码（AC）</h3><p>这里也同样略去快读快写的部分了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXN = <span class="number">200000</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAXN + <span class="number">1</span>];  <span class="comment">// input -&gt; discretized</span></span><br><span class="line"><span class="keyword">int</span> b[MAXN + <span class="number">1</span>];  <span class="comment">// cover</span></span><br><span class="line"><span class="keyword">int</span> sa[MAXN + <span class="number">1</span>];  <span class="comment">// cover</span></span><br><span class="line"><span class="keyword">int</span> space1[MAXN + <span class="number">1</span>], *rk = space1;  <span class="comment">// cover</span></span><br><span class="line"><span class="keyword">int</span> space2[MAXN + <span class="number">1</span>], *pre = space2;  <span class="comment">// cover</span></span><br><span class="line"><span class="keyword">int</span> cnt[MAXN + <span class="number">1</span>];  <span class="comment">// cover</span></span><br><span class="line"><span class="keyword">int</span> height[MAXN + <span class="number">1</span>];  <span class="comment">// cover</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">suffix_array</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> m;</span><br><span class="line"></span><br><span class="line">  suffix_array(<span class="keyword">int</span> n) : n(n) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    discretize();</span><br><span class="line">    suffix_sort();</span><br><span class="line">    calc_height();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">discretize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      b[i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">    m = unique(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - b - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      a[i] = lower_bound(b + <span class="number">1</span>, b + m + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">radix_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">      cnt[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      cnt[rk[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">      cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">      sa[cnt[rk[pre[i]]]--] = pre[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">suffix_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      rk[i] = a[i];</span><br><span class="line">      pre[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    radix_sort();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> w = <span class="number">1</span>; <span class="literal">true</span>; w &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= w; ++i) &#123;</span><br><span class="line">        pre[++p] = n - w + i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sa[i] &gt; w) &#123;</span><br><span class="line">          pre[++p] = sa[i] - w;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      radix_sort();</span><br><span class="line">      swap(rk, pre);</span><br><span class="line">      rk[sa[<span class="number">1</span>]] = m = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        rk[sa[i]] = (pre[sa[i - <span class="number">1</span>]] == pre[sa[i]] &amp;&amp;</span><br><span class="line">          pre[sa[i - <span class="number">1</span>] + w] == pre[sa[i] + w]) ? m : ++m;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (m == n) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">calc_height</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>, i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (k) &#123;</span><br><span class="line">        --k;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>]; a[i + k] == a[j + k];) &#123;</span><br><span class="line">        ++k;</span><br><span class="line">      &#125;</span><br><span class="line">      height[rk[i]] = k;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">lcp_over_k_times</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;  <span class="comment">// len: k - 1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      <span class="keyword">while</span> (!q.empty() &amp;&amp; q.front() &lt;= i - k + <span class="number">1</span>) &#123;</span><br><span class="line">        q.pop_front();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> (!q.empty() &amp;&amp; height[q.back()] &gt;= height[i]) &#123;</span><br><span class="line">        q.pop_back();</span><br><span class="line">      &#125;</span><br><span class="line">      q.push_back(i);</span><br><span class="line">      <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) &#123;</span><br><span class="line">        res = max(res, height[q.front()]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2852</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="keyword">int</span> n, k;</span><br><span class="line">  nyuuryoku(n, k);</span><br><span class="line">  <span class="function">suffix_array <span class="title">sarray</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    nyuuryoku(a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  sarray.work();</span><br><span class="line">  shutsuryokul(sarray.lcp_over_k_times(k));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;这东西每次看都能把自己绕晕。这里主要说倍增算法（O(NlogN)）。DC3算法（O(N)）常数比较大且编码难度大，此处略去&lt;del&gt;（当然也是因为本人太菜了根本学不动）&lt;/del&gt;。&lt;/p&gt;
&lt;h3 id=&quot;后缀排序之倍增&quot;&gt;&lt;a href=&quot;#后缀排序之倍增&quot; class=&quot;headerlink&quot; title=&quot;后缀排序之倍增&quot;&gt;&lt;/a&gt;后缀排序之倍增&lt;/h3&gt;&lt;p&gt;先说说后缀排序，即求sa（大概是suffix array的简称）的过程，一般后缀数组都会先求出这个数组。sa[i]表示排名为i的后缀位置，另外还求一个sa的逆数组rk（rank），rk[i]表示第i个位置的后缀排名（为方便起见，这里sa和rk以及下面提到的桶数组cnt的下标i都是从1开始标号）。一般都知道sa和rk是互逆的，但这只是说最终求完的状态，在中间结果，sa始终是将1到n（n为字符串长度）映射到1到n，rk则是将1到n映射到某个值域，满足大小的相对顺序（包括相等关系）一定满足，一般是1到可能的排名个数（下面用m表示，其实只有第一轮是其字符值）。&lt;/p&gt;
&lt;p&gt;倍增算法（简称da，doubling algorithm）其实实现细节不一定唯一，但一般思想差不多，且都涉及基数排序（这里的基数排序其实更趋向于说是每轮一个不同的桶排序）。先进行一个初始化过程，将初始字符串先入桶（下面的cnt数组）做一个基数排序，排序依据先是其前半段rk值，然后是后半段rk值（可能没有，就被认为是最小值），这里用了一个数组pre[i]表示后半段rk值为i的位置（n-w+1到n）设为rk为1到w（即pre[1…w]为[n-w+1…n]，这应该是整个算法最绕的两个部分之一），然后再基数排序时逆序枚举pre，就能保证正确排序的情况下，相等rk的位置保持原始的相对顺序（这是整个算法最绕的第二个部分），总归用下面的做法保证了这个性质。之后更新rk，看看如果rk个数达到n个就说明已经都有序了（小于n说明还有相等的rk，需要进一步判断）。&lt;/p&gt;
&lt;h3 id=&quot;height&quot;&gt;&lt;a href=&quot;#height&quot; class=&quot;headerlink&quot; title=&quot;height&quot;&gt;&lt;/a&gt;height&lt;/h3&gt;&lt;p&gt;后缀排序只是后缀数组的一个基本操作罢了，运用这个东西还能实现更强大的功能，比如height数组。&lt;/p&gt;
&lt;p&gt;height[i]定义为排名为i的后缀（sa[i]）与排名为i−1的后缀（sa[i-1]）的最长公共前缀长度（简称lcp，后同），height数组可以线性求，需要用到一个证明，先令H[i]为height[rk[i]] ，即位置i的后缀与它前一名的后缀的lcp。有H[i]≥H[i−1]−1，首先H[i−1]≤1时显然成立，考虑H[i−1]&amp;gt;1，令k为位置i-1的前一名位置，即H[i−1]为位置k与位置i-1后缀的lcp，那么因为H[i−1]&amp;gt;1，位置k+1一定正好是位置i的前一名，则H[i]即为位置k+1与位置i后缀的lcp，显然大于等于H[i−1]-1。证毕。因此求height只需依次从1到n求H即可。&lt;/p&gt;
&lt;h3 id=&quot;DC3&quot;&gt;&lt;a href=&quot;#DC3&quot; class=&quot;headerlink&quot; title=&quot;DC3&quot;&gt;&lt;/a&gt;DC3&lt;/h3&gt;&lt;p&gt;不必过度迷信DC3，倍增除了有一点点时间劣势外，常数小、空间小、编码难度低。下面是罗穗骞的集训队论文：后缀数组——处理字符串的有力工具中的实验结果（后面的应用也是参考了这篇论文，值得一看）：&lt;/p&gt;
&lt;p&gt;N的规模 ——- 倍增（ms） ——- DC3（ms）&lt;br&gt;200000 ——- 192 ——- 140&lt;br&gt;300000 ——- 367 ——- 244&lt;br&gt;500000 ——- 750 ——- 499&lt;br&gt;1000000 ——- 1693 ——- 1248&lt;/p&gt;
&lt;p&gt;可见N足够大时，DC3算法所快的对数级复杂度也只有不到2的常数优化效果。在对算法效率要求极致，不在乎空间&lt;del&gt;（且自己不那么菜）&lt;/del&gt;时再去考虑钻研DC3吧。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="后缀数组" scheme="http://tashi711.top/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>「可持久化数据结构」思考</title>
    <link href="http://tashi711.top/programming/dsaa/persistable-tree/"/>
    <id>http://tashi711.top/programming/dsaa/persistable-tree/</id>
    <published>2019-06-20T03:15:34.000Z</published>
    <updated>2019-06-20T13:11:39.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>按目前本人的理解，可持久化（数组/线段树/平衡树），也叫主席树，是指一类通过重用结点达到实现多个版本的类线段树数据结构。</p><p>之前写的主席树模板其实就是它的一个应用（静态询问区间第k小），这里给出它的通用模板，即满足以下两个操作：1、修改某个版本的某个结点信息（包含其从根到叶节点路径上所有节点）；2、查询某版本某结点信息。（当然静态询问区间第k小不完全是这两种操作，但基本可以看做这两种操作的简单变形）。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题3919（可持久化数组）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXN = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXLOG = <span class="number">24</span>;  <span class="comment">// more than (log(MAXN) + 4)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> pl, pr;</span><br><span class="line">  <span class="keyword">int</span> val;</span><br><span class="line">&#125; tree[MAXN * MAXLOG];  <span class="comment">// cover</span></span><br><span class="line"><span class="keyword">int</span> tcnt;  <span class="comment">// init 0</span></span><br><span class="line"><span class="keyword">int</span> a[MAXN + <span class="number">1</span>];  <span class="comment">// input</span></span><br><span class="line"><span class="keyword">int</span> root[MAXN + <span class="number">1</span>];  <span class="comment">// cover</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">persistable_tree</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line">  persistable_tree(<span class="keyword">int</span> n) : n(n) &#123;</span><br><span class="line">    tcnt = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    root[<span class="number">0</span>] = build(<span class="number">1</span>, n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = tcnt++;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">      <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">      tree[p].pl = build(l, mid);</span><br><span class="line">      tree[p].pr = build(mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tree[p].val = a[l];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> pos, T k, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = tcnt++;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">      <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (pos &lt;= mid) &#123;</span><br><span class="line">        tree[p].pl = update(tree[pre].pl, pos, k, l, mid);</span><br><span class="line">        tree[p].pr = tree[pre].pr;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tree[p].pl = tree[pre].pl;</span><br><span class="line">        tree[p].pr = update(tree[pre].pr, pos, k, mid + <span class="number">1</span>, r);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tree[p].val = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">update_ver</span><span class="params">(<span class="keyword">int</span> cur_ver, <span class="keyword">int</span> pre_ver, <span class="keyword">int</span> pos, T k)</span> </span>&#123;</span><br><span class="line">    root[cur_ver] = update(root[pre_ver], pos, k, <span class="number">1</span>, n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">query</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">      <span class="keyword">return</span> tree[p].val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt;= mid) &#123;</span><br><span class="line">      <span class="keyword">return</span> query(tree[p].pl, pos, l, mid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> query(tree[p].pr, pos, mid + <span class="number">1</span>, r);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">query_ver</span><span class="params">(<span class="keyword">int</span> cur_ver, <span class="keyword">int</span> pre_ver, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> query(root[cur_ver] = root[pre_ver], pos, <span class="number">1</span>, n);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3919</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  nyuuryoku(n, m);</span><br><span class="line">  persistable_tree&lt;<span class="keyword">int</span>&gt; pt(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    nyuuryoku(a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  pt.init();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> ver, q, p, k, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    nyuuryoku(ver, q, p);</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="number">1</span>) &#123;</span><br><span class="line">      nyuuryoku(k);</span><br><span class="line">      pt.update_ver(i, ver, p, k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      shutsuryokul(pt.query_ver(i, ver, p));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;按目前本人的理解，可持久化（数组/线段树/平衡树），也叫主席树，是指一类通过重用结点达到实现多个版本的类线段树数据结构。&lt;/p&gt;
&lt;p&gt;之前写的主席树模板其实就是它的一个应用（静态询问区间第k小），这里给出它的通用模板，即满足以下两个操作：1、修改某个版本的某个结点信息（包含其从根到叶节点路径上所有节点）；2、查询某版本某结点信息。（当然静态询问区间第k小不完全是这两种操作，但基本可以看做这两种操作的简单变形）。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="主席树" scheme="http://tashi711.top/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
      <category term="可持久化" scheme="http://tashi711.top/tags/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>「主席树」模板</title>
    <link href="http://tashi711.top/programming/dsaa/chairman-tree/"/>
    <id>http://tashi711.top/programming/dsaa/chairman-tree/</id>
    <published>2019-06-18T03:15:34.000Z</published>
    <updated>2019-06-20T13:04:21.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>其实也是第一次听说，连英文也不知道怎么翻译。<br>功能：静态查询任意区间第k小值。<br>做法：各个博客都有，比较简洁，带有线段树思想。<br>时间：（单次询问）当然是log。<br>空间：第一颗树（位置0）新建，需要4N个结点，之后只需要重用这棵树（准确说是修改前一颗树），每次只需要修改logN级别的结点。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题3834（主席树）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXN = <span class="number">200000</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXLOG = <span class="number">24</span>;  <span class="comment">// more than (log(MAXN) + 4)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> pl, pr;</span><br><span class="line">  <span class="keyword">int</span> cnt;</span><br><span class="line">&#125; tree[MAXN * MAXLOG];  <span class="comment">// cover</span></span><br><span class="line"><span class="keyword">int</span> tcnt;  <span class="comment">// init 0</span></span><br><span class="line"><span class="keyword">int</span> a[MAXN + <span class="number">1</span>];  <span class="comment">// input</span></span><br><span class="line"><span class="keyword">int</span> b[MAXN + <span class="number">1</span>];  <span class="comment">// cover</span></span><br><span class="line"><span class="keyword">int</span> root[MAXN + <span class="number">1</span>];  <span class="comment">// cover</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chairman_tree</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line">  chairman_tree(<span class="keyword">int</span> n) : n(n) &#123;</span><br><span class="line">    tcnt = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      b[i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">    tot = unique(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - b - <span class="number">1</span>;</span><br><span class="line">    root[<span class="number">0</span>] = build(<span class="number">1</span>, tot);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> p = lower_bound(b + <span class="number">1</span>, b + tot + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">      root[i] = update(root[i - <span class="number">1</span>], <span class="number">1</span>, tot, p);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = tcnt++;</span><br><span class="line">    tree[p].cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">      <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">      tree[p].pl = build(l, mid);</span><br><span class="line">      tree[p].pr = build(mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = tcnt++;</span><br><span class="line">    tree[p].cnt = tree[pre].cnt + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">      <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">        tree[p].pl = update(tree[pre].pl, l, mid, x);</span><br><span class="line">        tree[p].pr = tree[pre].pr;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tree[p].pl = tree[pre].pl;</span><br><span class="line">        tree[p].pr = update(tree[pre].pr, mid + <span class="number">1</span>, r, x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">query_idx</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) &#123;</span><br><span class="line">      <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> lcnt = tree[tree[v].pl].cnt - tree[tree[u].pl].cnt;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (lcnt &gt;= k) &#123;</span><br><span class="line">      <span class="keyword">return</span> query_idx(tree[u].pl, tree[v].pl, l, mid, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> query_idx(tree[u].pr, tree[v].pr, mid + <span class="number">1</span>, r, k - lcnt);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b[query_idx(root[u - <span class="number">1</span>], root[v], <span class="number">1</span>, tot, k)];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3834</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  nyuuryoku(n, m);</span><br><span class="line">  <span class="function">chairman_tree <span class="title">ct</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    nyuuryoku(a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  ct.init();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> u, v, k, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    nyuuryoku(u, v, k);</span><br><span class="line">    shutsuryokul(ct.query(u, v, k));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;其实也是第一次听说，连英文也不知道怎么翻译。&lt;br&gt;功能：静态查询任意区间第k小值。&lt;br&gt;做法：各个博客都有，比较简洁，带有线段树思想。&lt;br&gt;时间：（单次询问）当然是log。&lt;br&gt;空间：第一颗树（位置0）新建，需要4N个结点，之后只需要重用这棵树（准确说是修改前一颗树），每次只需要修改logN级别的结点。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="主席树" scheme="http://tashi711.top/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>「费用流」模板</title>
    <link href="http://tashi711.top/programming/dsaa/cost-flow/"/>
    <id>http://tashi711.top/programming/dsaa/cost-flow/</id>
    <published>2019-06-17T03:15:34.000Z</published>
    <updated>2019-06-17T15:16:33.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>费用流，一般指最小费用最大流，通常解法为SPFA找到（残余网络中）cost最短路增广。<br>本文代码基于SPFA实现，当然，这不是个很鲁棒的算法，表现为以下两点：<br>1、SPFA会有被卡数据的危险，可以考虑用dijkstra（注意负权）。<br>2、有一种更优的基于标记的算法（竞赛中貌似叫做SSAP）。<br>可以针对这两点写出更好的代码。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题3381（最小费用最大流）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXN = <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXM = <span class="number">50000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> v;</span><br><span class="line">  <span class="keyword">int</span> w;  <span class="comment">// T capacity</span></span><br><span class="line">  <span class="keyword">int</span> c;  <span class="comment">// C cost</span></span><br><span class="line">  <span class="keyword">int</span> tsugi;</span><br><span class="line">&#125; e[MAXM &lt;&lt; <span class="number">1</span>];  <span class="comment">// cover</span></span><br><span class="line"><span class="keyword">int</span> ecnt;  <span class="comment">// init 0</span></span><br><span class="line"><span class="keyword">int</span> adj[MAXN + <span class="number">1</span>];  <span class="comment">// init -1</span></span><br><span class="line"><span class="keyword">int</span> dist[MAXN + <span class="number">1</span>];  <span class="comment">// C cover init</span></span><br><span class="line"><span class="keyword">bool</span> inq[MAXN + <span class="number">1</span>];  <span class="comment">// auto 0</span></span><br><span class="line"><span class="keyword">int</span> fa[MAXN + <span class="number">1</span>];  <span class="comment">// cover</span></span><br><span class="line"><span class="keyword">int</span> fa_e[MAXN + <span class="number">1</span>];  <span class="comment">// cover</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> C&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cost_flow</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MINUS_ONE_UC = <span class="number">0xFF</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> INF_UC = <span class="number">0x7F</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> INT_SIZE = <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> s, t;</span><br><span class="line"></span><br><span class="line">  cost_flow(<span class="keyword">int</span> n, <span class="keyword">int</span> s, <span class="keyword">int</span> t) : n(n), s(s), t(t) &#123;</span><br><span class="line">    ecnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(adj + <span class="number">1</span>, MINUS_ONE_UC, INT_SIZE * n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_single_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T w, C c)</span> </span>&#123;</span><br><span class="line">    e[ecnt].v = v;</span><br><span class="line">    e[ecnt].w = w;</span><br><span class="line">    e[ecnt].c = c;</span><br><span class="line">    e[ecnt].tsugi = adj[u];</span><br><span class="line">    adj[u] = ecnt++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_directed_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T w, C c)</span> </span>&#123;</span><br><span class="line">    add_single_edge(u, v, w, c);</span><br><span class="line">    add_single_edge(v, u, <span class="number">0</span>, -c);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">update_flow</span><span class="params">(<span class="keyword">int</span> idx, T flow)</span> </span>&#123;</span><br><span class="line">    e[idx].w -= flow;</span><br><span class="line">    e[idx ^ <span class="number">1</span>].w += flow;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist + <span class="number">1</span>, INF_UC, INT_SIZE * n);</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    inq[s] = <span class="literal">true</span>;</span><br><span class="line">    dist[s] = <span class="number">0</span>;</span><br><span class="line">    fa[t] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">      <span class="keyword">int</span> u = q.front();</span><br><span class="line">      q.pop();</span><br><span class="line">      inq[u] = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = adj[u]; ~i; i = e[i].tsugi) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        T w = e[i].w;</span><br><span class="line">        C c = e[i].c;</span><br><span class="line">        <span class="keyword">if</span> (w &amp;&amp; dist[v] &gt; dist[u] + c) &#123;</span><br><span class="line">          dist[v] = dist[u] + c;</span><br><span class="line">          fa[v] = u;</span><br><span class="line">          fa_e[v] = i;</span><br><span class="line">          <span class="keyword">if</span> (!inq[v]) &#123;</span><br><span class="line">            q.push(v);</span><br><span class="line">            inq[v] = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[t] != <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pair&lt;T, C&gt; mcmf() &#123;</span><br><span class="line">    T max_flow = <span class="number">0</span>;</span><br><span class="line">    C min_cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (spfa()) &#123;</span><br><span class="line">      <span class="keyword">int</span> cur = t;</span><br><span class="line">      T neck = e[fa_e[t]].w;</span><br><span class="line">      <span class="keyword">while</span> ((cur = fa[cur]) != s) &#123;</span><br><span class="line">        neck = min(neck, e[fa_e[cur]].w);</span><br><span class="line">      &#125;</span><br><span class="line">      max_flow += neck;</span><br><span class="line">      min_cost += neck * dist[t];</span><br><span class="line">      cur = t;</span><br><span class="line">      <span class="keyword">while</span> (cur != s) &#123;</span><br><span class="line">        update_flow(fa_e[cur], neck);</span><br><span class="line">        cur = fa[cur];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;max_flow, min_cost&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3381</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="keyword">int</span> n, m, s, t;</span><br><span class="line">  nyuuryoku(n, m, s, t);</span><br><span class="line">  cost_flow&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; cf(n, s, t);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> u, v, w, c, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    nyuuryoku(u, v, w, c);</span><br><span class="line">    cf.add_directed_edge(u, v, w, c);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">auto</span> ans = cf.mcmf();</span><br><span class="line">  shutsuryokul(ans.first, ans.second);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;费用流，一般指最小费用最大流，通常解法为SPFA找到（残余网络中）cost最短路增广。&lt;br&gt;本文代码基于SPFA实现，当然，这不是个很鲁棒的算法，表现为以下两点：&lt;br&gt;1、SPFA会有被卡数据的危险，可以考虑用dijkstra（注意负权）。&lt;br&gt;2、有一种更优的基于标记的算法（竞赛中貌似叫做SSAP）。&lt;br&gt;可以针对这两点写出更好的代码。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="费用流" scheme="http://tashi711.top/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
      <category term="SPFA" scheme="http://tashi711.top/tags/SPFA/"/>
    
  </entry>
  
  <entry>
    <title>「左偏堆」模板</title>
    <link href="http://tashi711.top/programming/dsaa/leftist-heap/"/>
    <id>http://tashi711.top/programming/dsaa/leftist-heap/</id>
    <published>2019-06-16T03:15:34.000Z</published>
    <updated>2019-06-16T04:43:25.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>左偏堆（左偏树），比一般堆多一个在对数时间类合并堆的操作。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题3377（左偏树）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXN = <span class="number">100000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> l, r;  <span class="comment">// init 0</span></span><br><span class="line">  <span class="keyword">int</span> val;  <span class="comment">// cover</span></span><br><span class="line">  <span class="keyword">int</span> npl;  <span class="comment">// init 0, npl(0) = -1</span></span><br><span class="line">  <span class="keyword">int</span> root;  <span class="comment">// cover</span></span><br><span class="line">&#125; h[MAXN + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">leftist_heap</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> DELETED = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  leftist_heap(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    h[<span class="number">0</span>].npl = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      h[i].root = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!u || !v) &#123;</span><br><span class="line">      <span class="keyword">return</span> u + v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// (h[u].val == h[v].val &amp;&amp; u &gt; v) is problem-required, not necessary</span></span><br><span class="line">    <span class="keyword">if</span> (h[u].val &gt; h[v].val || (h[u].val == h[v].val &amp;&amp; u &gt; v)) &#123;</span><br><span class="line">      swap(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    h[u].r = merge(h[u].r, v);</span><br><span class="line">    h[h[u].r].root = u;</span><br><span class="line">    <span class="keyword">if</span> (h[h[u].l].npl &lt; h[h[u].r].npl) &#123;</span><br><span class="line">      swap(h[u].l, h[u].r);</span><br><span class="line">    &#125;</span><br><span class="line">    h[u].npl = h[h[u].r].npl + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    h[p].val = DELETED;</span><br><span class="line">    h[h[p].l].root = h[p].l;</span><br><span class="line">    h[h[p].r].root = h[p].r;</span><br><span class="line">    h[p].root = merge(h[p].l, h[p].r);  <span class="comment">// this is important</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[p].root == p ? p : h[p].root = get_root(h[p].root);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3377</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  nyuuryoku(n, m);</span><br><span class="line">  <span class="function">leftist_heap <span class="title">lh</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    nyuuryoku(h[i].val);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> q, u, v, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    nyuuryoku(q);</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="number">1</span>) &#123;</span><br><span class="line">      nyuuryoku(u, v);</span><br><span class="line">      <span class="keyword">if</span> (h[u].val == lh.DELETED || h[v].val == lh.DELETED) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> ru = lh.get_root(u), rv = lh.get_root(v);</span><br><span class="line">      <span class="keyword">if</span> (ru != rv) &#123;</span><br><span class="line">        lh.merge(ru, rv);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      nyuuryoku(u);</span><br><span class="line">      <span class="keyword">if</span> (h[u].val == lh.DELETED) &#123;</span><br><span class="line">        shutsuryokul(<span class="number">-1</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> r = lh.get_root(u);</span><br><span class="line">        shutsuryokul(h[r].val);</span><br><span class="line">        lh.pop(r);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;左偏堆（左偏树），比一般堆多一个在对数时间类合并堆的操作。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="左偏堆" scheme="http://tashi711.top/tags/%E5%B7%A6%E5%81%8F%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>「平面凸包」再探</title>
    <link href="http://tashi711.top/programming/dsaa/graham-redo/"/>
    <id>http://tashi711.top/programming/dsaa/graham-redo/</id>
    <published>2019-06-15T03:15:34.000Z</published>
    <updated>2019-06-15T10:35:31.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>再次探索平面凸包（Graham扫描法）以及完善代码，本次改动主要有：<br>1、添加了double的快读快写，整理出快读快写的最终版本。<br>2、保留了上次比较有代表性的两个test，添加求周长，保留了是否做留下边上点的判断（虽然与周长无关）。<br>3、全局分配空间，结果依旧用vector保存，但提前reserve(n)，保证不受重分配效率影响。<br>4、改编graham的结构，不去修改循环变量。</p><p>注：平面凸包有个可能更快的方法，即按照位置排序扫两遍（可以不用做atan），不过在需要做边上点的判断时还是只能按角度方向排序。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题2742（二维凸包），因添加了double的快读快写，此处保留。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> tashi711 &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">auto</span> neg = <span class="number">0</span>, k = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    neg |= k == <span class="string">'-'</span>;</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (k ^ <span class="number">0x30</span>);</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// not numeric_limits&lt;T&gt;::min()</span></span><br><span class="line">  <span class="keyword">if</span> (neg) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(<span class="keyword">double</span>&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">auto</span> neg = <span class="number">0</span>, k = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(k) &amp;&amp; k != <span class="string">'.'</span>) &#123;</span><br><span class="line">    neg |= k == <span class="string">'-'</span>;</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    x = x * <span class="number">10.0</span> + (k ^ <span class="number">0x30</span>);</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (k == <span class="string">'.'</span>) &#123;</span><br><span class="line">    k = getchar();</span><br><span class="line">    <span class="keyword">auto</span> y = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">      x += (k ^ <span class="number">0x30</span>) * (y /= <span class="number">10.0</span>);</span><br><span class="line">      k = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (neg) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(T&amp; x, Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  nyuuryoku(x);</span><br><span class="line">  nyuuryoku(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> LEN = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">array</span>&lt;<span class="keyword">int</span>, LEN&gt; buf;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">auto</span> p = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// not numeric_limits&lt;T&gt;::min()</span></span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    buf[p++] = x % <span class="number">10</span> | <span class="number">0x30</span>;</span><br><span class="line">    x /= <span class="number">10</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (x);</span><br><span class="line">  <span class="keyword">while</span> (p) &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(buf[--p]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">double</span>, <span class="keyword">char</span>&gt;&amp; p)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> format[] = <span class="string">"%.?lf"</span>;</span><br><span class="line">  format[<span class="number">2</span>] = p.second;</span><br><span class="line">  <span class="built_in">printf</span>(format, p.first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokus</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(x);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s = <span class="string">""</span>)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  shutsuryokul(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(x);</span><br><span class="line">  shutsuryokul();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  shutsuryokus(x);</span><br><span class="line">  shutsuryokul(args...);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXN = <span class="number">10000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DOUBLE_TYPE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DOUBLE_TYPE</span></span><br><span class="line">  <span class="keyword">double</span> x;</span><br><span class="line">  <span class="keyword">double</span> y;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  <span class="keyword">int</span> y;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125; points[MAXN + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">convex_hull</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> EPS = <span class="number">1e-9</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> BOTTOM_LEFT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; idx;</span><br><span class="line"></span><br><span class="line">  convex_hull(<span class="keyword">int</span> n) : n(n) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">cross</span><span class="params">(<span class="keyword">const</span> point&amp; a, <span class="keyword">const</span> point&amp; b, <span class="keyword">const</span> point&amp; c)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    T ux = b.x - a.x;</span><br><span class="line">    T uy = b.y - a.y;</span><br><span class="line">    T vx = c.x - b.x;</span><br><span class="line">    T vy = c.y - b.y;</span><br><span class="line">    <span class="keyword">return</span> ux * vy - uy * vx;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">equal_to_zero</span><span class="params">(<span class="keyword">int</span> k)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">equal_to_zero</span><span class="params">(<span class="keyword">double</span> k)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(k) &lt; EPS;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">greater_than_zero</span><span class="params">(<span class="keyword">int</span> k)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k &gt; <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">greater_than_zero</span><span class="params">(<span class="keyword">double</span> k)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k &gt;= EPS;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">graham_scan</span><span class="params">(<span class="keyword">bool</span> get_points_on_lines = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">    idx.clear();</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">      idx.push_back(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> p_min = min_element(points + <span class="number">1</span>, points + n + <span class="number">1</span>,</span><br><span class="line">      [](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; u, <span class="keyword">const</span> <span class="keyword">auto</span>&amp; v) &#123;</span><br><span class="line">      <span class="keyword">if</span> (u.y != v.y) &#123;</span><br><span class="line">        <span class="keyword">return</span> u.y &lt; v.y;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> u.x &lt; v.x;</span><br><span class="line">    &#125;);</span><br><span class="line">    swap(*p_min, points[BOTTOM_LEFT]);</span><br><span class="line">    <span class="keyword">auto</span> dist = [](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; u, <span class="keyword">const</span> <span class="keyword">auto</span>&amp; v) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">abs</span>(v.x - u.x) + <span class="built_in">abs</span>(v.y - u.y);</span><br><span class="line">    &#125;;</span><br><span class="line">    sort(points + <span class="number">2</span>, points + n + <span class="number">1</span>,</span><br><span class="line">      [&amp;dist](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; u, <span class="keyword">const</span> <span class="keyword">auto</span>&amp; v) &#123;</span><br><span class="line">      <span class="keyword">double</span> theta_u = <span class="built_in">atan2</span>(u.y - points[BOTTOM_LEFT].y, u.x - points[BOTTOM_LEFT].x);</span><br><span class="line">      <span class="keyword">double</span> theta_v = <span class="built_in">atan2</span>(v.y - points[BOTTOM_LEFT].y, v.x - points[BOTTOM_LEFT].x);</span><br><span class="line">      <span class="keyword">if</span> (theta_u == theta_v) &#123;</span><br><span class="line">        <span class="keyword">return</span> dist(u, points[BOTTOM_LEFT]) &lt; dist(v, points[BOTTOM_LEFT]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> theta_u &lt; theta_v;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (get_points_on_lines) &#123;</span><br><span class="line">      <span class="keyword">int</span> pos = n + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i; --i) &#123;</span><br><span class="line">        T direction = cross(points[BOTTOM_LEFT], points[n], points[i]);</span><br><span class="line">        <span class="keyword">if</span> (!equal_to_zero(direction)) &#123;</span><br><span class="line">          pos = i + <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      reverse(points + pos, points + n + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    idx.reserve(n);</span><br><span class="line">    idx.push_back(<span class="number">1</span>);</span><br><span class="line">    idx.push_back(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      <span class="keyword">while</span> (idx.size() &gt; <span class="number">1u</span>) &#123;</span><br><span class="line">        T direction = cross(points[*next(idx.rbegin())], points[*idx.rbegin()], points[i]);</span><br><span class="line">        <span class="keyword">if</span> (greater_than_zero(direction) ||</span><br><span class="line">          (get_points_on_lines &amp;&amp; equal_to_zero(direction))) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        idx.pop_back();</span><br><span class="line">      &#125;</span><br><span class="line">      idx.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> idx.size();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">double</span> <span class="title">perimeter</span><span class="params">(<span class="keyword">bool</span> get_points_on_lines = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tot = graham_scan(get_points_on_lines);</span><br><span class="line">    <span class="keyword">if</span> (tot &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> dist = [](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; u, <span class="keyword">const</span> <span class="keyword">auto</span>&amp; v) &#123;</span><br><span class="line">      <span class="keyword">return</span> hypot(v.x - u.x, v.y - u.y);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">double</span> res = dist(points[idx[<span class="number">0</span>]], points[idx[tot - <span class="number">1</span>]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">      res += dist(points[idx[i]], points[idx[i + <span class="number">1</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">output_convex_hull_points</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"------- Total "</span> &lt;&lt; idx.size() &lt;&lt; <span class="string">" point(s):"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> p : idx) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; points[p].x &lt;&lt; <span class="string">", "</span> &lt;&lt; points[p].y &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// just for test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DOUBLE_TYPE</span></span><br><span class="line">  convex_hull&lt;<span class="keyword">double</span>&gt; hull_double(<span class="number">8</span>);</span><br><span class="line">  points[<span class="number">1</span>] = &#123;<span class="number">0.0</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">  points[<span class="number">2</span>] = &#123;<span class="number">1.3</span>, <span class="number">1.3</span>&#125;;</span><br><span class="line">  points[<span class="number">3</span>] = &#123;<span class="number">3.0</span>, <span class="number">3.0</span>&#125;;</span><br><span class="line">  points[<span class="number">4</span>] = &#123;<span class="number">1.5</span>, <span class="number">4.5</span>&#125;;</span><br><span class="line">  points[<span class="number">5</span>] = &#123;<span class="number">0.0</span>, <span class="number">6.0</span>&#125;;</span><br><span class="line">  points[<span class="number">6</span>] = &#123;<span class="number">-0.01</span>, <span class="number">5.99</span>&#125;;</span><br><span class="line">  points[<span class="number">7</span>] = &#123;<span class="number">-3.0</span>, <span class="number">3.0</span>&#125;;</span><br><span class="line">  points[<span class="number">8</span>] = &#123;<span class="number">-2.12345</span>, <span class="number">2.12345</span>&#125;;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; hull_double.perimeter() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  hull_double.output_convex_hull_points();  <span class="comment">// 4 points</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; hull_double.perimeter(<span class="literal">true</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  hull_double.output_convex_hull_points(); <span class="comment">// 8 points</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  convex_hull&lt;<span class="keyword">int</span>&gt; hull_int(<span class="number">4</span>);</span><br><span class="line">  points[<span class="number">1</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">  points[<span class="number">2</span>] = &#123;<span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">  points[<span class="number">3</span>] = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">  points[<span class="number">4</span>] = &#123;<span class="number">100</span>, <span class="number">101</span>&#125;;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; hull_int.perimeter() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  hull_int.output_convex_hull_points();</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; hull_int.perimeter(<span class="literal">true</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  hull_int.output_convex_hull_points();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2742</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  nyuuryoku(n);</span><br><span class="line">  convex_hull&lt;<span class="keyword">double</span>&gt; ch(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    nyuuryoku(points[i].x, points[i].y);</span><br><span class="line">  &#125;</span><br><span class="line">  shutsuryokul(make_pair(ch.perimeter(), <span class="string">'2'</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;再次探索平面凸包（Graham扫描法）以及完善代码，本次改动主要有：&lt;br&gt;1、添加了double的快读快写，整理出快读快写的最终版本。&lt;br&gt;2、保留了上次比较有代表性的两个test，添加求周长，保留了是否做留下边上点的判断（虽然与周长无关）。&lt;br&gt;3、全局分配空间，结果依旧用vector保存，但提前reserve(n)，保证不受重分配效率影响。&lt;br&gt;4、改编graham的结构，不去修改循环变量。&lt;/p&gt;
&lt;p&gt;注：平面凸包有个可能更快的方法，即按照位置排序扫两遍（可以不用做atan），不过在需要做边上点的判断时还是只能按角度方向排序。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="凸包" scheme="http://tashi711.top/tags/%E5%87%B8%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>「AC自动机」摸索</title>
    <link href="http://tashi711.top/programming/dsaa/ac-automaton/"/>
    <id>http://tashi711.top/programming/dsaa/ac-automaton/</id>
    <published>2019-06-14T03:15:34.000Z</published>
    <updated>2019-06-12T16:57:18.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>洛谷模板题3808、3796 - AC自动机。</p><p>这东西竞赛搞完后就再也没碰过了，其实竞赛也没碰过几次。<br>一般的说法AC自动机是在trie上做kmp，但其实个人感觉只能说是跟kmp思想比较接近，但原理还是稍有些不同。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可分别过洛谷模板题（3808、3796），公用的快读快写方法略去（具体见以往文章，之后的文章同略去）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXL = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXC = <span class="number">26</span>;  <span class="comment">// should be adjusted if char set changes</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> tsugi[MAXC];</span><br><span class="line">  <span class="keyword">int</span> end_cnt;</span><br><span class="line">  <span class="keyword">int</span> fail;</span><br><span class="line">&#125; tree[MAXL];  <span class="comment">// init 0 (first default)</span></span><br><span class="line"><span class="keyword">int</span> ncnt;  <span class="comment">// init 0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ac_automaton</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> TRIE_ROOT = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> VISITED_COUNT = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  ac_automaton() &#123;</span><br><span class="line">    ncnt = TRIE_ROOT;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">build_trie</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.size();</span><br><span class="line">    <span class="keyword">int</span> cur = TRIE_ROOT;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">int</span> idx = s[i] - <span class="string">'a'</span>;  <span class="comment">// should be adjusted if char set changes</span></span><br><span class="line">      <span class="keyword">if</span> (!tree[cur].tsugi[idx]) &#123;</span><br><span class="line">        tree[cur].tsugi[idx] = ++ncnt;</span><br><span class="line">      &#125;</span><br><span class="line">      cur = tree[cur].tsugi[idx];</span><br><span class="line">    &#125;</span><br><span class="line">    ++tree[cur].end_cnt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">build_fail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tree[TRIE_ROOT].tsugi[i]) &#123;</span><br><span class="line">        tree[tree[TRIE_ROOT].tsugi[i]].fail = TRIE_ROOT;</span><br><span class="line">        q.push(tree[TRIE_ROOT].tsugi[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">      <span class="keyword">int</span> u = q.front();</span><br><span class="line">      q.pop();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[u].tsugi[i]) &#123;</span><br><span class="line">          tree[tree[u].tsugi[i]].fail = tree[tree[u].fail].tsugi[i];</span><br><span class="line">          q.push(tree[u].tsugi[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          tree[u].tsugi[i] = tree[tree[u].fail].tsugi[i];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = s.size();</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">int</span> idx = s[i] - <span class="string">'a'</span>;  <span class="comment">// should be adjusted if char set changes</span></span><br><span class="line">      cur = tree[cur].tsugi[idx];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> p = cur; p &amp;&amp; ~tree[p].end_cnt; p = tree[p].fail) &#123;</span><br><span class="line">        res += tree[p].end_cnt;</span><br><span class="line">        tree[p].end_cnt = VISITED_COUNT;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3808</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  nyuuryoku(n);</span><br><span class="line">  ac_automaton&lt;MAXC&gt; aca;</span><br><span class="line">  <span class="built_in">string</span> s;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    nyuuryoku(s);</span><br><span class="line">    aca.build_trie(s);</span><br><span class="line">  &#125;</span><br><span class="line">  aca.build_fail();</span><br><span class="line">  nyuuryoku(s);</span><br><span class="line">  shutsuryokul(aca.query(s));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXN = <span class="number">150</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXM = <span class="number">70</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXL = MAXN * MAXM;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXC = <span class="number">26</span>;  <span class="comment">// should be adjusted if char set changes</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> tsugi[MAXC];</span><br><span class="line">  <span class="keyword">int</span> fail;</span><br><span class="line">  <span class="keyword">int</span> id;</span><br><span class="line">&#125; tree[MAXL];  <span class="comment">// cover clear 0 (not necessary)</span></span><br><span class="line"><span class="keyword">int</span> ncnt;  <span class="comment">// init 0</span></span><br><span class="line"><span class="built_in">string</span> orig_s[MAXN + <span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ord_pair</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> cnt;</span><br><span class="line">  <span class="keyword">int</span> id;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> ord_pair&amp; r) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt != r.cnt) &#123;</span><br><span class="line">      <span class="keyword">return</span> cnt &gt; r.cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> id &lt; r.id;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; record[MAXN + <span class="number">1</span>];  <span class="comment">// cover (not necessary)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ac_automaton</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> TRIE_ROOT = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> NODE_SIZE = <span class="keyword">sizeof</span>(node);</span><br><span class="line"></span><br><span class="line">  ac_automaton() &#123;</span><br><span class="line">    ncnt = TRIE_ROOT;</span><br><span class="line">    clear_node(TRIE_ROOT);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">clear_node</span><span class="params">(<span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(tree + idx, <span class="number">0</span>, NODE_SIZE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">build_trie</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.size();</span><br><span class="line">    <span class="keyword">int</span> cur = TRIE_ROOT;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">int</span> idx = s[i] - <span class="string">'a'</span>;  <span class="comment">// should be adjusted if char set changes</span></span><br><span class="line">      <span class="keyword">if</span> (!tree[cur].tsugi[idx]) &#123;</span><br><span class="line">        tree[cur].tsugi[idx] = ++ncnt;</span><br><span class="line">        clear_node(ncnt);</span><br><span class="line">      &#125;</span><br><span class="line">      cur = tree[cur].tsugi[idx];</span><br><span class="line">    &#125;</span><br><span class="line">    tree[cur].id = id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">build_fail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tree[TRIE_ROOT].tsugi[i]) &#123;</span><br><span class="line">        tree[tree[TRIE_ROOT].tsugi[i]].fail = TRIE_ROOT;</span><br><span class="line">        q.push(tree[TRIE_ROOT].tsugi[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">      <span class="keyword">int</span> u = q.front();</span><br><span class="line">      q.pop();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[u].tsugi[i]) &#123;</span><br><span class="line">          tree[tree[u].tsugi[i]].fail = tree[tree[u].fail].tsugi[i];</span><br><span class="line">          q.push(tree[u].tsugi[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          tree[u].tsugi[i] = tree[tree[u].fail].tsugi[i];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.size();</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">int</span> idx = s[i] - <span class="string">'a'</span>;  <span class="comment">// should be adjusted if char set changes</span></span><br><span class="line">      cur = tree[cur].tsugi[idx];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> p = cur; p; p = tree[p].fail) &#123;</span><br><span class="line">        ++record[tree[p].id].cnt;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3796</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  ac_automaton&lt;MAXC&gt; aca;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    nyuuryoku(orig_s[i]);</span><br><span class="line">    aca.build_trie(orig_s[i], i);</span><br><span class="line">    record[i].cnt = <span class="number">0</span>;</span><br><span class="line">    record[i].id = i;</span><br><span class="line">  &#125;</span><br><span class="line">  aca.build_fail();</span><br><span class="line">  nyuuryoku(orig_s[<span class="number">0</span>]);</span><br><span class="line">  aca.query(orig_s[<span class="number">0</span>]);</span><br><span class="line">  sort(record + <span class="number">1</span>, record + n + <span class="number">1</span>);</span><br><span class="line">  shutsuryokul(record[<span class="number">1</span>].cnt);</span><br><span class="line">  shutsuryokul(orig_s[record[<span class="number">1</span>].id]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (record[i].cnt == record[<span class="number">1</span>].cnt) &#123;</span><br><span class="line">      shutsuryokul(orig_s[record[i].id]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    nyuuryoku(n);</span><br><span class="line">    <span class="keyword">if</span> (!n) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    work(n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;洛谷模板题3808、3796 - AC自动机。&lt;/p&gt;
&lt;p&gt;这东西竞赛搞完后就再也没碰过了，其实竞赛也没碰过几次。&lt;br&gt;一般的说法AC自动机是在trie上做kmp，但其实个人感觉只能说是跟kmp思想比较接近，但原理还是稍有些不同。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="AC自动机" scheme="http://tashi711.top/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>「线性基」思考</title>
    <link href="http://tashi711.top/programming/dsaa/linear-basis/"/>
    <id>http://tashi711.top/programming/dsaa/linear-basis/</id>
    <published>2019-06-13T03:15:34.000Z</published>
    <updated>2019-06-10T16:18:37.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>洛谷模板题3812 - 线性基。</p><p>其实之前都没听说过这个东西，无意中刷到，然后研究了下。其实不难，很容易看懂，而且貌似比较强大，目前除了模板题的求最大值，还能看到有查询某数的用法，甚至更强的应用，这里没有深入去探索了。</p><p>总而言之就是将原来的数组空间映射到另一个线性空间（注意这里的线性并非线性组合，而是异或），那么保证原数组的异或空间与线性基的异或空间一致（也就是很多文章里面说的值域不变）。而线性基最多有$\log_2n$个，其中每个都拥有唯一的最高位。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题（3812）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> tashi711 &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">auto</span> neg = <span class="number">0</span>, k = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    neg |= k == <span class="string">'-'</span>;</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (k ^ <span class="number">0x30</span>);</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// not numeric_limits&lt;T&gt;::min()</span></span><br><span class="line">  <span class="keyword">if</span> (neg) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(T&amp; x, Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  nyuuryoku(x);</span><br><span class="line">  nyuuryoku(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> LEN = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">array</span>&lt;<span class="keyword">int</span>, LEN&gt; buf;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">auto</span> p = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// not numeric_limits&lt;T&gt;::min()</span></span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    buf[p++] = x % <span class="number">10</span> | <span class="number">0x30</span>;</span><br><span class="line">    x /= <span class="number">10</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (x);</span><br><span class="line">  <span class="keyword">while</span> (p) &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(buf[--p]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokus</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(x);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(x);</span><br><span class="line">  shutsuryokul();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  shutsuryokus(x);</span><br><span class="line">  shutsuryokul(args...);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">linear_basis</span> &#123;</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;T&gt; basis;</span><br><span class="line"></span><br><span class="line">  linear_basis() : basis(N, <span class="number">0</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_basis</span><span class="params">(T k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!(k &gt;&gt; i)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!basis[i]) &#123;</span><br><span class="line">        basis[i] = k;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      k ^= basis[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">get_xor_max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (res &lt; (res ^ basis[i])) &#123;</span><br><span class="line">        res ^= basis[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3812</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  nyuuryoku(n);</span><br><span class="line">  linear_basis&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="number">51</span>&gt; lb;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> u;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    nyuuryoku(u);</span><br><span class="line">    lb.add_basis(u);</span><br><span class="line">  &#125;</span><br><span class="line">  shutsuryokul(lb.get_xor_max());</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;洛谷模板题3812 - 线性基。&lt;/p&gt;
&lt;p&gt;其实之前都没听说过这个东西，无意中刷到，然后研究了下。其实不难，很容易看懂，而且貌似比较强大，目前除了模板题的求最大值，还能看到有查询某数的用法，甚至更强的应用，这里没有深入去探索了。&lt;/p&gt;
&lt;p&gt;总而言之就是将原来的数组空间映射到另一个线性空间（注意这里的线性并非线性组合，而是异或），那么保证原数组的异或空间与线性基的异或空间一致（也就是很多文章里面说的值域不变）。而线性基最多有$\log_2n$个，其中每个都拥有唯一的最高位。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="线性基" scheme="http://tashi711.top/tags/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
    
  </entry>
  
  <entry>
    <title>「二分图匹配」再探</title>
    <link href="http://tashi711.top/programming/dsaa/bipartite-graph/"/>
    <id>http://tashi711.top/programming/dsaa/bipartite-graph/</id>
    <published>2019-06-12T03:15:34.000Z</published>
    <updated>2019-06-07T06:06:20.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>洛谷模板题3386 - 二分图匹配。<br>之前用匈牙利算法实现过，改良了一番，见下代码1。<br>最近写了下网络流，试着用网络流解bgm，因为传说中Dinic比匈牙利更快，试了下果然快一点。<br>但没想到的是被说在二分图中比Dinic慢的ISAP居然实际比Dinic快不少。<br>由此可见ISAP几乎算是万能最大流算法了，甚至可以取代匈牙利。<br>毕竟本身已经能证明Dinic复杂度上限比匈牙利小，而ISAP又是Dinic的改良。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下两段代码均可过洛谷模板题（3386）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> tashi711 &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">auto</span> neg = <span class="number">0</span>, k = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    neg |= k == <span class="string">'-'</span>;</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (k ^ <span class="number">0x30</span>);</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// not numeric_limits&lt;T&gt;::min()</span></span><br><span class="line">  <span class="keyword">if</span> (neg) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(T&amp; x, Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  nyuuryoku(x);</span><br><span class="line">  nyuuryoku(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> LEN = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">array</span>&lt;<span class="keyword">int</span>, LEN&gt; buf;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">auto</span> p = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// not numeric_limits&lt;T&gt;::min()</span></span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    buf[p++] = x % <span class="number">10</span> | <span class="number">0x30</span>;</span><br><span class="line">    x /= <span class="number">10</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (x);</span><br><span class="line">  <span class="keyword">while</span> (p) &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(buf[--p]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokus</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(x);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(x);</span><br><span class="line">  shutsuryokul();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  shutsuryokus(x);</span><br><span class="line">  shutsuryokul(args...);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXX = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXY = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXM = MAXX * MAXY;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> v;</span><br><span class="line">  <span class="keyword">int</span> w;</span><br><span class="line">  <span class="keyword">int</span> tsugi;</span><br><span class="line">&#125; e[MAXM];  <span class="comment">// cover (not necessary)</span></span><br><span class="line"><span class="keyword">int</span> ecnt;  <span class="comment">// init 0</span></span><br><span class="line"><span class="keyword">int</span> adj_x[MAXX + <span class="number">1</span>];  <span class="comment">// init -1</span></span><br><span class="line"><span class="keyword">int</span> match_x[MAXX + <span class="number">1</span>];  <span class="comment">// init -1</span></span><br><span class="line"><span class="keyword">int</span> match_y[MAXY + <span class="number">1</span>];  <span class="comment">// init -1</span></span><br><span class="line"><span class="keyword">bool</span> vst_y[MAXY + <span class="number">1</span>];  <span class="comment">// iteratively init false (not necessary)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bipartite_graph</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MINUS_ONE_UC = <span class="number">0xFF</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> INT_SIZE = <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> BOOL_SIZE = <span class="keyword">sizeof</span>(<span class="keyword">bool</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line">  bipartite_graph(<span class="keyword">int</span> n, <span class="keyword">int</span> m) : n(n), m(m) &#123;</span><br><span class="line">    ecnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(adj_x + <span class="number">1</span>, MINUS_ONE_UC, INT_SIZE * n);</span><br><span class="line">    <span class="built_in">memset</span>(match_x + <span class="number">1</span>, MINUS_ONE_UC, INT_SIZE * n);</span><br><span class="line">    <span class="built_in">memset</span>(match_y + <span class="number">1</span>, MINUS_ONE_UC, INT_SIZE * m);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[ecnt].v = v;</span><br><span class="line">    e[ecnt].tsugi = adj_x[u];</span><br><span class="line">    adj_x[u] = ecnt++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = adj_x[u]; ~i; i = e[i].tsugi) &#123;</span><br><span class="line">      <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">      <span class="keyword">if</span> (vst_y[v]) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      vst_y[v] = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (!~match_y[v] || dfs(match_y[v])) &#123;</span><br><span class="line">        match_x[u] = v;</span><br><span class="line">        match_y[v] = u;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">hungarian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      <span class="built_in">memset</span>(vst_y + <span class="number">1</span>, <span class="number">0</span>, BOOL_SIZE * m);</span><br><span class="line">      <span class="keyword">if</span> (dfs(i)) &#123;</span><br><span class="line">        ++res;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3386</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="keyword">int</span> nx, ny, m;</span><br><span class="line">  nyuuryoku(nx, ny, m);</span><br><span class="line">  <span class="function">bipartite_graph <span class="title">bg</span><span class="params">(nx, ny)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    nyuuryoku(u, v);</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= nx &amp;&amp; v &lt;= ny) &#123;  <span class="comment">// data problem, not necessary</span></span><br><span class="line">      bg.add_edge(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  shutsuryokul(bg.hungarian());</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> tashi711 &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">auto</span> neg = <span class="number">0</span>, k = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    neg |= k == <span class="string">'-'</span>;</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (k ^ <span class="number">0x30</span>);</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// not numeric_limits&lt;T&gt;::min()</span></span><br><span class="line">  <span class="keyword">if</span> (neg) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(T&amp; x, Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  nyuuryoku(x);</span><br><span class="line">  nyuuryoku(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> LEN = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">array</span>&lt;<span class="keyword">int</span>, LEN&gt; buf;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">auto</span> p = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// not numeric_limits&lt;T&gt;::min()</span></span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    buf[p++] = x % <span class="number">10</span> | <span class="number">0x30</span>;</span><br><span class="line">    x /= <span class="number">10</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (x);</span><br><span class="line">  <span class="keyword">while</span> (p) &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(buf[--p]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokus</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(x);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(x);</span><br><span class="line">  shutsuryokul();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  shutsuryokus(x);</span><br><span class="line">  shutsuryokul(args...);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXX = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXY = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXN = MAXX + MAXY + <span class="number">2</span>;  <span class="comment">// including s, t</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXM = MAXX * MAXY + MAXX + MAXY;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> v;</span><br><span class="line">  <span class="keyword">int</span> w;</span><br><span class="line">  <span class="keyword">int</span> tsugi;</span><br><span class="line">&#125; e[MAXM &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> ecnt;</span><br><span class="line"><span class="keyword">int</span> adj[MAXN + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> deep[MAXN + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> dcnt[MAXN + <span class="number">1</span>];  <span class="comment">// only for ISAP</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">network_flow</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MINUS_ONE_UC = <span class="number">0xFF</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> INT_SIZE = <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> s, t;</span><br><span class="line"></span><br><span class="line">  network_flow(<span class="keyword">int</span> n, <span class="keyword">int</span> s, <span class="keyword">int</span> t) : n(n), s(s), t(t) &#123;</span><br><span class="line">    ecnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(adj + <span class="number">1</span>, MINUS_ONE_UC, INT_SIZE * n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_single_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T w)</span> </span>&#123;</span><br><span class="line">    e[ecnt].v = v;</span><br><span class="line">    e[ecnt].w = w;</span><br><span class="line">    e[ecnt].tsugi = adj[u];</span><br><span class="line">    adj[u] = ecnt++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_directed_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T w)</span> </span>&#123;</span><br><span class="line">    add_single_edge(u, v, w);</span><br><span class="line">    add_single_edge(v, u, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">update_flow</span><span class="params">(<span class="keyword">int</span> idx, T flow)</span> </span>&#123;</span><br><span class="line">    e[idx].w -= flow;</span><br><span class="line">    e[idx ^ <span class="number">1</span>].w += flow;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">dinic_bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(deep + <span class="number">1</span>, MINUS_ONE_UC, INT_SIZE * n);</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    deep[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">      <span class="keyword">int</span> u = q.front();</span><br><span class="line">      q.pop();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = adj[u]; ~i; i = e[i].tsugi) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        T w = e[i].w;</span><br><span class="line">        <span class="keyword">if</span> (!~deep[v] &amp;&amp; w) &#123;</span><br><span class="line">          deep[v] = deep[u] + <span class="number">1</span>;</span><br><span class="line">          q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (~deep[t]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">dinic_dfs</span><span class="params">(<span class="keyword">int</span> u, T limit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!limit || u == t) &#123;</span><br><span class="line">      <span class="keyword">return</span> limit;</span><br><span class="line">    &#125;</span><br><span class="line">    T tot_flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = adj[u]; ~i; i = e[i].tsugi) &#123;</span><br><span class="line">      <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">      T w = e[i].w;</span><br><span class="line">      <span class="keyword">if</span> (deep[v] == deep[u] + <span class="number">1</span>) &#123;</span><br><span class="line">        T cur_flow = dinic_dfs(v, min(limit, w));</span><br><span class="line">        <span class="keyword">if</span> (cur_flow) &#123;</span><br><span class="line">          tot_flow += cur_flow;</span><br><span class="line">          limit -= cur_flow;</span><br><span class="line">          update_flow(i, cur_flow);</span><br><span class="line">          <span class="keyword">if</span> (!limit) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tot_flow;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">dinic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (dinic_bfs()) &#123;</span><br><span class="line">      res += dinic_dfs(s, numeric_limits&lt;T&gt;::max());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">isap_augment</span><span class="params">(<span class="keyword">int</span> u, T limit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == t) &#123;</span><br><span class="line">      <span class="keyword">return</span> limit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> dmin = n - <span class="number">1</span>;</span><br><span class="line">    T tot_flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = adj[u]; ~i; i = e[i].tsugi) &#123;</span><br><span class="line">      <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">      T w = e[i].w;</span><br><span class="line">      <span class="keyword">if</span> (w) &#123;</span><br><span class="line">        <span class="keyword">if</span> (deep[u] == deep[v] + <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">int</span> cur_flow = isap_augment(v, min(limit, w));</span><br><span class="line">          tot_flow += cur_flow;</span><br><span class="line">          limit -= cur_flow;</span><br><span class="line">          update_flow(i, cur_flow);</span><br><span class="line">          <span class="keyword">if</span> (deep[s] == n || !limit) &#123;</span><br><span class="line">            <span class="keyword">return</span> tot_flow;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dmin = min(dmin, deep[v]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!tot_flow) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!--dcnt[deep[u]]) &#123;</span><br><span class="line">        deep[s] = n;</span><br><span class="line">      &#125;</span><br><span class="line">      ++dcnt[deep[u] = dmin + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tot_flow;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">isap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">0</span>;</span><br><span class="line">    dcnt[<span class="number">0</span>] = n;</span><br><span class="line">    <span class="keyword">while</span> (deep[s] &lt; n) &#123;</span><br><span class="line">      res += isap_augment(s, numeric_limits&lt;T&gt;::max());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3386</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="keyword">int</span> nx, ny, m;</span><br><span class="line">  nyuuryoku(nx, ny, m);</span><br><span class="line">  <span class="keyword">int</span> n = nx + ny + <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">int</span> s = n - <span class="number">1</span>, t = n;</span><br><span class="line">  network_flow&lt;<span class="keyword">int</span>&gt; nf(n, s, t);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    nyuuryoku(u, v);</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= nx &amp;&amp; v &lt;= ny) &#123;  <span class="comment">// data problem, not necessary</span></span><br><span class="line">      nf.add_directed_edge(u, v + nx, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nx; ++i) &#123;</span><br><span class="line">    nf.add_directed_edge(s, i, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ny; ++i) &#123;</span><br><span class="line">    nf.add_directed_edge(i + nx, t, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  shutsuryokul(nf.isap());</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;洛谷模板题3386 - 二分图匹配。&lt;br&gt;之前用匈牙利算法实现过，改良了一番，见下代码1。&lt;br&gt;最近写了下网络流，试着用网络流解bgm，因为传说中Dinic比匈牙利更快，试了下果然快一点。&lt;br&gt;但没想到的是被说在二分图中比Dinic慢的ISAP居然实际比Dinic快不少。&lt;br&gt;由此可见ISAP几乎算是万能最大流算法了，甚至可以取代匈牙利。&lt;br&gt;毕竟本身已经能证明Dinic复杂度上限比匈牙利小，而ISAP又是Dinic的改良。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="二分图匹配" scheme="http://tashi711.top/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    
      <category term="匈牙利算法" scheme="http://tashi711.top/tags/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/"/>
    
      <category term="最大流" scheme="http://tashi711.top/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>「最大流」模板</title>
    <link href="http://tashi711.top/programming/dsaa/network-flow/"/>
    <id>http://tashi711.top/programming/dsaa/network-flow/</id>
    <published>2019-06-11T03:15:34.000Z</published>
    <updated>2019-06-06T17:17:42.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>洛谷模板题3376 - 网络最大流。<br>实现两种算法，Dinic与ISAP。<br>Dinic就是比较常用的，对单纯的最短路径增广（Edmonds-Karp算法）的优化，实现分层。<br>当然渐进复杂度没有变，$O(n^2m)$，不过显然会快很多。<br>ISAP就是当时竞赛时写的GAP优化的SAP（Improved SAP），其实是对Dinic的进一步优化。<br>虽然渐进复杂度还是没有变，$O(n^2m)$，一般数据比起Dinic会快个常数（当然不是绝对，Dinic对二分图更优）。<br>（当然很奇怪的是网上很难找到本代码这么简洁明了的写法了，用一个递归增广函数即可。）</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题（3376）。<br>当然，用isap替换dinic<strong>更</strong>能过了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> tashi711 &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">auto</span> neg = <span class="number">0</span>, k = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    neg |= k == <span class="string">'-'</span>;</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (k ^ <span class="number">0x30</span>);</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// not numeric_limits&lt;T&gt;::min()</span></span><br><span class="line">  <span class="keyword">if</span> (neg) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(T&amp; x, Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  nyuuryoku(x);</span><br><span class="line">  nyuuryoku(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> LEN = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">array</span>&lt;<span class="keyword">int</span>, LEN&gt; buf;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">auto</span> p = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// not numeric_limits&lt;T&gt;::min()</span></span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    buf[p++] = x % <span class="number">10</span> | <span class="number">0x30</span>;</span><br><span class="line">    x /= <span class="number">10</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (x);</span><br><span class="line">  <span class="keyword">while</span> (p) &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(buf[--p]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokus</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(x);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(x);</span><br><span class="line">  shutsuryokul();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  shutsuryokus(x);</span><br><span class="line">  shutsuryokul(args...);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXN = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXM = <span class="number">100000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> v;</span><br><span class="line">  <span class="keyword">int</span> w;</span><br><span class="line">  <span class="keyword">int</span> tsugi;</span><br><span class="line">&#125; e[MAXM &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> ecnt;</span><br><span class="line"><span class="keyword">int</span> adj[MAXN + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> deep[MAXN + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> dcnt[MAXN + <span class="number">1</span>];  <span class="comment">// only for ISAP</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">network_flow</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MINUS_ONE_UC = <span class="number">0xFF</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> INT_SIZE = <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> s, t;</span><br><span class="line"></span><br><span class="line">  network_flow(<span class="keyword">int</span> n, <span class="keyword">int</span> s, <span class="keyword">int</span> t) : n(n), s(s), t(t) &#123;</span><br><span class="line">    ecnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(adj + <span class="number">1</span>, MINUS_ONE_UC, INT_SIZE * n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_single_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T w)</span> </span>&#123;</span><br><span class="line">    e[ecnt].v = v;</span><br><span class="line">    e[ecnt].w = w;</span><br><span class="line">    e[ecnt].tsugi = adj[u];</span><br><span class="line">    adj[u] = ecnt++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_directed_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T w)</span> </span>&#123;</span><br><span class="line">    add_single_edge(u, v, w);</span><br><span class="line">    add_single_edge(v, u, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">update_flow</span><span class="params">(<span class="keyword">int</span> idx, T flow)</span> </span>&#123;</span><br><span class="line">    e[idx].w -= flow;</span><br><span class="line">    e[idx ^ <span class="number">1</span>].w += flow;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">dinic_bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(deep + <span class="number">1</span>, MINUS_ONE_UC, INT_SIZE * n);</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    deep[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">      <span class="keyword">int</span> u = q.front();</span><br><span class="line">      q.pop();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = adj[u]; ~i; i = e[i].tsugi) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        T w = e[i].w;</span><br><span class="line">        <span class="keyword">if</span> (!~deep[v] &amp;&amp; w) &#123;</span><br><span class="line">          deep[v] = deep[u] + <span class="number">1</span>;</span><br><span class="line">          q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (~deep[t]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">dinic_dfs</span><span class="params">(<span class="keyword">int</span> u, T limit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!limit || u == t) &#123;</span><br><span class="line">      <span class="keyword">return</span> limit;</span><br><span class="line">    &#125;</span><br><span class="line">    T tot_flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = adj[u]; ~i; i = e[i].tsugi) &#123;</span><br><span class="line">      <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">      T w = e[i].w;</span><br><span class="line">      <span class="keyword">if</span> (deep[v] == deep[u] + <span class="number">1</span>) &#123;</span><br><span class="line">        T cur_flow = dinic_dfs(v, min(limit, w));</span><br><span class="line">        <span class="keyword">if</span> (cur_flow) &#123;</span><br><span class="line">          tot_flow += cur_flow;</span><br><span class="line">          limit -= cur_flow;</span><br><span class="line">          update_flow(i, cur_flow);</span><br><span class="line">          <span class="keyword">if</span> (!limit) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tot_flow;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">dinic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (dinic_bfs()) &#123;</span><br><span class="line">      res += dinic_dfs(s, numeric_limits&lt;T&gt;::max());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">isap_augment</span><span class="params">(<span class="keyword">int</span> u, T limit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == t) &#123;</span><br><span class="line">      <span class="keyword">return</span> limit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> dmin = n - <span class="number">1</span>;</span><br><span class="line">    T tot_flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = adj[u]; ~i; i = e[i].tsugi) &#123;</span><br><span class="line">      <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">      T w = e[i].w;</span><br><span class="line">      <span class="keyword">if</span> (w) &#123;</span><br><span class="line">        <span class="keyword">if</span> (deep[u] == deep[v] + <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">int</span> cur_flow = isap_augment(v, min(limit, w));</span><br><span class="line">          tot_flow += cur_flow;</span><br><span class="line">          limit -= cur_flow;</span><br><span class="line">          update_flow(i, cur_flow);</span><br><span class="line">          <span class="keyword">if</span> (deep[s] == n || !limit) &#123;</span><br><span class="line">            <span class="keyword">return</span> tot_flow;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dmin = min(dmin, deep[v]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!tot_flow) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!--dcnt[deep[u]]) &#123;</span><br><span class="line">        deep[s] = n;</span><br><span class="line">      &#125;</span><br><span class="line">      ++dcnt[deep[u] = dmin + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tot_flow;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">isap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">0</span>;</span><br><span class="line">    dcnt[<span class="number">0</span>] = n;</span><br><span class="line">    <span class="keyword">while</span> (deep[s] &lt; n) &#123;</span><br><span class="line">      res += isap_augment(s, numeric_limits&lt;T&gt;::max());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3376</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="keyword">int</span> n, m, s, t;</span><br><span class="line">  nyuuryoku(n, m, s, t);</span><br><span class="line">  network_flow&lt;<span class="keyword">int</span>&gt; nf(n, s, t);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> u, v, w, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    nyuuryoku(u, v, w);</span><br><span class="line">    nf.add_directed_edge(u, v, w);</span><br><span class="line">  &#125;</span><br><span class="line">  shutsuryokul(nf.dinic());</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;洛谷模板题3376 - 网络最大流。&lt;br&gt;实现两种算法，Dinic与ISAP。&lt;br&gt;Dinic就是比较常用的，对单纯的最短路径增广（Edmonds-Karp算法）的优化，实现分层。&lt;br&gt;当然渐进复杂度没有变，$O(n^2m)$，不过显然会快很多。&lt;br&gt;ISAP就是当时竞赛时写的GAP优化的SAP（Improved SAP），其实是对Dinic的进一步优化。&lt;br&gt;虽然渐进复杂度还是没有变，$O(n^2m)$，一般数据比起Dinic会快个常数（当然不是绝对，Dinic对二分图更优）。&lt;br&gt;（当然很奇怪的是网上很难找到本代码这么简洁明了的写法了，用一个递归增广函数即可。）&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="最大流" scheme="http://tashi711.top/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>「线段树」进化</title>
    <link href="http://tashi711.top/programming/dsaa/advanced-segment-tree/"/>
    <id>http://tashi711.top/programming/dsaa/advanced-segment-tree/</id>
    <published>2019-06-10T03:15:34.000Z</published>
    <updated>2019-06-05T13:55:42.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>洛谷模板题3373 - 线段树 2。<br>基本就是加强了前一个写的线段树，支持乘法，添加取模运算。<br>另外屈服于vector的低效率，再次验证了大数据静态开数组的必要性。<br>基本思路也比较简单，加法与乘法各打一个懒标记，基本框架跟只有加法一样。<br>只是细节：有加法时直接加，而乘法需要将加法的懒标记乘上去。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题（3373）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> tashi711 &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">auto</span> neg = <span class="number">0</span>, k = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    neg |= k == <span class="string">'-'</span>;</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (k ^ <span class="number">0x30</span>);</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// not numeric_limits&lt;T&gt;::min()</span></span><br><span class="line">  <span class="keyword">if</span> (neg) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(T&amp; x, Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  nyuuryoku(x);</span><br><span class="line">  nyuuryoku(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> LEN = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">array</span>&lt;<span class="keyword">int</span>, LEN&gt; buf;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">auto</span> p = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// not numeric_limits&lt;T&gt;::min()</span></span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    buf[p++] = x % <span class="number">10</span> | <span class="number">0x30</span>;</span><br><span class="line">    x /= <span class="number">10</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (x);</span><br><span class="line">  <span class="keyword">while</span> (p) &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(buf[--p]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokus</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(x);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(x);</span><br><span class="line">  shutsuryokul();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  shutsuryokus(x);</span><br><span class="line">  shutsuryokul(args...);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXN = <span class="number">100000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> l, r, len, mid, pl, pr;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> mul, add, val;</span><br><span class="line">&#125; tree[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> pre[MAXN + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segmemt_tree</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  T mod;</span><br><span class="line"></span><br><span class="line">  segmemt_tree(<span class="keyword">int</span> n, <span class="keyword">int</span> p) : n(n), mod(p) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    build(<span class="number">1</span>, n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    tree[p].l = l;</span><br><span class="line">    tree[p].r = r;</span><br><span class="line">    tree[p].len = r - l + <span class="number">1</span>;</span><br><span class="line">    tree[p].mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    tree[p].mul = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">      tree[p].val = pre[l] % mod;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tree[p].pl = p &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    tree[p].pr = p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">    build(l, tree[p].mid, tree[p].pl);</span><br><span class="line">    build(tree[p].mid + <span class="number">1</span>, r, tree[p].pr);</span><br><span class="line">    push_up(p);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    tree[p].val = (tree[tree[p].pl].val + tree[tree[p].pr].val) % mod;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    tree[tree[p].pl].mul = tree[tree[p].pl].mul * tree[p].mul % mod;</span><br><span class="line">    tree[tree[p].pr].mul = tree[tree[p].pr].mul * tree[p].mul % mod;</span><br><span class="line">    tree[tree[p].pl].add = (tree[tree[p].pl].add * tree[p].mul % mod +</span><br><span class="line">      tree[p].add) % mod;</span><br><span class="line">    tree[tree[p].pr].add = (tree[tree[p].pr].add * tree[p].mul % mod +</span><br><span class="line">      tree[p].add) % mod;</span><br><span class="line">    tree[tree[p].pl].val = (tree[tree[p].pl].val * tree[p].mul % mod +</span><br><span class="line">      tree[p].add * tree[tree[p].pl].len % mod) % mod;</span><br><span class="line">    tree[tree[p].pr].val = (tree[tree[p].pr].val * tree[p].mul % mod +</span><br><span class="line">      tree[p].add * tree[tree[p].pr].len % mod) % mod;</span><br><span class="line">    tree[p].mul = <span class="number">1</span>;</span><br><span class="line">    tree[p].add = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">update_mul</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T mul, <span class="keyword">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= tree[p].l &amp;&amp; v &gt;= tree[p].r) &#123;</span><br><span class="line">      tree[p].mul = tree[p].mul * mul % mod;</span><br><span class="line">      tree[p].add = tree[p].add * mul % mod;</span><br><span class="line">      tree[p].val = tree[p].val * mul % mod;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(p);</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= tree[p].mid) &#123;</span><br><span class="line">      update_mul(u, v, mul, tree[p].pl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v &gt; tree[p].mid) &#123;</span><br><span class="line">      update_mul(u, v, mul, tree[p].pr);</span><br><span class="line">    &#125;</span><br><span class="line">    push_up(p);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">update_add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T add, <span class="keyword">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= tree[p].l &amp;&amp; v &gt;= tree[p].r) &#123;</span><br><span class="line">      tree[p].add = (tree[p].add + add) % mod;</span><br><span class="line">      tree[p].val = (tree[p].val + add * tree[p].len % mod) % mod;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(p);</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= tree[p].mid) &#123;</span><br><span class="line">      update_add(u, v, add, tree[p].pl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v &gt; tree[p].mid) &#123;</span><br><span class="line">      update_add(u, v, add, tree[p].pr);</span><br><span class="line">    &#125;</span><br><span class="line">    push_up(p);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> p = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= tree[p].l &amp;&amp; v &gt;= tree[p].r) &#123;</span><br><span class="line">      <span class="keyword">return</span> tree[p].val;</span><br><span class="line">    &#125;</span><br><span class="line">    T res = <span class="number">0</span>;</span><br><span class="line">    push_down(p);</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= tree[p].mid) &#123;</span><br><span class="line">      res += query(u, v, tree[p].pl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v &gt; tree[p].mid) &#123;</span><br><span class="line">      res += query(u, v, tree[p].pr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % mod;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3373</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="keyword">int</span> n, m, p;</span><br><span class="line">  nyuuryoku(n, m, p);</span><br><span class="line">  segmemt_tree&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; st(n, p);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    nyuuryoku(pre[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  st.init();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> q, u, v, k, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    nyuuryoku(q);</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="number">1</span>) &#123;</span><br><span class="line">      nyuuryoku(u, v, k);</span><br><span class="line">      st.update_mul(u, v, k);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (q == <span class="number">2</span>) &#123;</span><br><span class="line">      nyuuryoku(u, v, k);</span><br><span class="line">      st.update_add(u, v, k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      nyuuryoku(u, v);</span><br><span class="line">      shutsuryokul(st.query(u, v));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;洛谷模板题3373 - 线段树 2。&lt;br&gt;基本就是加强了前一个写的线段树，支持乘法，添加取模运算。&lt;br&gt;另外屈服于vector的低效率，再次验证了大数据静态开数组的必要性。&lt;br&gt;基本思路也比较简单，加法与乘法各打一个懒标记，基本框架跟只有加法一样。&lt;br&gt;只是细节：有加法时直接加，而乘法需要将加法的懒标记乘上去。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="线段树" scheme="http://tashi711.top/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>「缩点」模板</title>
    <link href="http://tashi711.top/programming/dsaa/directed-tarjan/"/>
    <id>http://tashi711.top/programming/dsaa/directed-tarjan/</id>
    <published>2019-06-09T03:15:34.000Z</published>
    <updated>2019-06-04T15:31:11.292Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>洛谷模板题3387 - 缩点。<br>所谓的“缩点”是针对有向图的强连通分量的。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题（3387）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> tashi711 &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">auto</span> neg = <span class="number">0</span>, k = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    neg |= k == <span class="string">'-'</span>;</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (k ^ <span class="number">0x30</span>);</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// not numeric_limits&lt;T&gt;::min()</span></span><br><span class="line">  <span class="keyword">if</span> (neg) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(T&amp; x, Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  nyuuryoku(x);</span><br><span class="line">  nyuuryoku(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> LEN = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">array</span>&lt;<span class="keyword">int</span>, LEN&gt; buf;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">auto</span> p = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// not numeric_limits&lt;T&gt;::min()</span></span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    buf[p++] = x % <span class="number">10</span> | <span class="number">0x30</span>;</span><br><span class="line">    x /= <span class="number">10</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (x);</span><br><span class="line">  <span class="keyword">while</span> (p) &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(buf[--p]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokus</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(x);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(x);</span><br><span class="line">  shutsuryokul();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  shutsuryokus(x);</span><br><span class="line">  shutsuryokul(args...);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXN = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXM = <span class="number">100000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">original_edge</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> u, v;</span><br><span class="line">&#125; oe[MAXM];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> v;</span><br><span class="line">  <span class="keyword">int</span> tsugi;</span><br><span class="line">&#125; e[MAXM], collapse_e[MAXM];</span><br><span class="line"><span class="keyword">int</span> ecnt, collapse_ecnt;</span><br><span class="line"><span class="keyword">int</span> adj[MAXN + <span class="number">1</span>], collapse_adj[MAXN + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> dfn[MAXN + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> low[MAXN + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> val[MAXN + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">bool</span> ins[MAXN + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> bnum[MAXN + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> bval[MAXN + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> f[MAXN + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">directed_tarjan</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> bcnt = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line">  directed_tarjan(<span class="keyword">int</span> n) : n(n) &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MINUS_ONE_UC = <span class="number">0xFF</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> INT_SIZE = <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">    ecnt = <span class="number">0</span>;</span><br><span class="line">    collapse_ecnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(adj + <span class="number">1</span>, MINUS_ONE_UC, INT_SIZE * n);</span><br><span class="line">    <span class="built_in">memset</span>(collapse_adj + <span class="number">1</span>, MINUS_ONE_UC, INT_SIZE * n);</span><br><span class="line">    <span class="built_in">memset</span>(f + <span class="number">1</span>, MINUS_ONE_UC, INT_SIZE * n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_directed_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    oe[ecnt].u = u;</span><br><span class="line">    oe[ecnt].v = v;</span><br><span class="line">    e[ecnt].v = v;</span><br><span class="line">    e[ecnt].tsugi = adj[u];</span><br><span class="line">    adj[u] = ecnt++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_collapse_directed_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    collapse_e[collapse_ecnt].v = v;</span><br><span class="line">    collapse_e[collapse_ecnt].tsugi = collapse_adj[u];</span><br><span class="line">    collapse_adj[u] = collapse_ecnt++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    dfn[u] = low[u] = ++idx;</span><br><span class="line">    s.push(u);</span><br><span class="line">    ins[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = adj[u]; ~i; i = e[i].tsugi) &#123;</span><br><span class="line">      <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">      <span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">        dfs(v);</span><br><span class="line">        low[u] = min(low[u], low[v]);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ins[v]) &#123;</span><br><span class="line">        low[u] = min(low[u], dfn[v]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (low[u] == dfn[u]) &#123;</span><br><span class="line">      ++bcnt;</span><br><span class="line">      <span class="keyword">while</span>(!s.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">        ins[t] = <span class="literal">false</span>;</span><br><span class="line">        bnum[t] = bcnt;</span><br><span class="line">        bval[bcnt] += val[t];</span><br><span class="line">        <span class="keyword">if</span> (t == u) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">        dfs(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">collapse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ecnt; ++i) &#123;</span><br><span class="line">      <span class="keyword">int</span> u = bnum[oe[i].u], v = bnum[oe[i].v];</span><br><span class="line">      <span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">        add_collapse_directed_edge(u, v);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">memorized_search</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (~f[u]) &#123;</span><br><span class="line">      <span class="keyword">return</span> f[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxv = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = collapse_adj[u]; ~i; i = collapse_e[i].tsugi) &#123;</span><br><span class="line">      <span class="keyword">int</span> v = collapse_e[i].v;</span><br><span class="line">      maxv = max(maxv, memorized_search(v));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[u] = bval[u] + maxv;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= bcnt; ++i) &#123;</span><br><span class="line">      res = max(res, memorized_search(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3387</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  nyuuryoku(n, m);</span><br><span class="line">  <span class="function">directed_tarjan <span class="title">dt</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    nyuuryoku(val[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">    nyuuryoku(u, v);</span><br><span class="line">    dt.add_directed_edge(u, v);</span><br><span class="line">  &#125;</span><br><span class="line">  dt.tarjan();</span><br><span class="line">  dt.collapse();</span><br><span class="line">  shutsuryokul(dt.dp());</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;洛谷模板题3387 - 缩点。&lt;br&gt;所谓的“缩点”是针对有向图的强连通分量的。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="tarjan" scheme="http://tashi711.top/tags/tarjan/"/>
    
      <category term="缩点" scheme="http://tashi711.top/tags/%E7%BC%A9%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>「高斯消元」模板</title>
    <link href="http://tashi711.top/programming/dsaa/gaussian-elimination/"/>
    <id>http://tashi711.top/programming/dsaa/gaussian-elimination/</id>
    <published>2019-06-08T03:15:34.000Z</published>
    <updated>2019-06-02T09:58:05.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>洛谷模板题3389 - 高斯消元法。<br>基本就注意两点：一是无解判断为绝对值小于EPS（double精度）；二是先处理最大绝对值保证精度。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><p>以下代码可过洛谷模板题（3389）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> tashi711 &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(T&amp; x)</span> </span>&#123;</span><br><span class="line">  x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">auto</span> neg = <span class="number">0</span>, k = getchar();</span><br><span class="line">  <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    neg |= k == <span class="string">'-'</span>;</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">isdigit</span>(k)) &#123;</span><br><span class="line">    x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (k ^ <span class="number">0x30</span>);</span><br><span class="line">    k = getchar();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// not numeric_limits&lt;T&gt;::min()</span></span><br><span class="line">  <span class="keyword">if</span> (neg) &#123;</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(<span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nyuuryoku</span><span class="params">(T&amp; x, Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  nyuuryoku(x);</span><br><span class="line">  nyuuryoku(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> LEN = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">array</span>&lt;<span class="keyword">int</span>, LEN&gt; buf;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">auto</span> p = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// not numeric_limits&lt;T&gt;::min()</span></span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">    x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    buf[p++] = x % <span class="number">10</span> | <span class="number">0x30</span>;</span><br><span class="line">    x /= <span class="number">10</span>;</span><br><span class="line">  &#125; <span class="keyword">while</span> (x);</span><br><span class="line">  <span class="keyword">while</span> (p) &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(buf[--p]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryoku</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokus</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(x);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(s.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">  shutsuryoku(x);</span><br><span class="line">  shutsuryokul();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shutsuryokul</span><span class="params">(<span class="keyword">const</span> T&amp; x, <span class="keyword">const</span> Args&amp;... args)</span> </span>&#123;</span><br><span class="line">  shutsuryokus(x);</span><br><span class="line">  shutsuryokul(args...);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> MAXN = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">double</span> a[MAXN + <span class="number">1</span>][MAXN + <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">linear_equations</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> T EPS = <span class="number">1e-6</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">  linear_equations(<span class="keyword">int</span> n) : n(n) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">equal_zero</span><span class="params">(T k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(k) &lt; EPS;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">gaussian_elimination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      <span class="keyword">int</span> cur = i;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[j][i]) &gt; <span class="built_in">fabs</span>(a[cur][i])) &#123;</span><br><span class="line">          cur = j;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n + <span class="number">1</span>; ++j) &#123;</span><br><span class="line">        swap(a[i][j], a[cur][j]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (equal_zero(a[i][i])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n + <span class="number">1</span>; ++j) &#123;</span><br><span class="line">        a[i][j] /= a[i][i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= n + <span class="number">1</span>; ++k) &#123;</span><br><span class="line">            a[j][k] -= a[j][i] * a[i][k];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> tashi711;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  nyuuryoku(n);</span><br><span class="line">  linear_equations&lt;<span class="keyword">double</span>&gt; le(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n + <span class="number">1</span>; ++j) &#123;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!le.gaussian_elimination()) &#123;</span><br><span class="line">    shutsuryokul(<span class="string">"No Solution"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">2</span>) &lt;&lt; a[i][n + <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;洛谷模板题3389 - 高斯消元法。&lt;br&gt;基本就注意两点：一是无解判断为绝对值小于EPS（double精度）；二是先处理最大绝对值保证精度。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="高斯消元" scheme="http://tashi711.top/tags/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/"/>
    
  </entry>
  
  <entry>
    <title>「单调队列」应用</title>
    <link href="http://tashi711.top/programming/others/monotone-queue/"/>
    <id>http://tashi711.top/programming/others/monotone-queue/</id>
    <published>2019-06-07T03:15:34.000Z</published>
    <updated>2019-06-02T08:32:06.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>单调队列可以用于线性优化一些序列的问题，它可能并不是一个真正的队列，有时表现为栈，但通常具有deque的性质（queue与stack都可以看成是deque）。这里讲几个应用。</p><h3 id="1、长度不超过k的最大连续子序列"><a href="#1、长度不超过k的最大连续子序列" class="headerlink" title="1、长度不超过k的最大连续子序列"></a>1、长度不超过k的最大连续子序列</h3><a id="more"></a><p>n个数求最大连续子序列的和，长度不超过k。<br>普通的dp转移方程就是 dp[i] = sum[i] - min(sum[j] | i - m &lt;= j &lt;= i)<br>枚举复杂度为n^2，维护队列存下距离不超过m，且最小的前缀和的下标。<br>如果来了一个前缀和，肯定下标是比在队列里的是靠后的。<br>如果它的值还比队列里的小，那么队列里的元素就没有必要存在了，就pop掉。<br>因为每个元素最多只会进一次队列，出一次队列，所以复杂度就是O(n)。</p><h3 id="2、直方图最大面积"><a href="#2、直方图最大面积" class="headerlink" title="2、直方图最大面积"></a>2、直方图最大面积</h3><p>维护单调递增的栈，遇到比栈顶更矮的就pop直到栈顶比当前矮，再push。<br>每次出栈时计算以此为最矮点（即高度）的矩形（因为pop的时候右边一定来了个更矮的，不能再延伸了）。<br>那么左边端点即为栈前面的元素（栈是单调递增的）。</p><h3 id="3、长度为k的最值"><a href="#3、长度为k的最值" class="headerlink" title="3、长度为k的最值"></a>3、长度为k的最值</h3><p>n个数的序列，求每个长度为k的最值，保存最值单调（最大值递减，最小值递增）且长度不超过k的队列即可。</p><h3 id="4、最大值与最小值相差不超过k的最长序列"><a href="#4、最大值与最小值相差不超过k的最长序列" class="headerlink" title="4、最大值与最小值相差不超过k的最长序列"></a>4、最大值与最小值相差不超过k的最长序列</h3><p>维护两个单调队列：最大值递减，最小值递增，且到当前为止两个队尾元素相差不超过k，超过了就pop掉最远的那个。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;单调队列可以用于线性优化一些序列的问题，它可能并不是一个真正的队列，有时表现为栈，但通常具有deque的性质（queue与stack都可以看成是deque）。这里讲几个应用。&lt;/p&gt;
&lt;h3 id=&quot;1、长度不超过k的最大连续子序列&quot;&gt;&lt;a href=&quot;#1、长度不超过k的最大连续子序列&quot; class=&quot;headerlink&quot; title=&quot;1、长度不超过k的最大连续子序列&quot;&gt;&lt;/a&gt;1、长度不超过k的最大连续子序列&lt;/h3&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="其他" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="单调队列" scheme="http://tashi711.top/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
</feed>
