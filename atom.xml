<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tashi711的博客</title>
  
  <subtitle>過去（きのう）に傷付きながらも、信じ続ける理想（ゆめ）を求める。いつか無限（なないろ）に輝き放って、青空（そら）に橋を描く。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tashi711.top/"/>
  <updated>2019-05-09T17:47:30.580Z</updated>
  <id>http://tashi711.top/</id>
  
  <author>
    <name>Tashi711</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「扩展中国剩余定理」深入思考</title>
    <link href="http://tashi711.top/programming/dsaa/extended-crt/"/>
    <id>http://tashi711.top/programming/dsaa/extended-crt/</id>
    <published>2019-05-17T03:15:34.000Z</published>
    <updated>2019-05-09T17:47:30.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用扩展中国剩余定理解决线性同余方程。</p><h3 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h3><p>扩展中国剩余定理，顾名思义，是中国剩余定理的扩展，中国剩余定理可以解决模数互质的线性同余方程组问题，而扩展中国剩余定理可以进一步解决任意的线性同余方程组问题。因此可以认为扩展中国剩余定理基本可以取代中国剩余定理，当然，扩展中国剩余定理需要求n次扩展欧几里得，复杂度是O(NlogN)，而中国剩余定理只需要O(N)。</p><p>具体细节与思考写在代码之后，下面代码用于解决洛谷的模板题<a href="https://www.luogu.org/problemnew/show/P4777" target="_blank" rel="noopener">P4777</a>。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="keyword">long</span> <span class="keyword">long</span>&gt;</span><br><span class="line">struct extended_crt &#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">vector</span>&lt;T&gt; a;</span><br><span class="line">  <span class="built_in">vector</span>&lt;T&gt; m;</span><br><span class="line"></span><br><span class="line">  extended_crt(<span class="keyword">int</span> num) : n(num), a(n), m(n) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">ex_gcd</span><span class="params">(T a, T b, T* x, T* y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">      *x = <span class="number">1</span>;</span><br><span class="line">      *y = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    T res = ex_gcd(b, a % b, y, x);</span><br><span class="line">    *y -= *x * (a / b);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">quick_mul</span><span class="params">(T a, T b, T mod)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">      <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        res = (res + a) % mod;</span><br><span class="line">      &#125;</span><br><span class="line">      a = (a &lt;&lt; <span class="number">1</span>) % mod;</span><br><span class="line">      b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">ex_crt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T prod_m = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      T x, y;</span><br><span class="line">      T gcd = ex_gcd(prod_m, m[i], &amp;x, &amp;y);</span><br><span class="line">      T c = ((a[i] - res) % m[i] + m[i]) % m[i];</span><br><span class="line">      <span class="keyword">if</span> (c % gcd) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      T times = c / gcd, u = m[i] / gcd;</span><br><span class="line">      x = (x % u + u) % u;</span><br><span class="line">      x = quick_mul(x, times, u);</span><br><span class="line">      res += prod_m * x;</span><br><span class="line">      prod_m *= u;</span><br><span class="line">      res %= prod_m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  extended_crt&lt;&gt; crt(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;crt.m[i], &amp;crt.a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; crt.ex_crt() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>基本思路不难理解，可以参考洛谷上这道题的题解。下面说下一些点。</p><h3 id="long-long乘long-long取模"><a href="#long-long乘long-long取模" class="headerlink" title="long long乘long long取模"></a>long long乘long long取模</h3><p>高精是一种解法，不过不需要，可以联系快速幂的算法来解决（将乘法看作幂，那么加法就是快速幂中的乘法）。这样的好处是加法就基本不会溢出了（只需模数不大于最大值的一半），此时复杂度也只是log(long long) = 64。</p><p>见上面代码的quick_mul。</p><h3 id="二元一次方程求解"><a href="#二元一次方程求解" class="headerlink" title="二元一次方程求解"></a>二元一次方程求解</h3><p>之前写过一篇文章讲扩展欧几里得求逆元。这里遇到了其新的应用：解方程。</p><p>首先，令 gcd = gcd(a, b)，扩展欧几里得得到的是 ax + by = gcd 的解，那么方程 ax + by = c 只有在 c 是 gcd 倍数时才有（整数）解，ax + by = gcd 的解乘上 c / gcd 即为原方程的（一组）解 (x0, y0)，那么方程的所有解是什么呢，如果x = x0 + u * t，y = y0 - v * t，不难推出，u 为 b / gcd，v 为 a / gcd。当 u 为正整数时（充分地，a、b、c均为正整数），x 的最小正整数解为 (x mod u + u) mod u。</p><p>可写出代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="keyword">long</span> <span class="keyword">long</span>&gt;</span><br><span class="line"><span class="keyword">bool</span> solve_equation(T a, T b, T c, T* x, T* y, T* u = <span class="literal">nullptr</span>, T* v = <span class="literal">nullptr</span>) &#123;</span><br><span class="line">  T gcd = ex_gcd(a, b, x, y);</span><br><span class="line">  <span class="keyword">if</span> (c % gcd) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  T times = c / gcd;</span><br><span class="line">  *x *= times;</span><br><span class="line">  *y *= times;</span><br><span class="line">  <span class="keyword">if</span> (u) &#123;</span><br><span class="line">    *u = b / gcd;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (v) &#123;</span><br><span class="line">    *v = a / gcd;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，这段代码没有用在上面的代码中，因为<code>*x *= times;</code>这一步会爆long long，因此手动用上述的quick_mul实现了解方程。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;使用扩展中国剩余定理解决线性同余方程。&lt;/p&gt;
&lt;h3 id=&quot;中国剩余定理&quot;&gt;&lt;a href=&quot;#中国剩余定理&quot; class=&quot;headerlink&quot; title=&quot;中国剩余定理&quot;&gt;&lt;/a&gt;中国剩余定理&lt;/h3&gt;&lt;p&gt;扩展中国剩余定理，顾名思义，是中国剩余定理的扩展，中国剩余定理可以解决模数互质的线性同余方程组问题，而扩展中国剩余定理可以进一步解决任意的线性同余方程组问题。因此可以认为扩展中国剩余定理基本可以取代中国剩余定理，当然，扩展中国剩余定理需要求n次扩展欧几里得，复杂度是O(NlogN)，而中国剩余定理只需要O(N)。&lt;/p&gt;
&lt;p&gt;具体细节与思考写在代码之后，下面代码用于解决洛谷的模板题&lt;a href=&quot;https://www.luogu.org/problemnew/show/P4777&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;P4777&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="扩展中国剩余定理" scheme="http://tashi711.top/tags/%E6%89%A9%E5%B1%95%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    
      <category term="线性同余方程" scheme="http://tashi711.top/tags/%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>「拓扑排序算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/topological-sort/"/>
    <id>http://tashi711.top/programming/dsaa/topological-sort/</id>
    <published>2019-05-16T03:15:34.000Z</published>
    <updated>2019-05-08T15:46:38.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>有向图拓扑排序算法。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>本算法仅实现了最基本框架，可扩展以下几个方面：</p><p>1、加入判断无解情况（环还是不连通），目前都返回false。<br>2、控制输出顺序（例如字典序最小用priority_queue代替queue，不过复杂度会从O(M)变为O(M+NlogN)）。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TopologicalSort</span> &#123;</span></span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">res_t</span> = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> offset;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; adj;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; in_d;</span><br><span class="line"></span><br><span class="line">  TopologicalSort(<span class="keyword">int</span> v, <span class="keyword">int</span> os = <span class="number">1</span>) : n(v), offset(os), adj(v), in_d(v) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = e.first - offset, v = e.second - offset;</span><br><span class="line">    adj[u].push_back(v);</span><br><span class="line">    ++in_d[v];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&amp; es)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : es) &#123;</span><br><span class="line">      add_edge(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">topological</span><span class="params">(<span class="keyword">res_t</span>* res)</span> </span>&#123;</span><br><span class="line">    res-&gt;clear();</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (in_d[i] == <span class="number">0</span>) &#123;</span><br><span class="line">        q.push(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">      <span class="keyword">int</span> u = q.front();</span><br><span class="line">      q.pop();</span><br><span class="line">      res-&gt;push_back(u + offset);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (--in_d[v] == <span class="number">0</span>) &#123;</span><br><span class="line">          q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res-&gt;size() != n) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">output_res</span><span class="params">(<span class="keyword">const</span> <span class="keyword">res_t</span>&amp; res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k : res) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; k &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  TopologicalSort::<span class="keyword">res_t</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="function">TopologicalSort <span class="title">ts1</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">  ts1.init(&#123;&#123;<span class="number">2</span>, <span class="number">3</span>&#125;,&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,&#123;<span class="number">4</span>, <span class="number">1</span>&#125;,&#123;<span class="number">4</span>, <span class="number">3</span>&#125;&#125;);</span><br><span class="line">  <span class="keyword">if</span> (!ts1.topological(&amp;res)) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ts1.output_res(res);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">TopologicalSort <span class="title">ts2</span><span class="params">(<span class="number">4</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">  ts2.init(&#123;&#123;<span class="number">2</span>, <span class="number">3</span>&#125;,&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,&#123;<span class="number">4</span>, <span class="number">1</span>&#125;,&#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;);</span><br><span class="line">  <span class="keyword">if</span> (!ts2.topological(&amp;res)) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ts2.output_res(res);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">TopologicalSort <span class="title">ts3</span><span class="params">(<span class="number">4</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">  ts3.init(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,&#123;<span class="number">3</span>, <span class="number">0</span>&#125;,&#123;<span class="number">3</span>, <span class="number">2</span>&#125;&#125;);</span><br><span class="line">  <span class="keyword">if</span> (!ts3.topological(&amp;res)) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ts3.output_res(res);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;有向图拓扑排序算法。&lt;/p&gt;
&lt;h3 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;p&gt;本算法仅实现了最基本框架，可扩展以下几个方面：&lt;/p&gt;
&lt;p&gt;1、加入判断无解情况（环还是不连通），目前都返回false。&lt;br&gt;2、控制输出顺序（例如字典序最小用priority_queue代替queue，不过复杂度会从O(M)变为O(M+NlogN)）。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="图论" scheme="http://tashi711.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="拓扑排序" scheme="http://tashi711.top/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>「Kruskal算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/kruskal/"/>
    <id>http://tashi711.top/programming/dsaa/kruskal/</id>
    <published>2019-05-15T03:15:34.000Z</published>
    <updated>2019-05-07T16:06:36.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Kruskal算法解决最小生成树问题。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>本算法仅实现了最基本框架，可扩展以下几个方面：</p><p>1、返回构成最小生成树的边（或者其序号）。<br>2、加入连通性判断（关系到是否有解）。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Kruskal</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">DisjointSet</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> offset;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line"></span><br><span class="line">    DisjointSet(<span class="keyword">int</span> v, <span class="keyword">int</span> os = <span class="number">1</span>) : n(v), offset(os), p(v) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">path_compression</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> p[k] == k ? k : p[k] = path_compression(p[k]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> idx = k - offset;</span><br><span class="line">      <span class="keyword">int</span> res = path_compression(idx);</span><br><span class="line">      <span class="keyword">return</span> res + offset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">union_root</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> x = u - offset;</span><br><span class="line">      <span class="keyword">int</span> y = v - offset;</span><br><span class="line">      p[y] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">union_any</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> x = find(u);</span><br><span class="line">      <span class="keyword">int</span> y = find(v);</span><br><span class="line">      union_root(x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output_roots</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; find(i + offset) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> offset;</span><br><span class="line">  <span class="built_in">vector</span>&lt;tuple&lt;T, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; edges;</span><br><span class="line">  DisjointSet ds;</span><br><span class="line"></span><br><span class="line">  Kruskal(<span class="keyword">int</span> v, <span class="keyword">int</span> os = <span class="number">1</span>) : n(v), offset(os), ds(v, <span class="number">0</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">const</span> tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, T&gt;&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    T w;</span><br><span class="line">    tie(u, v, w) = e;</span><br><span class="line">    u -= offset;</span><br><span class="line">    v -= offset;</span><br><span class="line">    edges.emplace_back(w, u, v);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, T&gt;&gt;&amp; es)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : es) &#123;</span><br><span class="line">      add_edge(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">minimum_spanning_tree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">0</span>;</span><br><span class="line">    sort(edges.begin(), edges.end());</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : edges) &#123;</span><br><span class="line">      <span class="keyword">int</span> u, v;</span><br><span class="line">      T w;</span><br><span class="line">      tie(w, u, v) = e;</span><br><span class="line">      <span class="keyword">int</span> x = ds.find(u), y = ds.find(v);</span><br><span class="line">      <span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">        res += w;</span><br><span class="line">        ds.union_root(x, y);</span><br><span class="line">        <span class="keyword">if</span> (++cnt == n) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Kruskal&lt;<span class="keyword">double</span>&gt; p1(<span class="number">3</span>);</span><br><span class="line">  p1.init(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1.1</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1.05</span>&#125;,&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">1.15</span>&#125;&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; p1.minimum_spanning_tree() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  Kruskal&lt;<span class="keyword">int</span>&gt; p2(<span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">  p2.init(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>&#125;,&#123;<span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>&#125;,&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>&#125;,&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>&#125;&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; p2.minimum_spanning_tree() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Kruskal算法解决最小生成树问题。&lt;/p&gt;
&lt;h3 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;p&gt;本算法仅实现了最基本框架，可扩展以下几个方面：&lt;/p&gt;
&lt;p&gt;1、返回构成最小生成树的边（或者其序号）。&lt;br&gt;2、加入连通性判断（关系到是否有解）。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Kruskal" scheme="http://tashi711.top/tags/Kruskal/"/>
    
      <category term="最小生成树" scheme="http://tashi711.top/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>「并查集」模板</title>
    <link href="http://tashi711.top/programming/dsaa/disjoint-set/"/>
    <id>http://tashi711.top/programming/dsaa/disjoint-set/</id>
    <published>2019-05-14T03:15:34.000Z</published>
    <updated>2019-05-06T15:44:40.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>并查集模板。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>1、实现偏移（0、1开始甚至负数）。<br>2、路径压缩。<br>3、对任意两个点合并和对两个根合并。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DisjointSet</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> offset;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line"></span><br><span class="line">  DisjointSet(<span class="keyword">int</span> v, <span class="keyword">int</span> os = <span class="number">1</span>) : n(v), offset(os), p(v) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      p[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">path_compression</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p[k] == k ? k : p[k] = path_compression(p[k]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> idx = k - offset;</span><br><span class="line">    <span class="keyword">int</span> res = path_compression(idx);</span><br><span class="line">    <span class="keyword">return</span> res + offset;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">union_root</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = u - offset;</span><br><span class="line">    <span class="keyword">int</span> y = v - offset;</span><br><span class="line">    p[y] = x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">union_any</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = find(u);</span><br><span class="line">    <span class="keyword">int</span> y = find(v);</span><br><span class="line">    union_root(x, y);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">output_roots</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; find(i + offset) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"test 1:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="function">DisjointSet <span class="title">ds1</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">  ds1.output_roots();</span><br><span class="line">  ds1.union_any(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  ds1.union_any(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">  ds1.output_roots();</span><br><span class="line">  <span class="keyword">int</span> r1 = ds1.find(<span class="number">1</span>), r2 = ds1.find(<span class="number">4</span>);</span><br><span class="line">  ds1.union_root(r1, r2);</span><br><span class="line">  ds1.output_roots();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"test 2:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="function">DisjointSet <span class="title">ds2</span><span class="params">(<span class="number">5</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">  ds2.output_roots();</span><br><span class="line">  ds2.union_any(<span class="number">-1</span>, <span class="number">3</span>);</span><br><span class="line">  ds2.union_any(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  ds2.output_roots();</span><br><span class="line">  <span class="keyword">int</span> r3 = ds2.find(<span class="number">1</span>), r4 = ds2.find(<span class="number">0</span>);</span><br><span class="line">  ds2.union_root(r4, r3);</span><br><span class="line">  ds2.output_roots();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;并查集模板。&lt;/p&gt;
&lt;h3 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h3&gt;&lt;p&gt;1、实现偏移（0、1开始甚至负数）。&lt;br&gt;2、路径压缩。&lt;br&gt;3、对任意两个点合并和对两个根合并。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="并查集" scheme="http://tashi711.top/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>「Prim算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/prim/"/>
    <id>http://tashi711.top/programming/dsaa/prim/</id>
    <published>2019-05-13T03:15:34.000Z</published>
    <updated>2019-05-06T15:43:37.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Prim算法解决最小生成树问题。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>本算法仅实现了最基本框架，可扩展以下几个方面：</p><p>1、返回构成最小生成树的边（或者其序号）。<br>2、用堆优化（类似于Dijkstra算法的堆优化思想），可将复杂度从O(N)降到O(M+NlogN)。<br>3、加入连通性判断（关系到是否有解）。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Prim</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> offset;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, T&gt;&gt;&gt; adj;</span><br><span class="line"></span><br><span class="line">  Prim(<span class="keyword">int</span> v, <span class="keyword">int</span> os = <span class="number">1</span>) : n(v), offset(os), adj(v) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">const</span> tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, T&gt;&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    T w;</span><br><span class="line">    tie(u, v, w) = e;</span><br><span class="line">    u -= offset;</span><br><span class="line">    v -= offset;</span><br><span class="line">    adj[u].emplace_back(v, w);</span><br><span class="line">    adj[v].emplace_back(u, w);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, T&gt;&gt;&amp; es)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : es) &#123;</span><br><span class="line">      add_edge(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">minimum_spanning_tree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;T&gt; d(n, numeric_limits&lt;T&gt;::max());</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vst(n, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> cnt = <span class="number">1</span>; cnt &lt; n; ++cnt) &#123;</span><br><span class="line">      vst[u] = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : adj[u]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = p.first;</span><br><span class="line">        T w = p.second;</span><br><span class="line">        d[v] = min(d[v], w);</span><br><span class="line">      &#125;</span><br><span class="line">      T min_d = numeric_limits&lt;T&gt;::max();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vst[i] &amp;&amp; min_d &gt; d[i]) &#123;</span><br><span class="line">          min_d = d[i];</span><br><span class="line">          u = i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      res += d[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Prim&lt;<span class="keyword">double</span>&gt; p1(<span class="number">3</span>);</span><br><span class="line">  p1.init(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1.1</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1.05</span>&#125;,&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">1.15</span>&#125;&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; p1.minimum_spanning_tree() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  Prim&lt;<span class="keyword">int</span>&gt; p2(<span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">  p2.init(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>&#125;,&#123;<span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>&#125;,&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>&#125;,&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>&#125;&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; p2.minimum_spanning_tree() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Prim算法解决最小生成树问题。&lt;/p&gt;
&lt;h3 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;p&gt;本算法仅实现了最基本框架，可扩展以下几个方面：&lt;/p&gt;
&lt;p&gt;1、返回构成最小生成树的边（或者其序号）。&lt;br&gt;2、用堆优化（类似于Dijkstra算法的堆优化思想），可将复杂度从O(N)降到O(M+NlogN)。&lt;br&gt;3、加入连通性判断（关系到是否有解）。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="最小生成树" scheme="http://tashi711.top/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="Prim" scheme="http://tashi711.top/tags/Prim/"/>
    
  </entry>
  
  <entry>
    <title>「欧拉路径算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/eulerian-path/"/>
    <id>http://tashi711.top/programming/dsaa/eulerian-path/</id>
    <published>2019-05-12T03:15:34.000Z</published>
    <updated>2019-05-06T14:36:07.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>欧拉路径算法</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1、可处理重边、自环<br>2、若加入顺序合理，可控制输出顺序。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EulerianPath</span> &#123;</span></span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">res_t</span> = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> offset;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; adj;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; degree;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vst;</span><br><span class="line"></span><br><span class="line">  EulerianPath(<span class="keyword">int</span> v, <span class="keyword">int</span> os = <span class="number">1</span>) : n(v), offset(os), adj(v), degree(v) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cur = m++;</span><br><span class="line">    <span class="keyword">int</span> u = e.first - offset;</span><br><span class="line">    <span class="keyword">int</span> v = e.second - offset;</span><br><span class="line">    adj[u].emplace_back(v, cur);</span><br><span class="line">    adj[v].emplace_back(u, cur);</span><br><span class="line">    ++degree[u];</span><br><span class="line">    ++degree[v];</span><br><span class="line">    vst.push_back(<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&amp; es)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : es) &#123;</span><br><span class="line">      add_edge(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">res_t</span>* res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : adj[u]) &#123;</span><br><span class="line">      <span class="keyword">int</span> v = p.first, e = p.second;</span><br><span class="line">      <span class="keyword">if</span> (!vst[e]) &#123;</span><br><span class="line">        vst[e] = <span class="literal">true</span>;</span><br><span class="line">        dfs(v, res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res-&gt;push_back(u + offset);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">eulerian</span><span class="params">(<span class="keyword">res_t</span>* res)</span> </span>&#123;</span><br><span class="line">    res-&gt;clear();</span><br><span class="line">    <span class="keyword">int</span> cnt_odd_degree = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (degree[i] &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        ++cnt_odd_degree;</span><br><span class="line">        <span class="keyword">if</span> (cnt_odd_degree == <span class="number">1</span>) &#123;</span><br><span class="line">          start = i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt_odd_degree &gt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(start, res);</span><br><span class="line">    reverse(res-&gt;begin(), res-&gt;end());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">output_res</span><span class="params">(<span class="keyword">const</span> <span class="keyword">res_t</span>&amp; res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> k : res) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; k &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  EulerianPath::<span class="keyword">res_t</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="function">EulerianPath <span class="title">ep1</span><span class="params">(<span class="number">7</span>)</span></span>;</span><br><span class="line">  ep1.init(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>&#125;,&#123;<span class="number">3</span>, <span class="number">4</span>&#125;,&#123;<span class="number">4</span>, <span class="number">2</span>&#125;,&#123;<span class="number">4</span>, <span class="number">5</span>&#125;,&#123;<span class="number">2</span>, <span class="number">5</span>&#125;,&#123;<span class="number">5</span>, <span class="number">6</span>&#125;,&#123;<span class="number">5</span>, <span class="number">7</span>&#125;,&#123;<span class="number">4</span>, <span class="number">6</span>&#125;&#125;);</span><br><span class="line">  <span class="keyword">if</span> (ep1.eulerian(&amp;res)) &#123;</span><br><span class="line">    ep1.output_res(res);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">EulerianPath <span class="title">ep2</span><span class="params">(<span class="number">4</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">  ep2.init(&#123;&#123;<span class="number">1</span>, <span class="number">3</span>&#125;,&#123;<span class="number">2</span>, <span class="number">1</span>&#125;,&#123;<span class="number">3</span>, <span class="number">0</span>&#125;&#125;);</span><br><span class="line">  <span class="keyword">if</span> (ep2.eulerian(&amp;res)) &#123;</span><br><span class="line">    ep2.output_res(res);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">EulerianPath <span class="title">ep3</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line">  ep3.init(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>&#125;,&#123;<span class="number">3</span>, <span class="number">4</span>&#125;,&#123;<span class="number">4</span>, <span class="number">1</span>&#125;,&#123;<span class="number">1</span>, <span class="number">3</span>&#125;,&#123;<span class="number">2</span>, <span class="number">4</span>&#125;&#125;);</span><br><span class="line">  <span class="keyword">if</span> (ep3.eulerian(&amp;res)) &#123;</span><br><span class="line">    ep3.output_res(res);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;欧拉路径算法&lt;/p&gt;
&lt;h3 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;p&gt;1、可处理重边、自环&lt;br&gt;2、若加入顺序合理，可控制输出顺序。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="欧拉路径" scheme="http://tashi711.top/tags/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/"/>
    
      <category term="图论" scheme="http://tashi711.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>「组合数学相关算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/combinatorial_math/"/>
    <id>http://tashi711.top/programming/dsaa/combinatorial_math/</id>
    <published>2019-05-11T03:15:34.000Z</published>
    <updated>2019-05-04T17:49:22.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>组合数学相关算法</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>1、组合<br>2、排列<br>3、集合拆分<br>4、正整数拆分</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CombinatorialMath</span> &#123;</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> T <span class="title">combination</span><span class="params">(T n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    k = min(k, n - k);</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n, j = <span class="number">1</span>; j &lt;= k; --i, ++j) &#123;</span><br><span class="line">      res = res * i / j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> T <span class="title">permutation</span><span class="params">(T n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; n - k; --i) &#123;</span><br><span class="line">      res *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> T <span class="title">divide_set</span><span class="params">(T n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == k || k == <span class="number">1</span> || (n == <span class="number">0</span> &amp;&amp; k == <span class="number">0</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; k || n == <span class="number">0</span> || k == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> divide_set(n - <span class="number">1</span>, k - <span class="number">1</span>) + k * divide_set(n - <span class="number">1</span>, k);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> T <span class="title">divide_integer</span><span class="params">(T n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; k || k == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span> || k == n - <span class="number">1</span> || n == k) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> n / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> divide_integer(n - <span class="number">1</span>, k - <span class="number">1</span>) + divide_integer(n - k, k);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"test combination:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::combination(<span class="number">4</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::combination(<span class="number">4</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::combination(<span class="number">4</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::combination(<span class="number">4</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::combination(<span class="number">4</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"test permutation:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::permutation(<span class="number">4</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::permutation(<span class="number">4</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::permutation(<span class="number">4</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::permutation(<span class="number">4</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::permutation(<span class="number">4</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"test divide_set:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_set(<span class="number">4</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_set(<span class="number">4</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_set(<span class="number">4</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_set(<span class="number">4</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_set(<span class="number">4</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"test divide_integer:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_integer(<span class="number">4</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_integer(<span class="number">4</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_integer(<span class="number">4</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_integer(<span class="number">4</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; CombinatorialMath::divide_integer(<span class="number">4</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;组合数学相关算法&lt;/p&gt;
&lt;h3 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h3&gt;&lt;p&gt;1、组合&lt;br&gt;2、排列&lt;br&gt;3、集合拆分&lt;br&gt;4、正整数拆分&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="组合数学" scheme="http://tashi711.top/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>「快速幂算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/quick-power/"/>
    <id>http://tashi711.top/programming/dsaa/quick-power/</id>
    <published>2019-05-10T03:15:34.000Z</published>
    <updated>2019-05-04T08:52:51.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>简单的快速幂，注意溢出（long long乘long long之类的）可能要用高精。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QuickPower</span> &#123;</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> P&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> T <span class="title">power</span><span class="params">(T a, P n)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    T t = a;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">      <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        res *= t;</span><br><span class="line">      &#125;</span><br><span class="line">      t *= t;</span><br><span class="line">      n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> P&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> T <span class="title">power_mod</span><span class="params">(T a, P n, T m)</span> </span>&#123;</span><br><span class="line">    T res = <span class="number">1</span>;</span><br><span class="line">    T t = a;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">      <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        res = res * t % m;</span><br><span class="line">      &#125;</span><br><span class="line">      t = t * t % m;</span><br><span class="line">      n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; QuickPower::power(<span class="number">2</span>, <span class="number">5</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; QuickPower::power(<span class="number">5</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; QuickPower::power_mod(<span class="number">3</span>, <span class="number">3</span>, <span class="number">8</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; QuickPower::power_mod(<span class="number">123456789L</span>L, <span class="number">1234567890123456789L</span>L,</span><br><span class="line">    <span class="number">987654321L</span>L) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; QuickPower::power(<span class="number">2</span>, <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; QuickPower::power_mod(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10000</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;简单的快速幂，注意溢出（long long乘long long之类的）可能要用高精。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="快速幂" scheme="http://tashi711.top/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>「矩阵运算相关」模板</title>
    <link href="http://tashi711.top/programming/dsaa/matrix/"/>
    <id>http://tashi711.top/programming/dsaa/matrix/</id>
    <published>2019-05-09T03:15:34.000Z</published>
    <updated>2019-05-04T06:59:12.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>矩阵运算相关模板，持续更新ing…</p><h3 id="目前功能"><a href="#目前功能" class="headerlink" title="目前功能"></a>目前功能</h3><p>局部：<br>1、根据vector的vector构造并判断合理性<br>2、乘法</p><p>全局：<br>1、输出流</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;T&gt;&gt; a;</span><br><span class="line"></span><br><span class="line">  Matrix(<span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> w = <span class="number">0</span>) : n(l), m(w), a(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m, <span class="number">0</span>)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  Matrix(<span class="keyword">int</span> l, <span class="keyword">int</span> w, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;T&gt;&gt;&amp;&amp; vec) : n(l), m(w) &#123;</span><br><span class="line">    <span class="keyword">int</span> u = vec.size();</span><br><span class="line">    <span class="keyword">if</span> (u == n) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; row : vec) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = row.size();</span><br><span class="line">        <span class="keyword">if</span> (v != m) &#123;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; <span class="string">"Matrix(): assign row of "</span> &lt;&lt; v &lt;&lt; <span class="string">" to "</span> &lt;&lt; m &lt;&lt; <span class="string">"."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">          n = <span class="number">0</span>;</span><br><span class="line">          m = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"Matrix(): assign "</span> &lt;&lt; u &lt;&lt; <span class="string">" * ? to "</span> &lt;&lt; n &lt;&lt; <span class="string">" * ?."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      n = <span class="number">0</span>;</span><br><span class="line">      m = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    a = vec;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> Matrix&amp; r) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (m != r.n) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; n &lt;&lt; <span class="string">", "</span> &lt;&lt; m &lt;&lt; <span class="string">") * ("</span> &lt;&lt; r.n &lt;&lt; <span class="string">", "</span> &lt;&lt; r.m &lt;&lt; <span class="string">")"</span></span><br><span class="line">        &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> Matrix();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Matrix <span class="title">res</span><span class="params">(n, r.m)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; r.m; ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; ++k) &#123;</span><br><span class="line">          res.a[i][j] += a[i][k] * r.a[k][j];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">to_str</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss &lt;&lt; n &lt;&lt; <span class="string">" * "</span> &lt;&lt; m &lt;&lt; <span class="string">":\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">        ss &lt;&lt; a[i][j] &lt;&lt; (j == m - <span class="number">1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ss.str();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> Matrix&lt;T&gt;&amp; r) &#123;</span><br><span class="line">  out &lt;&lt; r.to_str();</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Matrix&lt;<span class="keyword">int</span>&gt; a(<span class="number">1</span>, <span class="number">2</span>, &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;&#125;), b(<span class="number">2</span>, <span class="number">1</span>, &#123;&#123;<span class="number">3</span>&#125;,&#123;<span class="number">4</span>&#125;&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; a * b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b * a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  Matrix&lt;<span class="keyword">int</span>&gt; w1(<span class="number">2</span>, <span class="number">2</span>, &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; w1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  Matrix&lt;<span class="keyword">int</span>&gt; w2(<span class="number">1</span>, <span class="number">1</span>, &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; w2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  Matrix&lt;<span class="keyword">int</span>&gt; c(<span class="number">1</span>, <span class="number">2</span>, &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;&#125;);</span><br><span class="line">  Matrix&lt;<span class="keyword">int</span>&gt; d(<span class="number">3</span>, <span class="number">1</span>, &#123;&#123;<span class="number">3</span>&#125;,&#123;<span class="number">4</span>&#125;,&#123;<span class="number">5</span>&#125;&#125;);</span><br><span class="line">  Matrix&lt;<span class="keyword">int</span>&gt; w3 = c * d;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; w3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;矩阵运算相关模板，持续更新ing…&lt;/p&gt;
&lt;h3 id=&quot;目前功能&quot;&gt;&lt;a href=&quot;#目前功能&quot; class=&quot;headerlink&quot; title=&quot;目前功能&quot;&gt;&lt;/a&gt;目前功能&lt;/h3&gt;&lt;p&gt;局部：&lt;br&gt;1、根据vector的vector构造并判断合理性&lt;br&gt;2、乘法&lt;/p&gt;
&lt;p&gt;全局：&lt;br&gt;1、输出流&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="矩阵运算" scheme="http://tashi711.top/tags/%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>「ZOJ 3933 - Team Formation」解题报告</title>
    <link href="http://tashi711.top/programming/reports/others/zoj-3933/"/>
    <id>http://tashi711.top/programming/reports/others/zoj-3933/</id>
    <published>2019-05-08T16:11:04.000Z</published>
    <updated>2019-05-03T16:54:13.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=5542" target="_blank" rel="noopener">ZOJ 3933 - Team Formation</a></li><li>来源：The 16th Zhejiang University Programming Contest</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>其实应该算是一道比较裸的费用流问题，当时在线赛的时候用费用流A掉了，这里用带权二分图匹配来做。<br>为了保证最大匹配，每个匹配的分数要高过性别带来的最大影响，这里设为1w。然后每个匹配外加女生数量的分数。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度均为$O(N^3)$。<br>空间复杂度均为$O(N^2)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WeightedBGMatching</span> &#123;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> kUnmatched = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  <span class="keyword">bool</span> reversed;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;T&gt;&gt; adj;</span><br><span class="line">  <span class="keyword">int</span> offset_x, offset_y;</span><br><span class="line">  <span class="built_in">vector</span>&lt;T&gt; lx, ly;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; match_x, match_y;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vst_x, vst_y;</span><br><span class="line">  T slack;</span><br><span class="line"></span><br><span class="line">  WeightedBGMatching(<span class="keyword">int</span> num_x, <span class="keyword">int</span> num_y, <span class="keyword">int</span> osx = <span class="number">1</span>, <span class="keyword">int</span> osy = <span class="number">1</span>)</span><br><span class="line">    : offset_x(osx), offset_y(osy) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num_x &lt;= num_y) &#123;</span><br><span class="line">      reversed = <span class="literal">false</span>;</span><br><span class="line">      n = num_x;</span><br><span class="line">      m = num_y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reversed = <span class="literal">true</span>;</span><br><span class="line">      n = num_y;</span><br><span class="line">      m = num_x;</span><br><span class="line">    &#125;</span><br><span class="line">    adj.assign(n, <span class="built_in">vector</span>&lt;T&gt;(m, <span class="number">0</span>));</span><br><span class="line">    lx.assign(n, numeric_limits&lt;T&gt;::lowest());</span><br><span class="line">    ly.assign(m, <span class="number">0</span>);</span><br><span class="line">    match_x.assign(n, kUnmatched);</span><br><span class="line">    match_y.assign(m, kUnmatched);</span><br><span class="line">    vst_x.resize(n);</span><br><span class="line">    vst_y.resize(m);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">const</span> tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, T&gt;&amp; t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    T w;</span><br><span class="line">    tie(u, v, w) = t;</span><br><span class="line">    u -= offset_x;</span><br><span class="line">    v -= offset_y;</span><br><span class="line">    <span class="keyword">if</span> (reversed) &#123;</span><br><span class="line">      swap(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    adj[u][v] = w;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, T&gt;&gt;&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; t : e) &#123;</span><br><span class="line">      add_edge(t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    vst_x[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; m; ++v) &#123;</span><br><span class="line">      <span class="keyword">if</span> (vst_y[v]) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      T gap = lx[u] + ly[v] - adj[u][v];</span><br><span class="line">      <span class="keyword">if</span> (gap == <span class="number">0</span>) &#123;</span><br><span class="line">        vst_y[v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (match_y[v] == kUnmatched || dfs(match_y[v])) &#123;</span><br><span class="line">          match_x[u] = v;</span><br><span class="line">          match_y[v] = u;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        slack = min(slack, gap);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">km</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;* res)</span> </span>&#123;</span><br><span class="line">    res-&gt;clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      lx[i] = numeric_limits&lt;T&gt;::lowest();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">        lx[i] = max(lx[i], adj[i][j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        vst_x.assign(n, <span class="literal">false</span>);</span><br><span class="line">        vst_y.assign(m, <span class="literal">false</span>);</span><br><span class="line">        slack = numeric_limits&lt;T&gt;::max();</span><br><span class="line">        <span class="keyword">if</span> (dfs(i)) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (slack &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible: "</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; slack &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">          <span class="keyword">if</span> (vst_x[j]) &#123;</span><br><span class="line">            lx[j] -= slack;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; ++j) &#123;</span><br><span class="line">          <span class="keyword">if</span> (vst_y[j]) &#123;</span><br><span class="line">            ly[j] += slack;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    T ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      ans += adj[i][match_x[i]];</span><br><span class="line">      <span class="keyword">int</span> u = i, v = match_x[i];</span><br><span class="line">      <span class="keyword">if</span> (reversed) &#123;</span><br><span class="line">        swap(u, v);</span><br><span class="line">      &#125;</span><br><span class="line">      res-&gt;emplace_back(u + offset_x, v + offset_y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">output_matching</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&amp; res)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Total "</span> &lt;&lt; res.size() &lt;&lt; <span class="string">" matching(s):"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : res) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; p.first &lt;&lt; <span class="string">", "</span> &lt;&lt; p.second &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">string</span> s1, s2;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; nw(n, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g1, g2;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> m, u, i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;u);</span><br><span class="line">      nw[i][u - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s1[i] == <span class="string">'0'</span>) &#123;</span><br><span class="line">      g1.push_back(i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      g2.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s2[i] == <span class="string">'0'</span>) &#123;</span><br><span class="line">      s[i] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      s[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> n1 = g1.size(), n2 = g2.size();</span><br><span class="line">  WeightedBGMatching&lt;<span class="keyword">int</span>&gt; wbgm(n1, n2, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">int</span> score = <span class="number">10000</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1; ++i) &#123;</span><br><span class="line">    <span class="keyword">int</span> u = g1[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n2; ++j) &#123;</span><br><span class="line">      <span class="keyword">int</span> v = g2[j];</span><br><span class="line">      <span class="keyword">if</span> (!nw[u][v]) &#123;</span><br><span class="line">        wbgm.add_edge(make_tuple(i, j, score + s[u] + s[v]));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">  <span class="keyword">int</span> total = wbgm.km(&amp;res);</span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : res) &#123;</span><br><span class="line">    <span class="keyword">int</span> u = g1[p.first], v = g2[p.second];</span><br><span class="line">    <span class="keyword">if</span> (!nw[u][v]) &#123;</span><br><span class="line">      ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="string">' '</span> &lt;&lt; total % score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : res) &#123;</span><br><span class="line">    <span class="keyword">int</span> u = g1[p.first], v = g2[p.second];</span><br><span class="line">    <span class="keyword">if</span> (!nw[u][v]) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, u + <span class="number">1</span>, v + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> t;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">  <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">    solve();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=5542&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ZOJ 3933 - Team Formation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：The 16th Zhejiang University Programming Contest&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;其实应该算是一道比较裸的费用流问题，当时在线赛的时候用费用流A掉了，这里用带权二分图匹配来做。&lt;br&gt;为了保证最大匹配，每个匹配的分数要高过性别带来的最大影响，这里设为1w。然后每个匹配外加女生数量的分数。&lt;/p&gt;
&lt;h3 id=&quot;复杂度分析&quot;&gt;&lt;a href=&quot;#复杂度分析&quot; class=&quot;headerlink&quot; title=&quot;复杂度分析&quot;&gt;&lt;/a&gt;复杂度分析&lt;/h3&gt;&lt;p&gt;时间复杂度均为$O(N^3)$。&lt;br&gt;空间复杂度均为$O(N^2)$。&lt;/p&gt;
&lt;h2 id=&quot;AC代码（C-）&quot;&gt;&lt;a href=&quot;#AC代码（C-）&quot; class=&quot;headerlink&quot; title=&quot;AC代码（C++）&quot;&gt;&lt;/a&gt;AC代码（C++）&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="其他" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="二分图匹配" scheme="http://tashi711.top/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    
      <category term="KM算法" scheme="http://tashi711.top/tags/KM%E7%AE%97%E6%B3%95/"/>
    
      <category term="费用流" scheme="http://tashi711.top/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>「KM算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/km/"/>
    <id>http://tashi711.top/programming/dsaa/km/</id>
    <published>2019-05-08T03:15:34.000Z</published>
    <updated>2019-05-06T15:01:16.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>带权二分图匹配，KM算法</p><h3 id="算法细节"><a href="#算法细节" class="headerlink" title="算法细节"></a>算法细节</h3><p>1、下面实现的是最大权，最小权直接初始化负权值即可。<br>2、x部、y部不用数量相同，下面会自动交换x部更小（KM算法本身在x部不超过y部时正确）。<br>3、可调x部、y部初始序号（offset参数传入，0、1，或者考虑共不共用等）。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WeightedBGMatching</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> kUnmatched = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">res_t</span> = <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  <span class="keyword">bool</span> reversed;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;T&gt;&gt; adj;</span><br><span class="line">  <span class="keyword">int</span> offset_x, offset_y;</span><br><span class="line">  <span class="built_in">vector</span>&lt;T&gt; lx, ly;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; match_x, match_y;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vst_x, vst_y;</span><br><span class="line">  T slack;</span><br><span class="line"></span><br><span class="line">  WeightedBGMatching(<span class="keyword">int</span> num_x, <span class="keyword">int</span> num_y, <span class="keyword">int</span> osx = <span class="number">1</span>, <span class="keyword">int</span> osy = <span class="number">1</span>)</span><br><span class="line">    : offset_x(osx), offset_y(osy) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num_x &lt;= num_y) &#123;</span><br><span class="line">      reversed = <span class="literal">false</span>;</span><br><span class="line">      n = num_x;</span><br><span class="line">      m = num_y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reversed = <span class="literal">true</span>;</span><br><span class="line">      n = num_y;</span><br><span class="line">      m = num_x;</span><br><span class="line">    &#125;</span><br><span class="line">    adj.assign(n, <span class="built_in">vector</span>&lt;T&gt;(m, <span class="number">0</span>));</span><br><span class="line">    lx.assign(n, numeric_limits&lt;T&gt;::lowest());</span><br><span class="line">    ly.assign(m, <span class="number">0</span>);</span><br><span class="line">    match_x.assign(n, kUnmatched);</span><br><span class="line">    match_y.assign(m, kUnmatched);</span><br><span class="line">    vst_x.resize(n);</span><br><span class="line">    vst_y.resize(m);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">const</span> tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, T&gt;&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    T w;</span><br><span class="line">    tie(u, v, w) = e;</span><br><span class="line">    u -= offset_x;</span><br><span class="line">    v -= offset_y;</span><br><span class="line">    <span class="keyword">if</span> (reversed) &#123;</span><br><span class="line">      swap(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    adj[u][v] = w;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, T&gt;&gt;&amp; es)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : es) &#123;</span><br><span class="line">      add_edge(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    vst_x[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; m; ++v) &#123;</span><br><span class="line">      <span class="keyword">if</span> (vst_y[v]) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      T gap = lx[u] + ly[v] - adj[u][v];</span><br><span class="line">      <span class="keyword">if</span> (gap == <span class="number">0</span>) &#123;</span><br><span class="line">        vst_y[v] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (match_y[v] == kUnmatched || dfs(match_y[v])) &#123;</span><br><span class="line">          match_x[u] = v;</span><br><span class="line">          match_y[v] = u;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        slack = min(slack, gap);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">km</span><span class="params">(<span class="keyword">res_t</span>* res)</span> </span>&#123;</span><br><span class="line">    res-&gt;clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      lx[i] = numeric_limits&lt;T&gt;::lowest();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">        lx[i] = max(lx[i], adj[i][j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        vst_x.assign(n, <span class="literal">false</span>);</span><br><span class="line">        vst_y.assign(m, <span class="literal">false</span>);</span><br><span class="line">        slack = numeric_limits&lt;T&gt;::max();</span><br><span class="line">        <span class="keyword">if</span> (dfs(i)) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (slack &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible: "</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; slack &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">          <span class="keyword">if</span> (vst_x[j]) &#123;</span><br><span class="line">            lx[j] -= slack;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m; ++j) &#123;</span><br><span class="line">          <span class="keyword">if</span> (vst_y[j]) &#123;</span><br><span class="line">            ly[j] += slack;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    T ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      ans += adj[i][match_x[i]];</span><br><span class="line">      <span class="keyword">int</span> u = i, v = match_x[i];</span><br><span class="line">      <span class="keyword">if</span> (reversed) &#123;</span><br><span class="line">        swap(u, v);</span><br><span class="line">      &#125;</span><br><span class="line">      res-&gt;emplace_back(u + offset_x, v + offset_y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">output_matching</span><span class="params">(<span class="keyword">const</span> <span class="keyword">res_t</span>&amp; res)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Total "</span> &lt;&lt; res.size() &lt;&lt; <span class="string">" matching(s):"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : res) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; p.first &lt;&lt; <span class="string">", "</span> &lt;&lt; p.second &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">  WeightedBGMatching&lt;<span class="keyword">double</span>&gt; bgm1(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">  bgm1.init(&#123;&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1.1</span>&#125;,&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">1.2</span>&#125;,&#123;<span class="number">2</span>, <span class="number">2</span>, <span class="number">1.4</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1.3</span>&#125;&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; bgm1.km(&amp;res) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  bgm1.output_matching(res);</span><br><span class="line"></span><br><span class="line">  WeightedBGMatching&lt;<span class="keyword">int</span>&gt; bgm2(<span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">  bgm2.init(&#123;&#123;<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>&#125;,&#123;<span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>&#125;,&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>&#125;,&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>&#125;&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; bgm2.km(&amp;res) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  bgm2.output_matching(res);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> large_x = <span class="number">300</span>, large_y = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">  WeightedBGMatching&lt;<span class="keyword">double</span>&gt; bgm3(large_x, large_y);</span><br><span class="line">  <span class="function">default_random_engine <span class="title">generator1</span><span class="params">(<span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;(</span></span></span><br><span class="line">    chrono::system_clock::now().time_since_epoch().count()));</span><br><span class="line">  uniform_real_distribution&lt;<span class="keyword">double</span>&gt; distribution1(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= large_x; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= large_y; ++j) &#123;</span><br><span class="line">      bgm3.add_edge(&#123;i, j, distribution1(generator1)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; bgm3.km(&amp;res) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  bgm3.output_matching(res);</span><br><span class="line"></span><br><span class="line">  WeightedBGMatching&lt;<span class="keyword">int</span>&gt; bgm4(large_y, large_x);</span><br><span class="line">  <span class="function">default_random_engine <span class="title">generator2</span><span class="params">(<span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;(</span></span></span><br><span class="line">    chrono::system_clock::now().time_since_epoch().count()));</span><br><span class="line">  uniform_int_distribution&lt;<span class="keyword">int</span>&gt; distribution2(<span class="number">-10000</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= large_y; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= large_x; ++j) &#123;</span><br><span class="line">      bgm4.add_edge(&#123;i, j, distribution2(generator2)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; bgm4.km(&amp;res) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  bgm4.output_matching(res);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;带权二分图匹配，KM算法&lt;/p&gt;
&lt;h3 id=&quot;算法细节&quot;&gt;&lt;a href=&quot;#算法细节&quot; class=&quot;headerlink&quot; title=&quot;算法细节&quot;&gt;&lt;/a&gt;算法细节&lt;/h3&gt;&lt;p&gt;1、下面实现的是最大权，最小权直接初始化负权值即可。&lt;br&gt;2、x部、y部不用数量相同，下面会自动交换x部更小（KM算法本身在x部不超过y部时正确）。&lt;br&gt;3、可调x部、y部初始序号（offset参数传入，0、1，或者考虑共不共用等）。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="二分图匹配" scheme="http://tashi711.top/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    
      <category term="KM算法" scheme="http://tashi711.top/tags/KM%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>「匈牙利算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/hungarian/"/>
    <id>http://tashi711.top/programming/dsaa/hungarian/</id>
    <published>2019-05-07T03:15:34.000Z</published>
    <updated>2019-05-03T17:43:37.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>之前写过一篇文章介绍二分图匹配匈牙利算法的细节，此处给出模板。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1、offset调整序号开始的位置（0、1，或者x部与y部序号共不共用等）<br>2、可以通过dfs顺序控制多个结果时的返回（越小的匹配越小或者越大）<br>3、复杂度是O(NM)，N为x部点数，M为边数，因此交换x部与y部让x部更少。</p><h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BipartiteGraphMatching</span> &#123;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> kUnmatched = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">res_t</span> = <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; adj_x;</span><br><span class="line">  <span class="keyword">int</span> offset_x, offset_y;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; match_x, match_y;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vst_y;</span><br><span class="line"></span><br><span class="line">  BipartiteGraphMatching(<span class="keyword">int</span> num_x, <span class="keyword">int</span> num_y, <span class="keyword">int</span> osx = <span class="number">1</span>, <span class="keyword">int</span> osy = <span class="number">1</span>)</span><br><span class="line">    : n(num_x), m(num_y), adj_x(num_x), offset_x(osx), offset_y(osy),</span><br><span class="line">    match_x(num_x, kUnmatched), match_y(num_y, kUnmatched), vst_y(num_y) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; e)</span> </span>&#123;</span><br><span class="line">    adj_x[e.first - offset_x].push_back(e.second - offset_y);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&amp; es)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : es) &#123;</span><br><span class="line">      add_edge(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : adj_x[u]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (vst_y[v]) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      vst_y[v] = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (match_y[v] == kUnmatched || dfs(match_y[v])) &#123;</span><br><span class="line">        match_x[u] = v;</span><br><span class="line">        match_y[v] = u;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">hungarian</span><span class="params">(<span class="keyword">res_t</span>* res)</span> </span>&#123;</span><br><span class="line">    res-&gt;clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      vst_y.assign(n, <span class="literal">false</span>);</span><br><span class="line">      dfs(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (match_x[i] != kUnmatched) &#123;</span><br><span class="line">        res-&gt;emplace_back(i + offset_x, match_x[i] + offset_y);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res-&gt;size();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">output_matching</span><span class="params">(<span class="keyword">const</span> <span class="keyword">res_t</span>&amp; res)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Total "</span> &lt;&lt; res.size() &lt;&lt; <span class="string">" matching(s):"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : res) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; p.first &lt;&lt; <span class="string">", "</span> &lt;&lt; p.second &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  BipartiteGraphMatching::<span class="keyword">res_t</span> res;</span><br><span class="line"></span><br><span class="line">  <span class="function">BipartiteGraphMatching <span class="title">bgm1</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">  bgm1.init(&#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;,&#123;<span class="number">1</span>, <span class="number">3</span>&#125;,&#123;<span class="number">2</span>, <span class="number">2</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>&#125;&#125;);</span><br><span class="line">  bgm1.hungarian(&amp;res);</span><br><span class="line">  bgm1.output_matching(res);</span><br><span class="line"></span><br><span class="line">  <span class="function">BipartiteGraphMatching <span class="title">bgm2</span><span class="params">(<span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">  bgm2.init(&#123;&#123;<span class="number">0</span>, <span class="number">3</span>&#125;,&#123;<span class="number">0</span>, <span class="number">4</span>&#125;,&#123;<span class="number">1</span>, <span class="number">3</span>&#125;,&#123;<span class="number">2</span>, <span class="number">4</span>&#125;&#125;);</span><br><span class="line">  bgm2.hungarian(&amp;res);</span><br><span class="line">  bgm2.output_matching(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;之前写过一篇文章介绍二分图匹配匈牙利算法的细节，此处给出模板。&lt;/p&gt;
&lt;h3 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h3&gt;&lt;p&gt;1、offset调整序号开始的位置（0、1，或者x部与y部序号共不共用等）&lt;br&gt;2、可以通过dfs顺序控制多个结果时的返回（越小的匹配越小或者越大）&lt;br&gt;3、复杂度是O(NM)，N为x部点数，M为边数，因此交换x部与y部让x部更少。&lt;/p&gt;
&lt;h2 id=&quot;C-实现&quot;&gt;&lt;a href=&quot;#C-实现&quot; class=&quot;headerlink&quot; title=&quot;C++实现&quot;&gt;&lt;/a&gt;C++实现&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="二分图匹配" scheme="http://tashi711.top/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    
      <category term="匈牙利算法" scheme="http://tashi711.top/tags/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>「逆序对算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/reversed-pair/"/>
    <id>http://tashi711.top/programming/dsaa/reversed-pair/</id>
    <published>2019-05-06T03:15:34.000Z</published>
    <updated>2019-05-02T19:27:55.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用归并排序求逆序对算法，nlogn。</p><h3 id="算法细节"><a href="#算法细节" class="headerlink" title="算法细节"></a>算法细节</h3><p>有重复元素时算不算逆序对通过参数通过count_same确定，具体细节在归并时遇到前面比后面大的判断时体现。</p><h3 id="拓展思考"><a href="#拓展思考" class="headerlink" title="拓展思考"></a>拓展思考</h3><p>前面写过离散化与树状数组的模板结合一下也可以实现：使用离散化中by put的算法，重复元素不算逆序对时在前面的更小（默认做法），重复元素算作逆序对时在前面的更大。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ReversedPair</span> &#123;</span></span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">res_t</span> = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> res_t <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> mid, <span class="keyword">int</span> v, <span class="built_in">vector</span>&lt;T&gt;* sorted, <span class="built_in">vector</span>&lt;T&gt;* temp,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">bool</span> count_same)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">res_t</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p = u;</span><br><span class="line">    <span class="keyword">int</span> l = u, r = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= mid &amp;&amp; r &lt;= v) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((*sorted)[l] &lt; (*sorted)[r] ||</span><br><span class="line">        (!count_same &amp;&amp; (*sorted)[l] == (*sorted)[r])) &#123;</span><br><span class="line">        (*temp)[p++] = (*sorted)[l++];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res += mid - l + <span class="number">1</span>;</span><br><span class="line">        (*temp)[p++] = (*sorted)[r++];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= mid) &#123;</span><br><span class="line">      (*temp)[p++] = (*sorted)[l++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (r &lt;= v) &#123;</span><br><span class="line">      (*temp)[p++] = (*sorted)[r++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = u; i &lt;= v; ++i) &#123;</span><br><span class="line">      (*sorted)[i] = (*temp)[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> res_t <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="built_in">vector</span>&lt;T&gt;* sorted, <span class="built_in">vector</span>&lt;T&gt;* temp,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">bool</span> count_same)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">res_t</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (u == v) &#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = u + (v - u) / <span class="number">2</span>;</span><br><span class="line">    res += merge_sort(u, mid, sorted, temp, count_same);</span><br><span class="line">    res += merge_sort(mid + <span class="number">1</span>, v, sorted, temp, count_same);</span><br><span class="line">    res += merge(u, mid, v, sorted, temp, count_same);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> res_t <span class="title">count_by_merge</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; vec, <span class="keyword">bool</span> count_same = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = vec.size();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sorted(vec), temp(n);</span><br><span class="line">    <span class="keyword">return</span> merge_sort(<span class="number">0</span>, n - <span class="number">1</span>, &amp;sorted, &amp;temp, count_same);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(&#123;<span class="number">3</span>, <span class="number">6</span>, <span class="number">3</span>&#125;);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ReversedPair::count_by_merge(vec) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ReversedPair::count_by_merge(vec, <span class="literal">true</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">int</span> large = <span class="number">10000</span>;</span><br><span class="line">  vec.resize(large);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; large; ++i) &#123;</span><br><span class="line">    vec[i] = large - i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ReversedPair::count_by_merge(vec) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ReversedPair::count_by_merge(vec, <span class="literal">true</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; large; ++i) &#123;</span><br><span class="line">    vec[i] = <span class="number">777</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ReversedPair::count_by_merge(vec) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ReversedPair::count_by_merge(vec, <span class="literal">true</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;使用归并排序求逆序对算法，nlogn。&lt;/p&gt;
&lt;h3 id=&quot;算法细节&quot;&gt;&lt;a href=&quot;#算法细节&quot; class=&quot;headerlink&quot; title=&quot;算法细节&quot;&gt;&lt;/a&gt;算法细节&lt;/h3&gt;&lt;p&gt;有重复元素时算不算逆序对通过参数通过count_same确定，具体细节在归并时遇到前面比后面大的判断时体现。&lt;/p&gt;
&lt;h3 id=&quot;拓展思考&quot;&gt;&lt;a href=&quot;#拓展思考&quot; class=&quot;headerlink&quot; title=&quot;拓展思考&quot;&gt;&lt;/a&gt;拓展思考&lt;/h3&gt;&lt;p&gt;前面写过离散化与树状数组的模板结合一下也可以实现：使用离散化中by put的算法，重复元素不算逆序对时在前面的更小（默认做法），重复元素算作逆序对时在前面的更大。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="逆序对" scheme="http://tashi711.top/tags/%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
    
      <category term="归并排序" scheme="http://tashi711.top/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>「离散化算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/discretize/"/>
    <id>http://tashi711.top/programming/dsaa/discretize/</id>
    <published>2019-05-05T03:15:34.000Z</published>
    <updated>2019-05-03T17:46:52.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>离散化算法，nlogn。</p><h3 id="算法细节"><a href="#算法细节" class="headerlink" title="算法细节"></a>算法细节</h3><p>有重复元素时的三种情况（以{1, 9, 3, 6, 3}为例）：<br>1、相同元素算作相同rank的不同物体（discretize_by_search(false))，得到{1, 5, 2, 4, 2}。<br>2、相同元素算作相同rank的同一物体（discretize_by_search(true))，得到{1, 4, 2, 3, 2}。<br>3、相同元素算作不同rank，顺序可自行调整（discretize_by_put，下面满足原数组中序号小的更小)，得到{1, 5, 2, 4, 3}。</p><p>注：<br>1、元素各不相同时三种情况结果一样，discretize_by_put效率更高，只用一次排序，discretize_by_search需要n次二分查找。<br>2、可调序号开始的数值，默认1（参数offset）。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Discretizer</span> &#123;</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">discretize_by_search</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; vec, <span class="built_in">vector</span>&lt;T&gt;* res,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">bool</span> remove_duplicates = <span class="literal">false</span>, <span class="keyword">int</span> offset = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;T&gt; temp(vec);</span><br><span class="line">    sort(temp.begin(), temp.end());</span><br><span class="line">    <span class="keyword">auto</span> real_end = temp.cend();</span><br><span class="line">    <span class="keyword">if</span> (remove_duplicates) &#123;</span><br><span class="line">      real_end = unique(temp.begin(), temp.end());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n = vec.size();</span><br><span class="line">    res-&gt;resize(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      (*res)[i] = lower_bound(temp.cbegin(), real_end, vec[i]) - temp.cbegin()</span><br><span class="line">        + offset;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">discretize_by_put</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; vec, <span class="built_in">vector</span>&lt;T&gt;* res,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">int</span> offset = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = vec.size();</span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;T, <span class="keyword">int</span>&gt;&gt; temp(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      temp[i] = &#123;vec[i], i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(temp.begin(), temp.end());</span><br><span class="line">    res-&gt;resize(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      (*res)[temp[i].second] = i + offset;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">output_vec</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k : vec) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; k &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(&#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">3</span>&#125;), res;</span><br><span class="line">  Discretizer::discretize_by_search(vec, &amp;res);</span><br><span class="line">  Discretizer::output_vec(res);</span><br><span class="line">  Discretizer::discretize_by_search(vec, &amp;res, <span class="literal">true</span>);</span><br><span class="line">  Discretizer::output_vec(res);</span><br><span class="line">  Discretizer::discretize_by_put(vec, &amp;res);</span><br><span class="line">  Discretizer::output_vec(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;离散化算法，nlogn。&lt;/p&gt;
&lt;h3 id=&quot;算法细节&quot;&gt;&lt;a href=&quot;#算法细节&quot; class=&quot;headerlink&quot; title=&quot;算法细节&quot;&gt;&lt;/a&gt;算法细节&lt;/h3&gt;&lt;p&gt;有重复元素时的三种情况（以{1, 9, 3, 6, 3}为例）：&lt;br&gt;1、相同元素算作相同rank的不同物体（discretize_by_search(false))，得到{1, 5, 2, 4, 2}。&lt;br&gt;2、相同元素算作相同rank的同一物体（discretize_by_search(true))，得到{1, 4, 2, 3, 2}。&lt;br&gt;3、相同元素算作不同rank，顺序可自行调整（discretize_by_put，下面满足原数组中序号小的更小)，得到{1, 5, 2, 4, 3}。&lt;/p&gt;
&lt;p&gt;注：&lt;br&gt;1、元素各不相同时三种情况结果一样，discretize_by_put效率更高，只用一次排序，discretize_by_search需要n次二分查找。&lt;br&gt;2、可调序号开始的数值，默认1（参数offset）。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="离散化" scheme="http://tashi711.top/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>「三角形有向面积」计算</title>
    <link href="http://tashi711.top/programming/others/triangle-directed-area/"/>
    <id>http://tashi711.top/programming/others/triangle-directed-area/</id>
    <published>2019-05-04T03:15:34.000Z</published>
    <updated>2019-05-02T17:08:22.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>三角形有向面积，逆时针为正。</p><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>(x0 * y1 + x2 * y0 + x1 * y2 - x2 * y1 - x0 * y2 - x1 * y0) / 2。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ComputationalGeometry</span> &#123;</span></span><br><span class="line">  <span class="keyword">using</span> Point = pair&lt;T, T&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">triangle_directed_area</span><span class="params">(Point p1, Point p2, Point p3)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (p1.first * p2.second + p2.first * p3.second + p3.first * p1.second -</span><br><span class="line">      p1.first * p3.second - p2.first * p1.second - p3.first * p2.second) / <span class="number">2.0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ComputationalGeometry&lt;<span class="keyword">double</span>&gt; cg;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; cg.triangle_directed_area(&#123;<span class="number">0.0</span>, <span class="number">0.0</span>&#125;, &#123;<span class="number">1.5</span>, <span class="number">0.0</span>&#125;, &#123;<span class="number">2.3</span>, <span class="number">1.5</span>&#125;) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; cg.triangle_directed_area(&#123;<span class="number">0.0</span>, <span class="number">0.0</span>&#125;, &#123;<span class="number">0.1</span>, <span class="number">1.5</span>&#125;, &#123;<span class="number">1.5</span>, <span class="number">0.0</span>&#125;) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; cg.triangle_directed_area(&#123;<span class="number">0.0</span>, <span class="number">0.0</span>&#125;, &#123;<span class="number">0.1</span>, <span class="number">0.0</span>&#125;, &#123;<span class="number">1.5</span>, <span class="number">0.0</span>&#125;) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;三角形有向面积，逆时针为正。&lt;/p&gt;
&lt;h3 id=&quot;公式&quot;&gt;&lt;a href=&quot;#公式&quot; class=&quot;headerlink&quot; title=&quot;公式&quot;&gt;&lt;/a&gt;公式&lt;/h3&gt;&lt;p&gt;(x0 * y1 + x2 * y0 + x1 * y2 - x2 * y1 - x0 * y2 - x1 * y0) / 2。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="其他" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="计算几何" scheme="http://tashi711.top/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>「Graham扫描算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/graham-scan/"/>
    <id>http://tashi711.top/programming/dsaa/graham-scan/</id>
    <published>2019-05-03T03:17:59.000Z</published>
    <updated>2019-05-03T17:44:15.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>之前写了一篇文章专门讲平面凸包，这里将Graham扫描算法的细节实现为模板。</p><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>1、实现成template，可以做整数点与浮点数点（注意判断直线的细节，浮点叉乘会出现精度问题）。<br>2、实现了需不需要输出直线上的点两种，通过调整传参的flag，注意当不需要输出直线上的点时，可以不用最后的逆序操作，且注意第二个点可能会被弹出，因此需要判断当前是否至少两个点，否则直接push当前正在判断的点。<br>3、可以执行调整init方式（点为pair）。</p><h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ConvexHull</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">double</span> kEps = <span class="number">1e-9</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">using</span> Point = pair&lt;T, T&gt;;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">res_t</span> = <span class="built_in">vector</span>&lt;Point&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">vector</span>&lt;Point&gt; points;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="built_in">initializer_list</span>&lt;Point&gt;&amp;&amp; il)</span> </span>&#123;</span><br><span class="line">    points = il;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">cross</span><span class="params">(<span class="keyword">const</span> Point&amp; a, <span class="keyword">const</span> Point&amp; b, <span class="keyword">const</span> Point&amp; c)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    T ux = b.first - a.first;</span><br><span class="line">    T uy = b.second - a.second;</span><br><span class="line">    T vx = c.first - b.first;</span><br><span class="line">    T vy = c.second - b.second;</span><br><span class="line">    <span class="keyword">return</span> ux * vy - uy * vx;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">equal_to_zero</span><span class="params">(<span class="keyword">int</span> k)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">equal_to_zero</span><span class="params">(<span class="keyword">double</span> k)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(k) &lt;= kEps;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">greater_than_zero</span><span class="params">(<span class="keyword">int</span> k)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k &gt; <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">greater_than_zero</span><span class="params">(<span class="keyword">double</span> k)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k &gt; kEps;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">graham_scan</span><span class="params">(<span class="keyword">res_t</span>* res, <span class="keyword">bool</span> output_points_on_lines = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">    res-&gt;clear();</span><br><span class="line">    <span class="keyword">if</span> (points.empty()) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (points.size() == <span class="number">1u</span>) &#123;</span><br><span class="line">      res-&gt;push_back(points[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> p_min = min_element(points.begin(), points.end(),</span><br><span class="line">      [](<span class="keyword">const</span> Point&amp; u, <span class="keyword">const</span> Point&amp; v) &#123;</span><br><span class="line">      <span class="keyword">return</span> make_pair(u.second, u.first) &lt; make_pair(v.second, v.first);</span><br><span class="line">    &#125;);</span><br><span class="line">    swap(*p_min, points[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">auto</span> dist = [](<span class="keyword">const</span> Point&amp; a, <span class="keyword">const</span> Point&amp; b) -&gt; T &#123;</span><br><span class="line">      T dx = b.first - a.first;</span><br><span class="line">      T dy = b.second - a.second;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">abs</span>(dx) + <span class="built_in">abs</span>(dy);</span><br><span class="line">    &#125;;</span><br><span class="line">    sort(next(points.begin()), points.end(),</span><br><span class="line">      [&amp;](<span class="keyword">const</span> Point&amp; u, <span class="keyword">const</span> Point&amp; v) -&gt; <span class="keyword">bool</span> &#123;</span><br><span class="line">      <span class="keyword">double</span> theta_u =</span><br><span class="line">        <span class="built_in">atan2</span>(u.second - points[<span class="number">0</span>].second, u.first - points[<span class="number">0</span>].first);</span><br><span class="line">      <span class="keyword">double</span> theta_v =</span><br><span class="line">        <span class="built_in">atan2</span>(v.second - points[<span class="number">0</span>].second, v.first - points[<span class="number">0</span>].first);</span><br><span class="line">      <span class="keyword">if</span> (theta_u == theta_v) &#123;</span><br><span class="line">        <span class="keyword">return</span> dist(u, points[<span class="number">0</span>]) &lt; dist(v, points[<span class="number">0</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> theta_u &lt; theta_v;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (output_points_on_lines) &#123;</span><br><span class="line">      <span class="keyword">auto</span> pos = points.rend();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">auto</span> it = next(points.rbegin()); it != points.rend(); ++it) &#123;</span><br><span class="line">        T direction = cross(points[<span class="number">0</span>], *points.crbegin(), *it);</span><br><span class="line">        <span class="keyword">if</span> (!equal_to_zero(direction)) &#123;</span><br><span class="line">          pos = it;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      reverse(points.rbegin(), pos);</span><br><span class="line">    &#125;</span><br><span class="line">    res-&gt;push_back(points[<span class="number">0</span>]);</span><br><span class="line">    res-&gt;push_back(points[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">int</span> n = points.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (res-&gt;size() == <span class="number">1u</span>) &#123;</span><br><span class="line">        res-&gt;push_back(points[i]);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      T direction = cross(*next(res-&gt;rbegin()), *res-&gt;rbegin(), points[i]);</span><br><span class="line">      <span class="keyword">if</span> (greater_than_zero(direction) ||</span><br><span class="line">        (output_points_on_lines &amp;&amp; equal_to_zero(direction))) &#123;</span><br><span class="line">        res-&gt;push_back(points[i]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res-&gt;pop_back();</span><br><span class="line">        --i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">output_points</span><span class="params">(<span class="keyword">const</span> <span class="keyword">res_t</span>&amp; res)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"------- Total "</span> &lt;&lt; res.size() &lt;&lt; <span class="string">" point(s):"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : res) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; p.first &lt;&lt; <span class="string">", "</span> &lt;&lt; p.second &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ConvexHull&lt;<span class="keyword">int</span>&gt; hull_int;</span><br><span class="line">  ConvexHull&lt;<span class="keyword">int</span>&gt;::<span class="keyword">res_t</span> res_int;</span><br><span class="line">  hull_int.init(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,&#123;<span class="number">2</span>, <span class="number">3</span>&#125;,&#123;<span class="number">3</span>, <span class="number">4</span>&#125;,&#123;<span class="number">100</span>, <span class="number">101</span>&#125;&#125;);</span><br><span class="line">  hull_int.graham_scan(&amp;res_int);</span><br><span class="line">  hull_int.output_points(res_int);</span><br><span class="line">  hull_int.graham_scan(&amp;res_int, <span class="literal">true</span>);</span><br><span class="line">  hull_int.output_points(res_int);</span><br><span class="line">  ConvexHull&lt;<span class="keyword">double</span>&gt; hull_double;</span><br><span class="line">  ConvexHull&lt;<span class="keyword">double</span>&gt;::<span class="keyword">res_t</span> res;</span><br><span class="line">  hull_double.init(&#123;&#123;<span class="number">0.0</span>, <span class="number">0.0</span>&#125;,&#123;<span class="number">1.3</span>, <span class="number">1.3</span>&#125;,&#123;<span class="number">3.0</span>, <span class="number">3.0</span>&#125;,&#123;<span class="number">1.5</span>, <span class="number">4.5</span>&#125;,&#123;<span class="number">0.0</span>, <span class="number">6.0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">-0.01</span>, <span class="number">5.99</span>&#125;,&#123;<span class="number">-3.0</span>, <span class="number">3.0</span>&#125;,&#123;<span class="number">-2.12345</span>, <span class="number">2.12345</span>&#125;&#125;);</span><br><span class="line">  hull_double.graham_scan(&amp;res);</span><br><span class="line">  hull_double.output_points(res);</span><br><span class="line">  hull_double.graham_scan(&amp;res, <span class="literal">true</span>);</span><br><span class="line">  hull_double.output_points(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;之前写了一篇文章专门讲平面凸包，这里将Graham扫描算法的细节实现为模板。&lt;/p&gt;
&lt;h3 id=&quot;功能介绍&quot;&gt;&lt;a href=&quot;#功能介绍&quot; class=&quot;headerlink&quot; title=&quot;功能介绍&quot;&gt;&lt;/a&gt;功能介绍&lt;/h3&gt;&lt;p&gt;1、实现成template，可以做整数点与浮点数点（注意判断直线的细节，浮点叉乘会出现精度问题）。&lt;br&gt;2、实现了需不需要输出直线上的点两种，通过调整传参的flag，注意当不需要输出直线上的点时，可以不用最后的逆序操作，且注意第二个点可能会被弹出，因此需要判断当前是否至少两个点，否则直接push当前正在判断的点。&lt;br&gt;3、可以执行调整init方式（点为pair）。&lt;/p&gt;
&lt;h2 id=&quot;C-实现&quot;&gt;&lt;a href=&quot;#C-实现&quot; class=&quot;headerlink&quot; title=&quot;C++实现&quot;&gt;&lt;/a&gt;C++实现&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="凸包" scheme="http://tashi711.top/tags/%E5%87%B8%E5%8C%85/"/>
    
      <category term="Graham" scheme="http://tashi711.top/tags/Graham/"/>
    
  </entry>
  
  <entry>
    <title>「Manacher算法」模板</title>
    <link href="http://tashi711.top/programming/dsaa/manacher/"/>
    <id>http://tashi711.top/programming/dsaa/manacher/</id>
    <published>2019-05-02T03:15:34.000Z</published>
    <updated>2019-05-03T17:39:08.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>线性时间解决最长回文子串。</p><h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><p>在前面有一篇题解中写过，这里简单回顾下：</p><p>1、插入kSpetialChar（#，可修改），使其长度变为2n+1。</p><p>2、求len数组：当前为中心最长回文子串的半径（包括自己，最长回文子串长度一定为奇数），其在原串中最长回文子串为len-1。</p><p>3、依次求当前len[i]，记录并维护到目前为止回文子串的最右边（下面right记录的是最右边再往右一个位置）与此子串的中点（mid），此时right等于mid+len[mid]，找到i关于mid的对称点j，分四种情况（注意这里很多资料没说清楚，仔细分清楚才能与下面程序联系好并证明其正确性与效率）：</p><ul><li>一是i在最右边（right-1）之前或之上（i&lt;right）且len[j]延伸不到最右边（比right-i小），此时len[i]等于len[j]不能更多（试想看假如更多由对称性len[j]也能再延伸）。</li><li>二是i在最右边（right-1）之前或之上（i&lt;right）且len[j]延伸超过最右边（比right-i大），此时len[i]最多延伸到最右边（为right-i）不能更多（试想看假如更多，那么len[mid]可以再被延伸）。</li><li>三是i在最右边（right-1）之前或之上（i&lt;right）且len[j]刚好延伸到最右边（等于right-i），此时len[i]最少为len[j]（或者right-i），可能更多，需要试着扩张。</li><li>四是i在最右边之后（i&gt;=right），此时len[i]至少为1，可能更多，需要试着扩张。</li></ul><p>4、上面四种情况理清楚后可以写出下面代码（否则光看下面代码很难理解清楚），并且之所以这个算法是个线性复杂度的，是因为只有上面后两种情况会进入第二个循环，而此时right也一定随着增大，因此最多增加n次，均摊可得。</p><p>5、注意边界即可，加pivot不是必须的。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Manacher</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">char</span> kSpetialChar = <span class="string">'#'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="built_in">string</span> <span class="title">longest_substr</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> res = longest_palindrome(s);</span><br><span class="line">    <span class="keyword">return</span> s.substr(res.second, res.first);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; longest_palindrome(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s) &#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.size();</span><br><span class="line">    <span class="built_in">string</span> ms&#123;kSpetialChar&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : s) &#123;</span><br><span class="line">      ms += c;</span><br><span class="line">      ms += kSpetialChar;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = ms.size();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; len(m);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>, start = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> right = <span class="number">-1</span>, mid = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">      len[i] = right &gt; i ? min(len[<span class="number">2</span> * mid - i], right - i) : <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (i - len[i] &gt;= <span class="number">0</span> &amp;&amp; i + len[i] &lt; m &amp;&amp;</span><br><span class="line">        ms[i - len[i]] == ms[i + len[i]]) &#123;</span><br><span class="line">        ++len[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (right &lt; i + len[i]) &#123;</span><br><span class="line">        right = i + len[i];</span><br><span class="line">        mid = i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (ans &lt; len[i] - <span class="number">1</span>) &#123;  <span class="comment">// all answers: (ans == len[i] - 1)</span></span><br><span class="line">        ans = len[i] - <span class="number">1</span>;</span><br><span class="line">        start = (i - len[i] + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;ans, start&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> s1 = <span class="string">"babad"</span>;</span><br><span class="line">  <span class="keyword">auto</span> res1 = Manacher::longest_palindrome(s1);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="string">": "</span> &lt;&lt; res1.first &lt;&lt; <span class="string">' '</span> &lt;&lt; res1.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; Manacher::longest_substr(s1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">string</span> s2 = <span class="string">"cbbd"</span>;</span><br><span class="line">  <span class="keyword">auto</span> res2 = Manacher::longest_palindrome(s2);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; s2 &lt;&lt; <span class="string">": "</span> &lt;&lt; res2.first &lt;&lt; <span class="string">' '</span> &lt;&lt; res2.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; Manacher::longest_substr(s2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;线性时间解决最长回文子串。&lt;/p&gt;
&lt;h3 id=&quot;算法简介&quot;&gt;&lt;a href=&quot;#算法简介&quot; class=&quot;headerlink&quot; title=&quot;算法简介&quot;&gt;&lt;/a&gt;算法简介&lt;/h3&gt;&lt;p&gt;在前面有一篇题解中写过，这里简单回顾下：&lt;/p&gt;
&lt;p&gt;1、插入kSpetialChar（#，可修改），使其长度变为2n+1。&lt;/p&gt;
&lt;p&gt;2、求len数组：当前为中心最长回文子串的半径（包括自己，最长回文子串长度一定为奇数），其在原串中最长回文子串为len-1。&lt;/p&gt;
&lt;p&gt;3、依次求当前len[i]，记录并维护到目前为止回文子串的最右边（下面right记录的是最右边再往右一个位置）与此子串的中点（mid），此时right等于mid+len[mid]，找到i关于mid的对称点j，分四种情况（注意这里很多资料没说清楚，仔细分清楚才能与下面程序联系好并证明其正确性与效率）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一是i在最右边（right-1）之前或之上（i&amp;lt;right）且len[j]延伸不到最右边（比right-i小），此时len[i]等于len[j]不能更多（试想看假如更多由对称性len[j]也能再延伸）。&lt;/li&gt;
&lt;li&gt;二是i在最右边（right-1）之前或之上（i&amp;lt;right）且len[j]延伸超过最右边（比right-i大），此时len[i]最多延伸到最右边（为right-i）不能更多（试想看假如更多，那么len[mid]可以再被延伸）。&lt;/li&gt;
&lt;li&gt;三是i在最右边（right-1）之前或之上（i&amp;lt;right）且len[j]刚好延伸到最右边（等于right-i），此时len[i]最少为len[j]（或者right-i），可能更多，需要试着扩张。&lt;/li&gt;
&lt;li&gt;四是i在最右边之后（i&amp;gt;=right），此时len[i]至少为1，可能更多，需要试着扩张。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、上面四种情况理清楚后可以写出下面代码（否则光看下面代码很难理解清楚），并且之所以这个算法是个线性复杂度的，是因为只有上面后两种情况会进入第二个循环，而此时right也一定随着增大，因此最多增加n次，均摊可得。&lt;/p&gt;
&lt;p&gt;5、注意边界即可，加pivot不是必须的。&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="回文串" scheme="http://tashi711.top/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
      <category term="Manacher" scheme="http://tashi711.top/tags/Manacher/"/>
    
  </entry>
  
  <entry>
    <title>「队列最大值询问」妙解</title>
    <link href="http://tashi711.top/programming/others/queue-max-query/"/>
    <id>http://tashi711.top/programming/others/queue-max-query/</id>
    <published>2019-05-01T03:17:59.000Z</published>
    <updated>2019-04-30T18:35:36.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>今天看到一个很巧妙的解决队列最大值询问的方法。</p><h3 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h3><p>三种操作：<br>1、队列push(k)<br>2、队列pop<br>3、询问队列中最大值</p><h3 id="初步思考"><a href="#初步思考" class="headerlink" title="初步思考"></a>初步思考</h3><p>首先n方的暴力就不说了。<br>进一步可以想到用堆（优先队列）解决，nlogn。</p><h3 id="巧妙的解法"><a href="#巧妙的解法" class="headerlink" title="巧妙的解法"></a>巧妙的解法</h3><a id="more"></a><p>首先原问题如果是个栈就很好做，push的值比目前最大值大就连一个指针从插入值到原最大值。<br>那么如果当前这个最大值pop了，那新的最大值即为这里指针指向的元素。<br>队列的话可以转换成两个栈，每个元素push时到栈1，pop时从栈2出来，按照以下操作即可满足出栈2顺序为进栈1顺序：<br>栈2需要pop却为空的时候将栈1的所有元素pop到栈2（感觉原书上也没细讲这个，但这个比较关键）。<br>栈1维护最大值，栈2维护刚才提到的指针，询问最大值即为两边最大值的最大值。<br>均摊复杂度可以达到O(1)。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>《编程之美》</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;今天看到一个很巧妙的解决队列最大值询问的方法。&lt;/p&gt;
&lt;h3 id=&quot;问题提出&quot;&gt;&lt;a href=&quot;#问题提出&quot; class=&quot;headerlink&quot; title=&quot;问题提出&quot;&gt;&lt;/a&gt;问题提出&lt;/h3&gt;&lt;p&gt;三种操作：&lt;br&gt;1、队列push(k)&lt;br&gt;2、队列pop&lt;br&gt;3、询问队列中最大值&lt;/p&gt;
&lt;h3 id=&quot;初步思考&quot;&gt;&lt;a href=&quot;#初步思考&quot; class=&quot;headerlink&quot; title=&quot;初步思考&quot;&gt;&lt;/a&gt;初步思考&lt;/h3&gt;&lt;p&gt;首先n方的暴力就不说了。&lt;br&gt;进一步可以想到用堆（优先队列）解决，nlogn。&lt;/p&gt;
&lt;h3 id=&quot;巧妙的解法&quot;&gt;&lt;a href=&quot;#巧妙的解法&quot; class=&quot;headerlink&quot; title=&quot;巧妙的解法&quot;&gt;&lt;/a&gt;巧妙的解法&lt;/h3&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="其他" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="巧妙" scheme="http://tashi711.top/tags/%E5%B7%A7%E5%A6%99/"/>
    
  </entry>
  
  <entry>
    <title>「高精度及其最大公约数」模板</title>
    <link href="http://tashi711.top/programming/dsaa/bign-with-gcd/"/>
    <id>http://tashi711.top/programming/dsaa/bign-with-gcd/</id>
    <published>2019-04-30T03:15:34.000Z</published>
    <updated>2019-05-04T06:15:49.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>类内函数：</strong><br>构造（string、int）<br>赋值（string、int）<br>加法（包括+=）<br>减法（包括-=）<br>乘法（单精度、高精度，包括其各自的*=）<br>除法与取余（单精度，包括/=）<br>大小比较<br>奇偶判断<br>等于0判断</p><p><strong>全局函数：</strong><br>流<br>最大公约数</p><h3 id="功能与局限"><a href="#功能与局限" class="headerlink" title="功能与局限"></a>功能与局限</h3><p><strong>满足：</strong><br>1、过滤前导0（字符串初始化、减法、乘0、除法）<br>2、除0判断</p><p><strong>待完善：</strong><br>1、常数优化：将10进制优化到10^k进制<br>2、符号运算（目前减法不支持小减大）<br>3、高精度除以高精度<br>4、分离除法与取余</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bign</span> &#123;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> kBase = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">int</span> len;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num;</span><br><span class="line"></span><br><span class="line">  Bign() : len(<span class="number">1</span>), num(&#123;<span class="number">0</span>&#125;) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  Bign(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Bign(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = n;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Bign <span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s) &#123;</span><br><span class="line">    len = s.length();</span><br><span class="line">    num.resize(len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">      num[i] = s[len - i - <span class="number">1</span>] - <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    remove_leading_zeros();</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Bign <span class="keyword">operator</span>=(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span> = to_string(n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">to_str</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">res</span><span class="params">(len, <span class="string">'\0'</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">      res[i] = <span class="string">'0'</span> + num[len - i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">remove_leading_zeros</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (len &gt; <span class="number">1</span> &amp;&amp; num.back() == <span class="number">0</span>) &#123;</span><br><span class="line">      --len;</span><br><span class="line">      num.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Bign <span class="keyword">operator</span>+(<span class="keyword">const</span> Bign&amp; r) <span class="keyword">const</span> &#123;</span><br><span class="line">    Bign res;</span><br><span class="line">    res.len = max(len, r.len);</span><br><span class="line">    res.num.resize(res.len);</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.len; ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; len) &#123;</span><br><span class="line">        c += num[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; r.len) &#123;</span><br><span class="line">        c += r.num[i];</span><br><span class="line">      &#125;</span><br><span class="line">      res.num[i] = c % kBase;</span><br><span class="line">      c /= kBase;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c) &#123;</span><br><span class="line">      ++res.len;</span><br><span class="line">      res.num.push_back(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Bign <span class="keyword">operator</span>-(<span class="keyword">const</span> Bign&amp; r) <span class="keyword">const</span> &#123;</span><br><span class="line">    Bign res;</span><br><span class="line">    res.len = len;</span><br><span class="line">    res.num.resize(res.len);</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.len; ++i) &#123;</span><br><span class="line">      c += num[i];</span><br><span class="line">      <span class="keyword">if</span> (i &lt; r.len) &#123;</span><br><span class="line">        c -= r.num[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (c &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        res.num[i] = c + kBase;</span><br><span class="line">        c = <span class="number">-1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.num[i] = c;</span><br><span class="line">        c = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.remove_leading_zeros();</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Bign <span class="keyword">operator</span>*(<span class="keyword">int</span> k) <span class="keyword">const</span> &#123;</span><br><span class="line">    Bign res;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    res.len = len;</span><br><span class="line">    res.num.resize(res.len);</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.len; ++i) &#123;</span><br><span class="line">      c += num[i] * k;</span><br><span class="line">      res.num[i] = c % kBase;</span><br><span class="line">      c /= kBase;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c) &#123;</span><br><span class="line">      ++res.len;</span><br><span class="line">      res.num.push_back(c % kBase);</span><br><span class="line">      c /= kBase;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Bign <span class="keyword">operator</span>*(<span class="keyword">const</span> Bign&amp; r) <span class="keyword">const</span> &#123;</span><br><span class="line">    Bign res;</span><br><span class="line">    <span class="keyword">if</span> (*<span class="keyword">this</span> == res || r == res) &#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    res.len = len + r.len - <span class="number">1</span>;</span><br><span class="line">    res.num.assign(res.len, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; r.len; ++j) &#123;</span><br><span class="line">        res.num[i + j] += num[i] * r.num[j];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.len; ++i) &#123;</span><br><span class="line">      c += res.num[i];</span><br><span class="line">      res.num[i] = c % kBase;</span><br><span class="line">      c /= kBase;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c) &#123;</span><br><span class="line">      ++res.len;</span><br><span class="line">      res.num.push_back(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pair&lt;Bign, <span class="keyword">int</span>&gt; <span class="keyword">operator</span>/(<span class="keyword">int</span> k) <span class="keyword">const</span> &#123;</span><br><span class="line">    Bign res;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; to_str() &lt;&lt; <span class="string">" divide 0."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span> &#123;res, <span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    res.len = len;</span><br><span class="line">    res.num.resize(res.len);</span><br><span class="line">    <span class="keyword">int</span> rmd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">      rmd = rmd * kBase + num[i];</span><br><span class="line">      res.num[i] = rmd / k;</span><br><span class="line">      rmd %= k;</span><br><span class="line">    &#125;</span><br><span class="line">    res.remove_leading_zeros();</span><br><span class="line">    <span class="keyword">return</span> &#123;res, rmd&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Bign&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> Bign&amp; r) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> + r;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Bign&amp; <span class="keyword">operator</span>-=(<span class="keyword">const</span> Bign&amp; r) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> - r;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Bign&amp; <span class="keyword">operator</span>*=(<span class="keyword">int</span> k) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> * k;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Bign&amp; <span class="keyword">operator</span>*=(<span class="keyword">const</span> Bign&amp; r) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = *<span class="keyword">this</span> * r;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Bign&amp; <span class="keyword">operator</span>/=(<span class="keyword">int</span> k) &#123;</span><br><span class="line">    *<span class="keyword">this</span> = (*<span class="keyword">this</span> / k).first;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Bign&amp; r) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (len != r.len) &#123;</span><br><span class="line">      <span class="keyword">return</span> len &lt; r.len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (num[i] != r.num[i]) &#123;</span><br><span class="line">        <span class="keyword">return</span> num[i] &lt;= r.num[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> Bign&amp; r) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r &lt; *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> Bign&amp; r) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !(r &lt; *<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> Bign&amp; r) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; r);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> Bign&amp; r) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span> &lt; r || r &lt; *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Bign&amp; r) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !(*<span class="keyword">this</span> &lt; r) &amp;&amp; !(r &lt; *<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_even</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num[<span class="number">0</span>] &amp; <span class="number">1</span>) == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_zero</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> len == <span class="number">1</span> &amp;&amp; num[<span class="number">0</span>] == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;in, Bign&amp; r) &#123;</span><br><span class="line">  <span class="built_in">string</span> s;</span><br><span class="line">  in &gt;&gt; s;</span><br><span class="line">  r = s;</span><br><span class="line">  <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="keyword">const</span> Bign&amp; r) &#123;</span><br><span class="line">  out &lt;&lt; r.to_str();</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Bign <span class="title">gcd</span><span class="params">(Bign x, Bign y)</span> </span>&#123;</span><br><span class="line">  Bign res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (!x.is_zero() &amp;&amp; !y.is_zero() &amp;&amp; x.is_even() &amp;&amp; y.is_even()) &#123;</span><br><span class="line">    x /= <span class="number">2</span>;</span><br><span class="line">    y /= <span class="number">2</span>;</span><br><span class="line">    res *= <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (!x.is_zero() &amp;&amp; !y.is_zero()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x.is_even()) &#123;</span><br><span class="line">      x /= <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y.is_even()) &#123;</span><br><span class="line">      y /= <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">      x -= y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      y -= x;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x.is_zero()) &#123;</span><br><span class="line">    res *= y;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res *= x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Bign b1, b2(<span class="number">123</span>), b3(<span class="string">"12345678901234567890"</span>), b4, b5;</span><br><span class="line">  b4 = <span class="number">11</span>;</span><br><span class="line">  b5 = <span class="string">"98765432109876543210"</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"------- test construct and assign: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b4 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b5 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"------- test compare: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; (b2 &lt; <span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; (b2 &gt; Bign(<span class="string">"100"</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; (b2 == <span class="number">123</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; (b2 != Bign(<span class="string">"123"</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; (b2 == <span class="number">234</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; (b2 != Bign(<span class="string">"90"</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; (b2 &lt;= <span class="number">123</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; (b2 &gt;= Bign(<span class="string">"1000"</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"------- test add: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  Bign b6 = b4 + <span class="number">99</span>;</span><br><span class="line">  <span class="function">Bign <span class="title">b7</span><span class="params">(<span class="number">400</span>)</span></span>;</span><br><span class="line">  b7 += Bign(<span class="string">"1650"</span>);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b6 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b7 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"------- test minus: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  Bign b8 = b2 - <span class="number">99</span>;</span><br><span class="line">  <span class="function">Bign <span class="title">b9</span><span class="params">(<span class="number">401</span>)</span></span>;</span><br><span class="line">  Bign b10 = <span class="string">"1234"</span>;</span><br><span class="line">  b9 -= <span class="number">100</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b8 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b9 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b10 - Bign(<span class="string">"1234"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b10 - Bign(<span class="string">"1212"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"------- test times smalln: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  Bign b11 = Bign(<span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">  Bign b12(Bign("11") * 11);</span><br><span class="line">  Bign b13 = <span class="string">"12345"</span>;</span><br><span class="line">  Bign b14 = Bign(<span class="string">"111111111"</span>) * <span class="number">111111111</span>;</span><br><span class="line">  b13 *= <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b11 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b12 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b13 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b14 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"------- test times Bign: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  Bign b15 = Bign(<span class="number">1</span>) * Bign(<span class="number">2</span>);</span><br><span class="line">  Bign b16(Bign("99") * Bign("99"));</span><br><span class="line">  Bign b17 = <span class="string">"12345678901234567890"</span>;</span><br><span class="line">  Bign b18 = b17 * Bign(<span class="number">0</span>);</span><br><span class="line">  Bign b19 = Bign(<span class="string">"0"</span>) * b17;</span><br><span class="line">  b17 *= Bign(<span class="string">"10000000000000000000010"</span>);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b15 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b16 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b17 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b18 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b19 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"------- test divide: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">auto</span> b20 = Bign(<span class="number">10</span>) / <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">auto</span> b21 = Bign(<span class="string">"101010101"</span>) / <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">auto</span> b22 = Bign(<span class="string">"225225"</span>) / <span class="number">15</span>;</span><br><span class="line">  <span class="keyword">auto</span> b23 = Bign(<span class="string">"123456789012345678901234567911"</span>) / <span class="number">123456789</span>;</span><br><span class="line">  Bign b24 = <span class="number">12345679</span>;</span><br><span class="line">  b24 /= <span class="number">12343678</span>;</span><br><span class="line">  <span class="function">Bign <span class="title">b25</span><span class="params">(<span class="string">"100000"</span>)</span></span>;</span><br><span class="line">  b25 /= <span class="number">333</span>;</span><br><span class="line">  <span class="keyword">auto</span> b26 = Bign(<span class="number">1234</span>) / <span class="number">123455</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b20.first &lt;&lt; <span class="string">' '</span> &lt;&lt; b20.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b21.first &lt;&lt; <span class="string">' '</span> &lt;&lt; b21.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b22.first &lt;&lt; <span class="string">' '</span> &lt;&lt; b22.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b23.first &lt;&lt; <span class="string">' '</span> &lt;&lt; b23.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b24 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b25 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; b26.first &lt;&lt; <span class="string">' '</span> &lt;&lt; b26.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"------- test gcd: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; gcd(Bign(<span class="number">0</span>), Bign(<span class="number">6</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; gcd(Bign(<span class="number">8</span>), Bign(<span class="number">0</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; gcd(Bign(<span class="number">15</span>), Bign(<span class="number">24</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; gcd(Bign(<span class="number">128</span>), Bign(<span class="number">256</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; gcd(Bign(<span class="number">7</span>), Bign(<span class="number">1</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; gcd(Bign(<span class="string">"123456789012345678900"</span>), Bign(<span class="string">"123456789"</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; gcd(Bign(<span class="string">"123456789012345678900"</span>), Bign(<span class="string">"1234567890123456789"</span>))</span><br><span class="line">    &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; gcd(Bign(<span class="number">0</span>), Bign(<span class="number">6</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"------- test input: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  Bign bin;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; bin;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; bin &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;类内函数：&lt;/strong&gt;&lt;br&gt;构造（string、int）&lt;br&gt;赋值（string、int）&lt;br&gt;加法（包括+=）&lt;br&gt;减法（包括-=）&lt;br&gt;乘法（单精度、高精度，包括其各自的*=）&lt;br&gt;除法与取余（单精度，包括/=）&lt;br&gt;大小比较&lt;br&gt;奇偶判断&lt;br&gt;等于0判断&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全局函数：&lt;/strong&gt;&lt;br&gt;流&lt;br&gt;最大公约数&lt;/p&gt;
&lt;h3 id=&quot;功能与局限&quot;&gt;&lt;a href=&quot;#功能与局限&quot; class=&quot;headerlink&quot; title=&quot;功能与局限&quot;&gt;&lt;/a&gt;功能与局限&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;满足：&lt;/strong&gt;&lt;br&gt;1、过滤前导0（字符串初始化、减法、乘0、除法）&lt;br&gt;2、除0判断&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;待完善：&lt;/strong&gt;&lt;br&gt;1、常数优化：将10进制优化到10^k进制&lt;br&gt;2、符号运算（目前减法不支持小减大）&lt;br&gt;3、高精度除以高精度&lt;br&gt;4、分离除法与取余&lt;/p&gt;
&lt;h2 id=&quot;C-代码&quot;&gt;&lt;a href=&quot;#C-代码&quot; class=&quot;headerlink&quot; title=&quot;C++代码&quot;&gt;&lt;/a&gt;C++代码&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构与算法" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="高精度" scheme="http://tashi711.top/tags/%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
    
      <category term="最大公约数" scheme="http://tashi711.top/tags/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>「LeetCode 25. Reverse Nodes in k-Group」解题报告</title>
    <link href="http://tashi711.top/programming/reports/leetcode/leetcode-25/"/>
    <id>http://tashi711.top/programming/reports/leetcode/leetcode-25/</id>
    <published>2019-04-09T03:57:02.000Z</published>
    <updated>2019-04-08T16:14:40.108Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener">LeetCode 25. Reverse Nodes in k-Group</a></li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>先加dummy方便处理，走k次都没有null说明可以做，再从头换到尾。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度为$O(N)$。<br>空间复杂度为$O(1)$。</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">ListNode * <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode *dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy-&gt;next = head;</span><br><span class="line">    ListNode *cur = dummy;</span><br><span class="line">    <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">      <span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">      ListNode *p = cur;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!p-&gt;next) &#123;</span><br><span class="line">          ok = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!ok) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ListNode *u = cur-&gt;next, *v = u-&gt;next;</span><br><span class="line">      p = cur-&gt;next;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; ++i) &#123;</span><br><span class="line">        ListNode *t = v-&gt;next;</span><br><span class="line">        v-&gt;next = u;</span><br><span class="line">        u = v;</span><br><span class="line">        v = t;</span><br><span class="line">      &#125;</span><br><span class="line">      cur-&gt;next-&gt;next = v;</span><br><span class="line">      cur-&gt;next = u;</span><br><span class="line">      cur = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/reverse-nodes-in-k-group/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 25. Reverse Nodes in k-Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;先加dummy方便处理，走k次都没有null说明可以做，再从头换到尾。&lt;/p&gt;
&lt;h3 id=&quot;复杂度分析&quot;&gt;&lt;a href=&quot;#复杂度分析&quot; class=&quot;headerlink&quot; title=&quot;复杂度分析&quot;&gt;&lt;/a&gt;复杂度分析&lt;/h3&gt;&lt;p&gt;时间复杂度为$O(N)$。&lt;br&gt;空间复杂度为$O(1)$。&lt;/p&gt;
&lt;h2 id=&quot;AC代码（C-）&quot;&gt;&lt;a href=&quot;#AC代码（C-）&quot; class=&quot;headerlink&quot; title=&quot;AC代码（C++）&quot;&gt;&lt;/a&gt;AC代码（C++）&lt;/h2&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="解题报告" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
      <category term="LeetCode" scheme="http://tashi711.top/categories/%E7%BC%96%E7%A8%8B/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/LeetCode/"/>
    
    
      <category term="链表" scheme="http://tashi711.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
</feed>
