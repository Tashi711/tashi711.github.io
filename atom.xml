<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tashi711的博客</title>
  
  <subtitle>過去（きのう）に傷付きながらも、信じ続ける理想（ゆめ）を求める。いつか無限（なないろ）に輝き放って、青空（そら）に橋を描く。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tashi711.xyz/"/>
  <updated>2018-04-02T18:04:11.729Z</updated>
  <id>http://tashi711.xyz/</id>
  
  <author>
    <name>Tashi711</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「LeetCode 805. Split Array With Same Average」解题报告</title>
    <link href="http://tashi711.xyz/programming/leetcode/leetcode-805/"/>
    <id>http://tashi711.xyz/programming/leetcode/leetcode-805/</id>
    <published>2018-04-01T16:25:42.000Z</published>
    <updated>2018-04-02T18:04:11.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><blockquote><ul><li>链接：<a href="https://leetcode.com/problems/split-array-with-same-average/description/" target="_blank" rel="noopener">LeetCode 805. Split Array With Same Average</a></li><li>来源：LeetCode</li><li>难度：Hard</li></ul></blockquote><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定N个整数，判断是否能分成均值相同的两堆（非空），N范围为1到30，数值范围为0到10000。<br>比如样例 [1,2,3,4,5,6,7,8] 可以分成 [1,4,5,8] 和 [2,3,6,7] 两组，均值为4.5。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><a id="more"></a><p>初看题目直觉是NP的，看完数据范围更加确定了这一点，暴搜复杂度2^30，不好剪枝，显然会TLE。<br>首先N=1时一定返回false，因为无论怎么分总有一堆为空，于是只需考虑N≥2。<br>先将这组数字分成数量相同的两堆，N为奇数时任意一堆多放一个即可。<br>暴搜出两堆各自能产生的所有组合的均值，复杂度为2^15。<br>如果存在一个合理的分法满足题目要求，那么最终结果的两堆数字的均值应该都等于整组数据的均值。<br>此时要么在某一堆里能计算出这个均值，要么从两堆里各取一组加权平均后等于这个均值。<br>如果尝试两两组合算出所有的可能性，那么复杂度依旧为(2^15)^2=2^30。<br>有一个直观的想法是，两个堆算出的均值结果进行排序。<br>用两个指针分别指向一个堆均值的最小值（小堆），以及另一个堆均值的最大值（大堆）。<br>若当前指针指向的两组数加权平均比总体均值要大，那么将大堆指针往小的方向移，否则将小堆指针往大的方向移。<br>这样就只需要线性的复杂度扫描了，但这样做的前提是指针移走后的值不会继续用到了。<br>实际实现这个算法提交后发现WA了，分析一波错的数据，发现这个做法会出现问题的原因在于，可能出现这种情况：<br>例如小堆中目前指向的那组数个数非常多，而大堆中目前以及往小方向的连续几组数个数都比较少。<br>在此时算出的加权均值小于总体均值，由于小堆的一方数量上的优势会使大堆的指针往小方向连续移好几个。<br>若此时算出的加权均值又大于了总体均值，且小堆中往大方向连续几组数个数都更少，<br>那么小堆的指针又会往大的方向移很多个，那么可能在两次连续移动的中间分别存在一组数能凑成最终的答案。<br>一个解决这个问题的方法是，一开始将数据都去均值化。<br>如果存在一个合理的分法，那么最终结果的两堆数字的均值应该都等于0，等价于和为0。<br>如果将均值考虑成求和，那么上面说到的问题就不存在了，因为数量只对加权平均有影响，而对求和没有影响。<br>可以简单的证明，一旦指针移走，前面的值就不会再考虑到了。<br>因此上面的算法，将所有求平均的地方换成求和，这个问题就可以圆满解决了，注意以下几个细节即可：<br>1、虽然浮点数在乘除法上的迭代不多，但是还是要用相差在一定精度范围来判断两个浮点数是否相等。<br>2、在考虑从两堆和里面各取一部分时，可能出现在两堆中都取了全部的数字，此时形成的另一堆会是空集。<br>要解决这个问题还是要记录组成当前和的元素个数，若求和的两组数的数量之和等于N了就跳过。</p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>考虑排序在内，时间复杂度为：<br>$$O(2^{N/2}\log 2^{N/2})=O(\frac{N}{2}\cdot2^{N/2})$$<br>N为数组长度，在N≤30时是可以接受的。<br>空间复杂度为：<br>$$O(2^{N/2})$$</p><h2 id="AC代码（C-）"><a href="#AC代码（C-）" class="headerlink" title="AC代码（C++）"></a>AC代码（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> a[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">splitArraySameAverage</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>&#123;</span><br><span class="line">n = (<span class="keyword">int</span>)A.size();</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">res += A[i];</span><br><span class="line">&#125;</span><br><span class="line">res /= n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">a[i] = A[i - <span class="number">1</span>] - res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> work();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> sum;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line">node(<span class="keyword">double</span> _sum = <span class="number">0</span>, <span class="keyword">int</span> _cnt = <span class="number">0</span>) : sum(_sum), cnt(_cnt) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;r) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sum &lt; r.sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> ed, <span class="built_in">vector</span>&lt;node&gt; &amp;adj, <span class="keyword">double</span> sum, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == ed + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (cnt != <span class="number">0</span>) &#123;</span><br><span class="line">adj.emplace_back(sum, cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(p + <span class="number">1</span>, ed, adj, sum + a[p], cnt + <span class="number">1</span>);</span><br><span class="line">dfs(p + <span class="number">1</span>, ed, adj, sum, cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">my_equal</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">fabs</span>(x - y) &lt; EPS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = n / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; left, right;</span><br><span class="line">dfs(<span class="number">1</span>, m, left, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">dfs(m + <span class="number">1</span>, n, right, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">sort(left.begin(), left.end());</span><br><span class="line">sort(right.begin(), right.end());</span><br><span class="line"><span class="keyword">int</span> u = <span class="number">0</span>, v = (<span class="keyword">int</span>)right.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; left.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">double</span> avg = left[i].sum;</span><br><span class="line"><span class="keyword">if</span> (my_equal(avg, <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (u &lt; (<span class="keyword">int</span>)left.size() &amp;&amp; v &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> tot = left[u].cnt + right[v].cnt;</span><br><span class="line"><span class="keyword">double</span> avg = left[u].sum + right[v].sum;</span><br><span class="line"><span class="keyword">if</span> (my_equal(avg, <span class="number">0</span>) &amp;&amp; tot != n) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (avg &lt; <span class="number">0</span>) &#123;</span><br><span class="line">++u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">--v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解题心得"><a href="#解题心得" class="headerlink" title="解题心得"></a>解题心得</h2><p>最近在前室友的带领下刚入坑LeetCode，这种提交接口而不是整个程序的方式还是第一次尝试。<br>当然刚开始也踩了许多坑，比如全局变量的使用。<br>看了官方文档才发现，实际测试时，同一个全局变量是会被多个实例反复调用的。<br>因此全局变量必须每次都初始化，根据文档的提醒最好的方式是不要使用全局变量。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;链接：&lt;a href=&quot;https://leetcode.com/problems/split-array-with-same-average/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode 805. Split Array With Same Average&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;来源：LeetCode&lt;/li&gt;
&lt;li&gt;难度：Hard&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h2&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;给定N个整数，判断是否能分成均值相同的两堆（非空），N范围为1到30，数值范围为0到10000。&lt;br&gt;比如样例 [1,2,3,4,5,6,7,8] 可以分成 [1,4,5,8] 和 [2,3,6,7] 两组，均值为4.5。&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;
    
    </summary>
    
      <category term="programming" scheme="http://tashi711.xyz/categories/programming/"/>
    
      <category term="leetcode" scheme="http://tashi711.xyz/categories/programming/leetcode/"/>
    
    
      <category term="搜索" scheme="http://tashi711.xyz/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
</feed>
